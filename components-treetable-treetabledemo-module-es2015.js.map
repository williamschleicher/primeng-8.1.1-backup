{"version":3,"sources":["webpack:///./src/app/showcase/components/treetable/treetablecolgroupdemo.html","webpack:///./src/app/showcase/components/treetable/treetablecolresizedemo.html","webpack:///./src/app/showcase/components/treetable/treetablecoltoggledemo.html","webpack:///./src/app/showcase/components/treetable/treetablecontextmenudemo.html","webpack:///./src/app/showcase/components/treetable/treetabledemo.html","webpack:///./src/app/showcase/components/treetable/treetableeditdemo.html","webpack:///./src/app/showcase/components/treetable/treetablefilterdemo.html","webpack:///./src/app/showcase/components/treetable/treetablelazydemo.html","webpack:///./src/app/showcase/components/treetable/treetablepagedemo.html","webpack:///./src/app/showcase/components/treetable/treetablereorderdemo.html","webpack:///./src/app/showcase/components/treetable/treetableresponsivedemo.html","webpack:///./src/app/showcase/components/treetable/treetablescrolldemo.html","webpack:///./src/app/showcase/components/treetable/treetablesectionsdemo.html","webpack:///./src/app/showcase/components/treetable/treetableselectiondemo.html","webpack:///./src/app/showcase/components/treetable/treetablesortdemo.html","webpack:///./src/app/showcase/components/treetable/treetablestyledemo.html","webpack:///./src/app/components/treetable/treetable.ts","webpack:///./src/app/showcase/components/treetable/treetablecolgroupdemo.ts","webpack:///./src/app/showcase/components/treetable/treetablecolresizedemo.ts","webpack:///./src/app/showcase/components/treetable/treetablecoltoggledemo.ts","webpack:///./src/app/showcase/components/treetable/treetablecontextmenudemo.ts","webpack:///./src/app/showcase/components/treetable/treetabledemo-routing.module.ts","webpack:///./src/app/showcase/components/treetable/treetabledemo.module.ts","webpack:///./src/app/showcase/components/treetable/treetabledemo.ts","webpack:///./src/app/showcase/components/treetable/treetableeditdemo.ts","webpack:///./src/app/showcase/components/treetable/treetablefilterdemo.ts","webpack:///./src/app/showcase/components/treetable/treetablelazydemo.ts","webpack:///./src/app/showcase/components/treetable/treetablepagedemo.ts","webpack:///./src/app/showcase/components/treetable/treetablereorderdemo.ts","webpack:///./src/app/showcase/components/treetable/treetableresponsivedemo.ts","webpack:///./src/app/showcase/components/treetable/treetablescrolldemo.ts","webpack:///./src/app/showcase/components/treetable/treetablesectionsdemo.ts","webpack:///./src/app/showcase/components/treetable/treetableselectiondemo.ts","webpack:///./src/app/showcase/components/treetable/treetablesortdemo.ts","webpack:///./src/app/showcase/components/treetable/treetablestyledemo.ts","webpack:///./src/app/showcase/components/treetable/treetablesubmenu.ts"],"names":[],"mappings":"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","file":"components-treetable-treetabledemo-module-es2015.js","sourcesContent":["module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Column Group</span></span>\\r\\n        <span>Columns can be grouped using rowspan and colspan properties.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"sales\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th rowspan=\\\"3\\\">Brand</th>\\r\\n                <th colspan=\\\"4\\\">Sale Rate</th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th colspan=\\\"2\\\">Sales</th>\\r\\n                <th colspan=\\\"2\\\">Profits</th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th>Last Year</th>\\r\\n                <th>This Year</th>\\r\\n                <th>Last Year</th>\\r\\n                <th>This Year</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\r\\n                    {{rowData.brand}}\\r\\n                </td>\\r\\n                <td>{{rowData.lastYearSale}}</td>\\r\\n                <td>{{rowData.thisYearSale}}</td>\\r\\n                <td>{{rowData.lastYearProfit}}</td>\\r\\n                <td>{{rowData.thisYearProfit}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"footer\\\">\\r\\n            <tr>\\r\\n                <td colspan=\\\"3\\\">Totals</td>\\r\\n                <td>$3,283,772</td>\\r\\n                <td>$2,126,925</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablecolgroupdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolgroupdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableColGroupDemo implements OnInit &#123;\\r\\n\\r\\n    sales: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.sales = [\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'&#125;,\\r\\n                expanded: true,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' &#125;,\\r\\n                        expanded: true,\\r\\n                        children: [\\r\\n                            &#123;\\r\\n                                data: &#123; brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' &#125;, \\r\\n                            &#125;,\\r\\n                            &#123;\\r\\n                                data: &#123; brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' &#125;, \\r\\n                            &#125;\\r\\n                        ]\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data:  &#123; brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' &#125;, \\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' &#125;, \\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;\\r\\n        ];\\r\\n    &#125;;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablecolgroupdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolgroupdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"sales\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.brand&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.lastYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.thisYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.lastYearProfit&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.thisYearProfit&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\r\\n            &lt;td&gt;$3,283,772&lt;/td&gt;\\r\\n            &lt;td&gt;$2,126,925&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Column Resize</span></span>\\r\\n        <span>Columns can be resized using drag drop by setting the resizableColumns to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and \\r\\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Fit Mode</h3>\\r\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Expand Mode</h3>\\r\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Scrollable</h3>\\r\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" >\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Scrollable with Variable Width</h3>\\r\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablecolresize.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolresize.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableColResizeDemo &#123;\\r\\n\\r\\n    files1: TreeNode[];\\r\\n\\r\\n    files2: TreeNode[];\\r\\n\\r\\n    files3: TreeNode[];\\r\\n\\r\\n    files4: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name', width: '50%' &#125;,\\r\\n            &#123; field: 'size', header: 'Size', width: '30%' &#125;,\\r\\n            &#123; field: 'type', header: 'Type', width: '20%' &#125;,\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablecolresize.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolresize.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Fit Mode&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Expand Mode&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Scrollable&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" &gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Scrollable with Variable Width&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Column Toggle</span></span>\\r\\n        <span>This demo uses a multiselect component to implement toggleable columns.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"selectedColumns\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div style=\\\"text-align:left\\\">\\r\\n                <p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\r\\n                            selectedItemsLabel=\\\"{0} columns selected\\\" [style]=\\\"{minWidth: '200px'}\\\" defaultLabel=\\\"Choose Columns\\\"></p-multiSelect>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablecoltoggle.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecoltoggle.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableColToggleDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    selectedColumns: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n\\r\\n        this.selectedColumns = this.cols;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablecoltoggle.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecoltoggle.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"selectedColumns\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\r\\n            &lt;p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\r\\n                        selectedItemsLabel=\\\"&#123;0&#125; columns selected\\\" [style]=\\\"&#123;minWidth: '200px'&#125;\\\" defaultLabel=\\\"Choose Columns\\\"&gt;&lt;/p-multiSelect&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">ContextMenu</span></span>\\r\\n        <span>TreeTable has exclusive integration with ContextMenu.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttContextMenuRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <p-contextMenu #cm [model]=\\\"items\\\"></p-contextMenu>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablecontextmenudemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecontextmenudemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableContextMenuDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    selectedNode: TreeNode;\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    items: MenuItem[];\\r\\n\\r\\n    constructor(private nodeService: NodeService, private messageService: MessageService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n\\r\\n        this.items = [\\r\\n            &#123; label: 'View', icon: 'pi pi-search', command: (event) => this.viewFile(this.selectedNode) &#125;,\\r\\n            &#123; label: 'Toggle', icon: 'pi pi-sort', command: (event) => this.toggleFile(this.selectedNode) &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    viewFile(node) &#123;\\r\\n        this.messageService.add(&#123; severity: 'info', summary: 'File Selected', detail: node.data.name + ' - ' + node.data.size &#125;);\\r\\n    &#125;\\r\\n\\r\\n    toggleFile(node) &#123;\\r\\n        node.expanded = !node.expanded;\\r\\n        this.files = [...this.files];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablecontextmenudemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecontextmenudemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttContextMenuRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable</span>\\r\\n        <span>TreeTable is used to display hierarchical data in tabular format.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p-treeTable [value]=\\\"files1\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Name</th>\\r\\n                <th>Size</th>\\r\\n                <th>Type</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowNodeIndex=\\\"rowNodeIndex\\\"  let-rowData=\\\"rowData\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\">\\r\\n                <td>\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\r\\n                    {{rowData.name}}\\r\\n                </td>\\r\\n                <td>{{rowData.size}}</td>\\r\\n                <td>{{rowData.type}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Dynamic Columns</h3>\\r\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;TreeTableModule&#125; from 'primeng/treetable';\\r\\nimport &#123;TreeNode&#125; from 'primeng/api';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>TreeTable component requires a collection of TreeNode objects as its value and templates for the presentation. TreeNode API represents a node with various properties, here is the list of properties utilized by the TreeTable.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport interface TreeNode &#123;\\r\\n    data?: any;\\r\\n    children?: TreeNode[];\\r\\n    leaf?: boolean;\\r\\n    expanded?: boolean;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Usually nodes will be loaded from a remote datasoure, an example NodeService that fetches the data from a json file would be;</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Injectable()\\r\\nexport class NodeService &#123;\\r\\n\\r\\n    constructor(private http: Http) &#123;&#125;\\r\\n\\r\\n    getFilesystem() &#123;\\r\\n        return this.http.get('showcase/resources/data/filesystem.json')\\r\\n                    .toPromise()\\r\\n                    .then(res => &lt;TreeNode[]&gt; res.json().data);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>The filesystem.json file consists of sample data. In a real application, this should be a dynamic response generated from the remote call.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-javascript\\\" pCode ngNonBindable>\\r\\n&#123;\\r\\n    \\\"data\\\":\\r\\n    [\\r\\n        &#123;\\r\\n            \\\"data\\\":&#123;\\r\\n                \\\"name\\\":\\\"Documents\\\",\\r\\n                \\\"size\\\":\\\"75kb\\\",\\r\\n                \\\"type\\\":\\\"Folder\\\"\\r\\n            &#125;,\\r\\n            \\\"children\\\":[\\r\\n                &#123;\\r\\n                    \\\"data\\\":&#123;\\r\\n                        \\\"name\\\":\\\"Work\\\",\\r\\n                        \\\"size\\\":\\\"55kb\\\",\\r\\n                        \\\"type\\\":\\\"Folder\\\"\\r\\n                    &#125;,\\r\\n                    \\\"children\\\":[\\r\\n                        &#123;\\r\\n                            \\\"data\\\":&#123;\\r\\n                                \\\"name\\\":\\\"Expenses.doc\\\",\\r\\n                                \\\"size\\\":\\\"30kb\\\",\\r\\n                                \\\"type\\\":\\\"Document\\\"\\r\\n                            &#125;\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            \\\"data\\\":&#123;\\r\\n                                \\\"name\\\":\\\"Resume.doc\\\",\\r\\n                                \\\"size\\\":\\\"25kb\\\",\\r\\n                                \\\"type\\\":\\\"Resume\\\"\\r\\n                            &#125;\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    \\\"data\\\":&#123;\\r\\n                        \\\"name\\\":\\\"Home\\\",\\r\\n                        \\\"size\\\":\\\"20kb\\\",\\r\\n                        \\\"type\\\":\\\"Folder\\\"\\r\\n                    &#125;,\\r\\n                    \\\"children\\\":[\\r\\n                        &#123;\\r\\n                            \\\"data\\\":&#123;\\r\\n                                \\\"name\\\":\\\"Invoices\\\",\\r\\n                                \\\"size\\\":\\\"20kb\\\",\\r\\n                                \\\"type\\\":\\\"Text\\\"\\r\\n                            &#125;\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;,\\r\\n        &#123;\\r\\n            \\\"data\\\":&#123;\\r\\n                \\\"name\\\":\\\"Pictures\\\",\\r\\n                \\\"size\\\":\\\"150kb\\\",\\r\\n                \\\"type\\\":\\\"Folder\\\"\\r\\n            &#125;,\\r\\n            \\\"children\\\":[\\r\\n                &#123;\\r\\n                    \\\"data\\\":&#123;\\r\\n                        \\\"name\\\":\\\"barcelona.jpg\\\",\\r\\n                        \\\"size\\\":\\\"90kb\\\",\\r\\n                        \\\"type\\\":\\\"Picture\\\"\\r\\n                    &#125;\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    \\\"data\\\":&#123;\\r\\n                        \\\"name\\\":\\\"primeui.png\\\",\\r\\n                        \\\"size\\\":\\\"30kb\\\",\\r\\n                        \\\"type\\\":\\\"Picture\\\"\\r\\n                    &#125;\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    \\\"data\\\":&#123;\\r\\n                        \\\"name\\\":\\\"optimus.jpg\\\",\\r\\n                        \\\"size\\\":\\\"30kb\\\",\\r\\n                        \\\"type\\\":\\\"Picture\\\"\\r\\n                    &#125;\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;\\r\\n    ]\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<p>Files get loaded from a service and then bound to the value property whereas <i>header</i> and <i>body</i> templates are used to define the content of these sections.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableDemoComponent implements OnInit &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123;&#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFileSystem().then(files => this.files = files);\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>Body template gets the following parameters;</p>\\r\\n        <ul>\\r\\n            <li><strong>$implicit</strong>: Wrapper object of a node used to serialized a TreeNode.</li>\\r\\n            <li><strong>node</strong>: TreeNode instance.</li>\\r\\n            <li><strong>rowData</strong>: Data of the TreeNode instance.</li>\\r\\n            <li><strong>columns</strong>: Columns of the TreeTable.</li>\\r\\n        </ul>\\r\\n\\r\\n        <p>Toggle icon is configured using the p-treeTableToggler by binding the rowNode instance. Most of the time, toggler icon is added to the first column however there is no restriction on where the toggler should be located inside the row.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Name&lt;/th&gt;\\r\\n            &lt;th&gt;Size&lt;/th&gt;\\r\\n            &lt;th&gt;Type&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <h3>Dynamic Columns</h3>\\r\\n        <p>Instead of configuring columns one by one, a simple ngFor can be used to implement dynamic columns. cols property below is an array of objects that represent a column,\\r\\n            only property that table component uses is field, rest of the properties like header depend on your choice.\\r\\n        </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableDemo implements OnInit &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<p>There are two ways to render dynamic columns, since cols property is in the scope of component you can just simply bind it to ngFor directive to generate the structure.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Other alternative is binding the cols array to the columns property and then defining a template variable to access it within your templates.\\r\\n                There is only 1 case where this is required which is reorderable columns.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Tip: Use ngSwitch to customize the column content per dynamic column.</p>\\r\\n\\r\\n            <h3>Table Layout</h3>\\r\\n            <p>For performance reasons, default table-layout is fixed meaning the cell widths do not depend on their content. If you require cells to scale based on their contents\\r\\n                set <i>autoLayout</i> property to true. Note that for scrollable tables or tables with resizable columns auto layout is not supported.\\r\\n            </p>\\r\\n\\r\\n            <h3>Templates</h3>\\r\\n            <p>TreeTable is a template driven component with named templates such as header and body that we've used so far. Templates grant a great level of customization and flexibility\\r\\n                where you have total control over the presentation while table handles the features such as paging, sorting and more. This speeds up development without sacrifing\\r\\n                flexibility. Here is the full list of available templates.</p>\\r\\n\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>caption</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Caption content of the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>header</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the thead element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>body</td>\\r\\n                            <td>$implicit: Wrapper object of a node used to serialized a TreeNode<br>\\r\\n                                node: TreeNode instance. <br>\\r\\n                                rowData: Data of the TreeNode instance <br>\\r\\n                                columns: Columns of the TreeTable\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>footer</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the tfoot element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>summary</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Summary section to display below the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>colgroup</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>ColGroup element of the table to customize columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenheader</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the thead element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenbody</td>\\r\\n                            <td>$implicit: Wrapper object of a node used to serialized a TreeNode<br>\\r\\n                                node: TreeNode instance. <br>\\r\\n                                rowData: Data of the TreeNode instance <br>\\r\\n                                columns: Columns of the TreeTable\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenfooter</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the tfoot element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozencolgroup</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>ColGroup element of the table to customize frozen columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>emptymessage</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content to display when there is no value to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorleft</td>\\r\\n                            <td>state: $implicit\\r\\n                                state.page: Current page<br />\\r\\n                                state.rows: Rows per page<br />\\r\\n                                state.first: Index of the first records<br />\\r\\n                                state.totalRecords: Number of total records<br />\\r\\n                            </td>\\r\\n                            <td>Content to display when there is no value to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorright</td>\\r\\n                            <td>state: $implicit\\r\\n                                state.page: Current page<br />\\r\\n                                state.rows: Rows per page<br />\\r\\n                                state.first: Index of the first records<br />\\r\\n                                state.totalRecords: Number of total records<br />\\r\\n                            </td>\\r\\n                            <td>Content to display when there is no value to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loadingbody</td>\\r\\n                            <td>columns: Columns collection <br>\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element to show when data is being loaded in virtual scroll mode.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Change Detection</h3>\\r\\n            <p>TreeTable may need to be aware of changes in its value in some cases. For the sake of performance, this is only done when the reference of the value changes meaning a\\r\\n                setter is used instead of ngDoCheck/IterableDiffers which can reduce performance. So when you manipulate the value such as removing a node, adding a node or changing children of a node, instead of using array methods such as push, splice\\r\\n                create a new array reference using a spread operator or similar.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nthis.value = [...this.value];\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Keyboard Navigation</h3>\\r\\n            <p>Nodes can be navigated and toggles using arrow keys if the optional ttRow directive is applied to the body row element.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n    &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\r\\n        &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n            &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n        &lt;/td&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Sections</h3>\\r\\n            <p>Table offers various templates to display additional information about the data such as a caption, header, summary and footer.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        FileSystem\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;files?.length&#125;&#125; Root Folders\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>See the <a [routerLink]=\\\"['/treetable/sections']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Grouping</h3>\\r\\n            <p>Columns can easily be grouped using templating. Let's start with sample data of sales of brands per year.</p>\\r\\n\\r\\n<div style=\\\"height:400px;overflow: auto\\\">\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableColGroupDemo implements OnInit &#123;\\r\\n\\r\\n    sales: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.sales = [\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'&#125;,\\r\\n                expanded: true,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' &#125;,\\r\\n                        expanded: true,\\r\\n                        children: [\\r\\n                            &#123;\\r\\n                                data: &#123; brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' &#125;,\\r\\n                            &#125;,\\r\\n                            &#123;\\r\\n                                data: &#123; brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' &#125;,\\r\\n                            &#125;\\r\\n                        ]\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data: &#123; brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;,\\r\\n            &#123;\\r\\n                data:  &#123; brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' &#125;,\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        data: &#123; brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' &#125;,\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n</div>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"sales\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.brand&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.lastYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.thisYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.lastYearProfit&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.thisYearProfit&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\r\\n            &lt;td&gt;$3,283,772&lt;/td&gt;\\r\\n            &lt;td&gt;$2,126,925&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/colgroup']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Paginator</h3>\\r\\n            <p>Pagination is enabled by setting paginator property to true, rows property defines the number of rows per page and pageLinks specify the the number\\r\\n                of page links to display. See <a [routerLink]=\\\"['/paginator']\\\">paginator</a> component for more information.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Paginator accepts custom content for the left and the right side via named templates.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"paginatorleft\\\" let-state&gt;\\r\\n        &#123;&#123;state.first&#125;&#125;\\r\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"fa-refresh\\\"&gt;&lt;/button&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"paginatorright\\\"&gt;\\r\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"fa-cloud-upload\\\"&gt;&lt;/button&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Paginator templates gets the paginator state as an implicit variable that provides the following properties</p>\\r\\n            <ul>\\r\\n                <li>first</li>\\r\\n                <li>rows</li>\\r\\n                <li>page</li>\\r\\n                <li>totalRecords</li>\\r\\n            </ul>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/page']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Sorting</h3>\\r\\n            <p>A column can be made sortable by adding the <strong>ttSortableColumn</strong> directive whose value is the field to sort against and a sort indicator via <strong>p-treeTableSortIcon</strong> component. For dynamic columns,\\r\\n                setting <strong>ttSortableColumnDisabled</strong> property as true disables sorting for that particular column.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>Default sorting is executed on a single column, in order to enable multiple field sorting, set <strong>sortMode</strong> property to \\\"multiple\\\" and use metakey\\r\\n            when clicking on another column.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"cars\\\" sortMode=\\\"multiple\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>In case you'd like to display the table as sorted by default initially on load, use the <strong>sortField</strong>-<strong>sortOrder</strong> properties in single mode.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" sortField=\\\"year\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>In multiple mode, use the <strong>multiSortMeta</strong> property and bind an array of SortMeta objects.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\" [multiSortMeta]=\\\"multiSortMeta\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nthis.multiSortMeta = [];\\r\\nthis.multiSortMeta.push(&#123;field: 'year', order: 1&#125;);\\r\\nthis.multiSortMeta.push(&#123;field: 'brand', order: -1&#125;);\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Instead of using the built-in sorting algorithm a custom sort can be attached by enabling <strong>customSort</strong> property and defining a <strong>sortFunction</strong> implementation. This function gets a SortEvent instance\\r\\n                that provides the data to sort, sortField, sortOrder and multiSortMeta.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSortDemo implements OnInit &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    customSort(event: SortEvent) &#123;\\r\\n        //event.data = Data to sort\\r\\n        //event.mode = 'single' or 'multiple' sort mode\\r\\n        //event.field = Sort field in single sort\\r\\n        //event.order = Sort order in single sort\\r\\n        //event.multiSortMeta = SortMeta array in multiple sort\\r\\n\\r\\n        event.data.sort((data1, data2) => &#123;\\r\\n            let value1 = data1[event.field];\\r\\n            let value2 = data2[event.field];\\r\\n            let result = null;\\r\\n\\r\\n            if (value1 == null && value2 != null)\\r\\n                result = -1;\\r\\n            else if (value1 != null && value2 == null)\\r\\n                result = 1;\\r\\n            else if (value1 == null && value2 == null)\\r\\n                result = 0;\\r\\n            else if (typeof value1 === 'string' && typeof value2 === 'string')\\r\\n                result = value1.localeCompare(value2);\\r\\n            else\\r\\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\\r\\n\\r\\n            return (event.order * result);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" (sortFunction)=\\\"customSort($event)\\\" [customSort]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>For screen reader support of sortable headers, use ariaLabelDesc and ariaLabelAsc properties\\r\\n                on p-sortIcon directive.</p>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/sort']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Filtering</h3>\\r\\n            <p>Filtering is enabled by defining the filter elements and calling filter method on the local template variable of the table with value, column field and match mode parameters. Available match modes are\\r\\n            \\\"startsWith\\\", \\\"contains\\\", \\\"endsWith\\\", \\\"equals\\\", \\\"notEquals\\\", \\\"in\\\", \\\"lt\\\", \\\"lte\\\", \\\"gt\\\" and \\\"gte\\\".</p>\\r\\n\\r\\n            <p>An optional global filter feature is available to search all fields with the same query, to enable this place an input component and call the filterGlobal function with value and match mode properties on your event of choice.</p>\\r\\n\\r\\n            <p>In addition <b>filterMode</b> specifies the filtering strategy. In <b>lenient</b> mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, \\r\\n                in <b>strict</b> mode when the query matches a node, filtering continues on all descendants.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: right\\\"&gt;\\r\\n            &lt;i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\r\\n            &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetablefilterdemo.html'\\r\\n&#125;)\\r\\nexport class TreeTableFilterDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>If you have static columns and need to use global filtering, globalFilterFields property must be defined to configure which fields should be used in global filtering. Another\\r\\n                use case of this property is to change the fields to utilize in global filtering with dynamic columns.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    //content\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/filter']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Selection</h3>\\r\\n            <p>TreeTable provides built-in single, multiple and checkbox selection features where selected rows are bound to the selection property and onRowSelect-onRowUnselect events\\r\\n            are provided as optional callbacks. In order to enable this feature, define a <strong>selectionMode</strong>, bind a selection reference and add <strong>ttSelectableRow</strong> directive\\r\\n            whose value is the rowNode to the rows that can be selected. Additionally if you prefer double click use <strong>ttSelectableRowDblClick</strong> directive instead and\\r\\n            to disable selection events on a particular row use <strong>ttSelectableRowDisabled</strong> property.</p>\\r\\n\\r\\n            <p>By default each row click adds or removes the row from the selection, if you prefer a classic\\r\\n            metaKey based selection approach enable <strong>metaKeySelection</strong> true so that multiple selection or unselection of a row requires metaKey to be pressed. Note that, on touch enabled\\r\\n            devices, metaKey based selection is turned off automatically as there is no metaKey in devices such as mobile phones.</p>\\r\\n\\r\\n            <p>Alternative to the row click, checkbox elements can be used to implement row selection as well.</p>\\r\\n\\r\\n            <p>When resolving if a row is selected, by default TreeTable compares selection array with the datasource which may cause a performance issue with huge datasets that do not use pagination.\\r\\n                If available the fastest way is to use dataKey property that identifies a unique row so that Table can avoid comparing arrays as internally a map instance is used instead of looping arrays, on the other hand\\r\\n                if dataKey cannot be provided consider using compareSelectionBy property as \\\"equals\\\" which uses reference comparison instead of the default \\\"deepEquals\\\" comparison. Latter is slower since it checks all properties.\\r\\n            </p>\\r\\n\\r\\n            <p>In single mode, selection binding is an object reference.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSelectionDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    selectedNode: TreeNode;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" dataKey=\\\"name\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>In multiple mode, selection binding should be an array.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSelectionDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    selectedNodes: TreeNode[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes\\\" dataKey=\\\"name\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n                <p>Checkbox selection utilizes p-treeTableCheckbox component whose value should be the rowNode. Optionally p-treeTableHeaderCheckbox is available to select or unselect all the nodes.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\r\\n            &lt;p-treeTableHeaderCheckbox&gt;&lt;/p-treeTableHeaderCheckbox&gt;\\r\\n            &lt;span style=\\\"margin-left: .25em; vertical-align: middle\\\"&gt;Toggle All&lt;/span&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &lt;p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableCheckbox&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/selection']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>ContextMenu</h3>\\r\\n            <p>TreeTable has exclusive integration with contextmenu component. In order to attach a menu to a treetable, add ttContextMenuRow directive to the rows that can be selected with context menu, define a local template\\r\\n            variable for the menu and bind it to the contextMenu property of the treetable. This enables displaying the menu whenever a row is right clicked. A separate <strong>contextMenuSelection</strong>\\r\\n            property is used to get a hold of the right clicked row. For dynamic columns, setting <strong>ttContextMenuRowDisabled</strong> property as true disables context menu for that particular row.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttContextMenuRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/contextmenu']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Editing</h3>\\r\\n            <p>Incell editing is enabled by adding <strong>ttEditableColumn</strong> directive to an editable cell that has a p:treeTableCellEditor helper\\r\\n                component to define the input-output templates for the edit and view modes respectively.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                {{col.header}}\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &lt;p-treeTableCellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-treeTableCellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>If you require the edited row data and the field at onEditComplete event, bind the data to the ttEditableColumn directive and the field to the ttEditableColumnField directive</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;td [ttEditableColumn]=\\\"rowData\\\" [ttEditableColumnField]=\\\"'year'\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/editable']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Resize</h3>\\r\\n            <p>Columns can be resized using drag drop by setting the <strong>resizableColumns</strong> to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and\\r\\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width. <strong>onColumnResize</strong>\\r\\n            is a callback that passes the resized column header as a parameter. For dynamic columns, setting <strong>ttResizableColumnDisabled</strong> property as true disables resizing for that particular column.\\r\\n            When you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p><b>Note:</b> Scrollable tables require a column group to support resizing.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" &gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/colresize']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Reordering</h3>\\r\\n            <p>Columns can be reordered using drag drop by setting the <strong>reorderableColumns</strong> to true and adding <strong>ttReorderableColumn</strong> directive to the columns that can be dragged. Note that\\r\\n                columns should be dynamic for reordering to work. For dynamic columns, setting <strong>ttReorderableColumnDisabled</strong> property as true disables reordering for that particular column.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/colreorder']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Scrolling</h3>\\r\\n            <p>TreeTable supports both horizontal and vertical scrolling as well as frozen columns. Additionally, virtualScroll mode enables dealing with large datasets by loading data on demand during scrolling.</p>\\r\\n\\r\\n            <p>Sample below uses vertical scrolling where headers are fixed and data is scrollable.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>In horizontal scrolling on the other hand, it is important to give fixed widths to columns. In general when customizing the column widths of scrollable tables,\\r\\n                use colgroup as below to avoid misalignment issues as it will apply both the header, body and footer sections which are different separate elements internally.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>Horizontal and Vertical scrolling can be combined as well on the same table.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>Particular columns can be made fixed where others remain scrollable, there are to ways to implement this functionality, either\\r\\n            define a frozenColumns property if your frozen columns are dynamic or use frozenbody template. The width of the frozen section also\\r\\n            must be defined with frozenWidth property. Templates including header, body and footer apply to the frozen section as well, however\\r\\n            if require different content for the frozen section use frozenheader, frozenbody and frozenfooter instead.\\r\\n        </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>When frozen columns are enabled, frozen and scrollable cells may have content with varying height which leads to misalignment. To avoid a performance hit, TreeTable avoids expensive calculations\\r\\n                to align the row heights as it can be easily done with CSS manually.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-css\\\" pCode ngNonBindable>\\r\\n.ui-treetable .ui-treetable-frozen-view .ui-treetable-tbody > tr > td,\\r\\n.ui-treetable .ui-treetable-unfrozen-view .ui-treetable-tbody > tr > td &#123;\\r\\n    height: 24px !important;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Virtual Scrolling is used with lazy loading to fetch data on demand during scrolling. For smooth scrolling twice the amount of rows property is loaded\\r\\n                on a lazy load event. In addition, to avoid performance problems row height is not calculated automatically and should be provided using virtualRowHeight\\r\\n                property which defaults to 28px, in your row template also assign the height of the row with the same value for smooth scrolling.\\r\\n                Note that variable row height is not supported due to the nature of the virtual scrolling behavior.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\"\\r\\n    [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadNodes($event)\\\" \\r\\n    [totalRecords]=\\\"totalRecords\\\" [loading]=\\\"loading\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Instead of using the built-in loading mask indicator, an special \\\"loadingbody\\\" template is available to provide feedback to the users\\r\\n                about the loading status of a scroll event.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\"\\r\\n    [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadNodes($event)\\\" \\r\\n    [totalRecords]=\\\"totalRecords\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\" [loading]=\\\"true\\\" [showLoader]=\\\"showLoader\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns;\\\"&gt;\\r\\n                &lt;div class=\\\"loading-text\\\"&gt;&lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/scroll']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Lazy Loading</h3>\\r\\n            <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\r\\n            onLazyLoad callback everytime paging and sorting. To implement lazy loading,\\r\\n            enable <strong>lazy</strong> attribute and provide a method callback using <strong>onLazyLoad</strong> that actually loads the data from a remote datasource. onLazyLoad gets an event object\\r\\n            that contains information about how the data should be loaded. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator\\r\\n            displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist.</p>\\r\\n\\r\\n            <pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\"\\r\\n    (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"totalRecords\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nloadNodes(event: LazyLoadEvent) &#123;\\r\\n    //event.first = First row offset\\r\\n    //event.rows = Number of rows per page\\r\\n    //event.sortField = Field name to sort in single sort mode\\r\\n    //event.sortOrder = Sort order as number, 1 for asc and -1 for dec in single sort mode\\r\\n    //event.multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.\\r\\n    //event.filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\r\\n    //event.globalFilter: Value of the global filter if available\\r\\n\\r\\n    this.files = //do a request to a remote datasource using a service and return the cars that match the lazy load criteria\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Lazy loading applies to the first level nodes in the tree hierarchy, instead if you need to lazy load the children of a node, set <strong>leaf</strong> as true on that node\\r\\n                and use onNodeExpand event to load children when a node is expanded only.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nonNodeExpand(event) &#125;\\r\\n    //const node = event.node;\\r\\n    //populate node.children\\r\\n\\r\\n    //refresh the data\\r\\n    this.files = [...this.files];\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/lazy']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Responsive</h3>\\r\\n            <p>TreeTable does not provide a built-in responsive feature as it is easy to implement as you have full control over the presentation, here is an\\r\\n                example with media queries.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetableresponsivedemo.html',\\r\\n    styles: [`\\r\\n        :host ::ng-deep .priority-2,\\r\\n        :host ::ng-deep .priority-3,\\r\\n        :host ::ng-deep .visibility-sm &#123;\\r\\n            display: none;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (max-width: 39.938em) &#123;\\r\\n            :host ::ng-deep .visibility-sm &#123;\\r\\n                display: inline;\\r\\n            &#125;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (min-width: 40em) &#123;\\r\\n            :host ::ng-deep .priority-2 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (min-width: 64em) &#123;\\r\\n            :host ::ng-deep .priority-3 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n    `]\\r\\n&#125;)\\r\\nexport class TreeTableResponsiveDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Name&lt;/th&gt;\\r\\n            &lt;th class=\\\"priority-2\\\"&gt;Size&lt;/th&gt;\\r\\n            &lt;th class=\\\"priority-3\\\"&gt;Type&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n                &lt;span class=\\\"visibility-sm\\\"&gt;\\r\\n                    / &#123;&#123;rowData.size&#125;&#125; - &#123;&#123;rowData.type&#125;&#125;\\r\\n                &lt;/span&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td class=\\\"priority-2\\\"&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td class=\\\"priority-3\\\"&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/responsive']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>EmptyMessage</h3>\\r\\n            <p>When there is no data, emptymessage template can be used to display a message.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Name&lt;/th&gt;\\r\\n            &lt;th&gt;Size&lt;/th&gt;\\r\\n            &lt;th&gt;Type&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"emptymessage\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td [attr.colspan]=\\\"columns.length\\\"&gt;\\r\\n                No records found\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Loading Status</h3>\\r\\n            <p>TreeTable has a <strong>loading</strong> property, when enabled a spinner icon is displayed to indicate data load.\\r\\n                An optional <strong>loadingIcon</strong> property can be passed in case you'd like a different loading icon.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [loading]=\\\"loading\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableDemo implements OnInit &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.loading = true;\\r\\n        this.nodeService.getFilesystem().then(files => &#123;\\r\\n            this.files = files;\\r\\n            this.loading = false;\\r\\n        &#123;);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Styling Certain Rows and Columns</h3>\\r\\n            <p>Certain rows and cells can easily be styled using templating features. In example below, the row whose vin property is '123' will get the 'success' style class. Example here\\r\\n                paint the background of the last cell using a colgroup and highlights rows whose year is older than 2000.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ngClass]=\\\"&#123;'kb-row': rowData.size.endsWith('kb')&#125;\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"&#123;'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')&#125;\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/treetable/style']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Performance Tips</h3>\\r\\n            <ul>\\r\\n                <li>When selection is enabled use dataKey to avoid deep checking when comparing objects.</li>\\r\\n                <li>Use rowTrackBy to avoid unnecessary dom operations.</li>\\r\\n                <li>Prefer lazy loading techniques for large datasets.</li>\\r\\n            </ul>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>value</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>columns</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to represent dynamic columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autoLayout</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether the cell widths scale according to their content or not.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>lazy</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Defines if data is loaded and interacted with in lazy manner.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginator</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When specified as true, enables the pagination.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rows</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of rows to display per page.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>first</td>\\r\\n                            <td>number</td>\\r\\n                            <td>0</td>\\r\\n                            <td>Index of the first row to be displayed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>totalRecords</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of total records, defaults to length of value when not defined.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>pageLinks</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of page links to display in paginator.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowsPerPageOptions</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Array of integer/object values to display inside rows per page dropdown of paginator</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>alwaysShowPaginator</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to show it even there is only one page.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorPosition</td>\\r\\n                            <td>string</td>\\r\\n                            <td>bottom</td>\\r\\n                            <td>Position of the paginator, options are \\\"top\\\",\\\"bottom\\\" or \\\"both\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorDropdownAppendTo</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Target element to attach the paginator dropdown overlay, valid values are \\\"body\\\" or a local ng-template variable of another element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>defaultSortOrder</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Sort order to use when an unsorted column gets sorted by user interaction.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>single</td>\\r\\n                            <td>Defines whether sorting works on single column or on multiple columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>resetPageOnSort</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>When true, resets paginator to first page after sorting.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>customSort</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to use the default sorting or a custom one using sortFunction.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortField</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Name of the field to sort data by default.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortOrder</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Order to sort when default sorting is enabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>multiSortMeta</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of SortMeta objects to sort the data by default in multiple sort mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortFunction</td>\\r\\n                            <td>function</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An event emitter to invoke on custom sorting, refer to sorting section for details.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>filters</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of FilterMetadata objects to provide external filters.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>filterDelay</td>\\r\\n                            <td>number</td>\\r\\n                            <td>300</td>\\r\\n                            <td>Delay in milliseconds before filtering the data.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>globalFilterFields</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of fields as string to use in global filtering.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>filterMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>lenient</td>\\r\\n                            <td>Mode for filtering valid values are \\\"lenient\\\" and \\\"strict\\\". Default is lenient.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selectionMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Specifies the selection mode, valid values are \\\"single\\\" and \\\"multiple\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selection</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Selected row in single mode or an array of values in multiple mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>contextMenuSelection</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Selected row with a context menu.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>dataKey</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A property to uniquely identify a record in data.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>metaKeySelection</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>compareSelectionBy</td>\\r\\n                            <td>string</td>\\r\\n                            <td>deepEquals</td>\\r\\n                            <td>Algorithm to define if a row is selected, valid values are \\\"equals\\\" that compares by reference and \\\"deepEquals\\\" that compares all fields.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowHover</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Adds hover effect to rows without the need for selectionMode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loading</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Displays a loader to indicate data load is in progress.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loadingIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>fa-circle-o-notch</td>\\r\\n                            <td>The icon to show while indicating data load is in progress.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>showLoader</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to show the loading mask when loading property is true.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollable</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When specifies, enables horizontal and/or vertical scrolling.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollHeight</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Height of the scroll viewport in fixed pixels, percentage or a calc expression.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualScroll</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether the data should be loaded on demand during scroll.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualScrollDelay</td>\\r\\n                            <td>number</td>\\r\\n                            <td>150</td>\\r\\n                            <td>Delay in virtual scroll before doing a call to lazy load.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualRowHeight</td>\\r\\n                            <td>number</td>\\r\\n                            <td>28</td>\\r\\n                            <td>Height of a row to use in calculations of virtual scrolling.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenWidth</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Width of the frozen columns container.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenColumns</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to represent dynamic columns that are frozen.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>resizableColumns</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, columns can be resized using drag and drop.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>columnResizeMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>fit</td>\\r\\n                            <td>Defines whether the overall table width should change on column resize, valid values are \\\"fit\\\" and \\\"expand\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>reorderableColumns</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, columns can be reordered using drag and drop.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>contextMenu</td>\\r\\n                            <td>ContextMenu</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Local ng-template varilable of a ContextMenu.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowTrackBy</td>\\r\\n                            <td>Function</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Parameters</th>\\r\\n                        <th>Description</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onNodeExpand</td>\\r\\n                            <td>event.originalEvent: Browser event<br>\\r\\n                                node: Expanded node.</td>\\r\\n                            <td>Callback to invoke when a node is expanded.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onNodeCollapse</td>\\r\\n                            <td>event.originalEvent: Browser event<br>\\r\\n                                node: Collapsed node.</td>\\r\\n                            <td>Callback to invoke when a node is collapsed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onPage</td>\\r\\n                            <td>event.first: Index of first record in page<br>\\r\\n                                event.rows: Number of rows on the page</td>\\r\\n                            <td>Callback to invoke when pagination occurs.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onSort</td>\\r\\n                            <td>event.field: Field name of the sorted column<br>\\r\\n                                event.order: Sort order as 1 or -1<br>\\r\\n                                event.multisortmeta: Sort metadata in multi sort mode. See multiple sorting section for the structure of this object.</td>\\r\\n                            <td>Callback to invoke when a column gets sorted.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onFilter</td>\\r\\n                            <td>event.filters: Filters object having a field as the property key and an object with value, matchMode as the property value.<br>\\r\\n                                event.filteredValue: Filtered data after running the filtering.</td>\\r\\n                            <td>Callback to invoke when data is filtered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onLazyLoad</td>\\r\\n                            <td>event.first = First row offset <br>\\r\\n                                event.rows = Number of rows per page <br>\\r\\n                                event.sortField = Field name to sort with <br>\\r\\n                                event.sortOrder = Sort order as number, 1 for asc and -1 for dec <br>\\r\\n                                event.multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.</td>\\r\\n                                event.filters: FilterMetadata object having field as key and filter value, filter matchMode as value<br>\\r\\n                                event.globalFilter: Value of the global filter if available\\r\\n                            <td>Callback to invoke when paging, sorting or filtering happens in lazy mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onColResize</td>\\r\\n                            <td>event.element: Resized column header <br>\\r\\n                                event.delta: Change of width in number of pixels</td>\\r\\n                            <td>Callback to invoke when a column is resized.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onColReorder</td>\\r\\n                            <td>event.dragIndex: Index of the dragged column <br>\\r\\n                                event.dropIndex: Index of the dropped column <br>\\r\\n                                event.columns: Columns array after reorder.</td>\\r\\n                            <td>Callback to invoke when a column is reordered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onNodeSelect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.nıde: Selected node\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a node is selected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onNodeUnselect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.data: Unselected node</td>\\r\\n                            <td>Callback to invoke when a node is unselected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onContextMenuSelect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.node: Selected node</td>\\r\\n                            <td>Callback to invoke when a node is selected with right click.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onHeaderCheckboxToggle</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.checked: State of the header checkbox</td>\\r\\n                            <td>Callback to invoke when state of header checkbox changes.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditInit</td>\\r\\n                            <td>event.column: Column object of the cell<br>\\r\\n                                event.data: Node data</td>\\r\\n                            <td>Callback to invoke when a cell switches to edit mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditComplete</td>\\r\\n                            <td>event.column: Column object of the cell<br>\\r\\n                                event.data: Node data</td>\\r\\n                            <td>Callback to invoke when cell edit is completed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditCancel</td>\\r\\n                            <td>event.column: Column object of the cell<br>\\r\\n                                event.data: Node data</td>\\r\\n                            <td>Callback to invoke when cell edit is cancelled with escape key.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Methods</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>reset</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Clears the sort and paginator state.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Element</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable</td>\\r\\n                            <td>Container element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-caption</td>\\r\\n                            <td>Caption element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-summary</td>\\r\\n                            <td>Section section.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-sortable-column</td>\\r\\n                            <td>Sortable column header.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-scrollable-header</td>\\r\\n                            <td>Container of header in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-scrollable-body</td>\\r\\n                            <td>Container of body in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-scrollable-footer</td>\\r\\n                            <td>Container of footer in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-loading</td>\\r\\n                            <td>Loader mask.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-loading-content</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-wrapper</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-scrollable-wrapper</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-resizer-helper</td>\\r\\n                            <td>Vertical resize indicator bar.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-reorder-indicator-top</td>\\r\\n                            <td>Top indicator of column reordering.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-treetable-reorder-indicator-top</td>\\r\\n                            <td>Bottom indicator of column reordering.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files1\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Name&lt;/th&gt;\\r\\n            &lt;th&gt;Size&lt;/th&gt;\\r\\n            &lt;th&gt;Type&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Dynamic Columns&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableDemo implements OnInit &#123;\\r\\n\\r\\n    files1: TreeNode[];\\r\\n\\r\\n    files2: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Edit</span></span>\\r\\n        <span>Incell editing provides a quick and user friendly way to manipulate data.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn [ngClass]=\\\"{'ui-toggler-column': i === 0}\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i === 0\\\"></p-treeTableToggler>\\r\\n                    <p-treeTableCellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\" [ngStyle]=\\\"{'width': i == 0 ? '90%': '100%'}\\\">\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">{{rowData[col.field]}}</ng-template>\\r\\n                    </p-treeTableCellEditor>\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetableeditdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableeditdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetableeditdemo.html',\\r\\n    styles: [`\\r\\n        :host ::ng-deep .ui-editing-cell &#123;\\r\\n            padding: 0 !important;\\r\\n            &#125;\\r\\n\\r\\n        :host ::ng-deep .ui-toggler-column.ui-editing-cell &#123;\\r\\n            padding-left: 0.857em !important;\\r\\n            &#125;\\r\\n    `]\\r\\n&#125;)\\r\\nexport class TreeTableEditDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetableeditdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableeditdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn [ngClass]=\\\"&#123;'ui-toggler-column': i === 0&#125;\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i === 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &lt;p-treeTableCellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\" [ngStyle]=\\\"&#123;'width': i == 0 ? '90%': '100%'&#125;\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;&#123;&#123;rowData[col.field]&#125;&#125;&lt;/ng-template&gt;\\r\\n                &lt;/p-treeTableCellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Filter</span></span>\\r\\n        <span>Filtering reduces the data by running a search using column filters and an optional global filter.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div style=\\\"text-align: right\\\">        \\r\\n                <i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"></i>\\r\\n                <input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\">\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of cols\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of cols\\\">\\r\\n                    <input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\">\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of cols; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"emptymessage\\\">\\r\\n            <tr>        \\r\\n                <td [attr.colspan]=\\\"cols.length\\\">No data found.</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablefilterdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablefilterdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetablefilterdemo.html'\\r\\n&#125;)\\r\\nexport class TreeTableFilterDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablefilterdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablefilterdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: right\\\"&gt;        \\r\\n            &lt;i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\r\\n            &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"emptymessage\\\"&gt;\\r\\n        &lt;tr&gt;        \\r\\n            &lt;td [attr.colspan]=\\\"cols.length\\\"&gt;No data found.&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Lazy</span></span>\\r\\n        <span>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\r\\n            onLazyLoad callback everytime paging or sorting happens. In addition, children of a node can be loaded on demand at onNodeExpand event as well.\\r\\n            Sample belows imitates lazy paging by using an in memory list.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\" \\r\\n        (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"1000\\\" [loading]=\\\"loading\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablelazydemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablelazydemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableLazyDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    totalRecords: number;\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n\\r\\n        //in a production application, retrieve the logical number of rows from a remote datasource\\r\\n        this.totalRecords = 1000;\\r\\n\\r\\n        this.loading = true;\\r\\n    &#125;\\r\\n\\r\\n    loadNodes(event) &#123;\\r\\n        this.loading = true;\\r\\n\\r\\n        //in a production application, make a remote request to load data using state metadata from event\\r\\n        //event.first = First row offset\\r\\n        //event.rows = Number of rows per page\\r\\n        //event.sortField = Field name to sort with\\r\\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\\r\\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\r\\n\\r\\n        //imitate db connection over a network\\r\\n        setTimeout(() => &#123;\\r\\n            this.loading = false;\\r\\n            this.files = [];\\r\\n\\r\\n            for(let i = 0; i &lt; event.rows; i++) &#123;\\r\\n                let node = &#123;\\r\\n                    data: &#123;  \\r\\n                        name: 'Item ' + (event.first + i),\\r\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                        type: 'Type ' + (event.first + i)\\r\\n                    &#125;,\\r\\n                    leaf: false\\r\\n                &#125;;\\r\\n\\r\\n                this.files.push(node);\\r\\n            &#125;\\r\\n        &#125;, 1000);\\r\\n    &#125;\\r\\n\\r\\n    onNodeExpand(event) &#123;\\r\\n        this.loading = true;\\r\\n\\r\\n        setTimeout(() => &#123;\\r\\n            this.loading = false;\\r\\n            const node = event.node;\\r\\n\\r\\n            node.children = [\\r\\n                &#123;\\r\\n                    data: &#123;  \\r\\n                        name: node.data.name + ' - 0',\\r\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                        type: 'File'\\r\\n                    &#125;,\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    data: &#123;  \\r\\n                        name: node.data.name + ' - 1',\\r\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                        type: 'File'\\r\\n                    &#125;\\r\\n                &#125;\\r\\n            ];\\r\\n\\r\\n            this.files = [...this.files];\\r\\n        &#125;, 250);\\r\\n        \\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablelazydemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablelazydemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\" \\r\\n    (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"1000\\\" [loading]=\\\"loading\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Page</span></span>\\r\\n        <span>Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablepagedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTablePageDemo implements OnInit &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.files = [];\\r\\n        for(let i = 0; i &lt; 50; i++) &#123;\\r\\n            let node = &#123;\\r\\n                data:&#123;  \\r\\n                    name: 'Item ' + i,\\r\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                    type: 'Type ' + i\\r\\n                &#125;,\\r\\n                children: [\\r\\n                    &#123;\\r\\n                        data: &#123;  \\r\\n                            name: 'Item ' + i + ' - 0',\\r\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                            type: 'Type ' + i\\r\\n                        &#125;\\r\\n                    &#125;\\r\\n                ]\\r\\n            &#125;;\\r\\n\\r\\n            this.files.push(node);\\r\\n        &#125;\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablepagedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Reorder</span></span>\\r\\n        <span>Order of the columns can be changed using drag and drop.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" ttReorderableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablecolreorder.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolreorder.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableReorderDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablecolreorder.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treeable/treetablecolreorder.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Responsive</span></span>\\r\\n        <span>This sample demonstrates how to implement a responsive TreeTable using media queries.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Name</th>\\r\\n                <th class=\\\"priority-2\\\">Size</th>\\r\\n                <th class=\\\"priority-3\\\">Type</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\r\\n                    {{rowData.name}}\\r\\n                    <span class=\\\"visibility-sm\\\">\\r\\n                        / {{rowData.size}} - {{rowData.type}}\\r\\n                    </span>\\r\\n                </td>\\r\\n                <td class=\\\"priority-2\\\">{{rowData.size}}</td>\\r\\n                <td class=\\\"priority-3\\\">{{rowData.type}}</td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetableresponsivedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetableresponsivedemo.html',\\r\\n    styles: [`\\r\\n        :host ::ng-deep .priority-2, \\r\\n        :host ::ng-deep .priority-3,\\r\\n        :host ::ng-deep .visibility-sm &#123;\\r\\n            display: none;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (max-width: 39.938em) &#123;\\r\\n            :host ::ng-deep .visibility-sm &#123;\\r\\n                display: inline;\\r\\n            &#125;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (min-width: 40em) &#123;\\r\\n            :host ::ng-deep .priority-2 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (min-width: 64em) &#123;\\r\\n            :host ::ng-deep .priority-3 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n    `]\\r\\n&#125;)\\r\\nexport class TreeTableResponsiveDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetableresponsivedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Name&lt;/th&gt;\\r\\n            &lt;th class=\\\"priority-2\\\"&gt;Size&lt;/th&gt;\\r\\n            &lt;th class=\\\"priority-3\\\"&gt;Type&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n                &lt;span class=\\\"visibility-sm\\\"&gt;\\r\\n                    / &#123;&#123;rowData.size&#125;&#125; - &#123;&#123;rowData.type&#125;&#125;\\r\\n                &lt;/span&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td class=\\\"priority-2\\\"&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td class=\\\"priority-3\\\"&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"ubitem\\\">Scroll</span></span>\\r\\n        <span>Scrolling data is available horizontally, vertically or both with optional support for frozen columns.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Vertical</h3>\\r\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Virtual Scroll - 250K Root Nodes X 2 Child Nodes</h3>\\r\\n    <p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\"\\r\\n        [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadNodes($event)\\\"\\r\\n        [totalRecords]=\\\"totalRecords\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\" [loading]=\\\"true\\\" [showLoader]=\\\"showLoader\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\">\\r\\n            <tr style=\\\"height:34px\\\">\\r\\n                <td *ngFor=\\\"let col of columns;\\\">\\r\\n                    <div class=\\\"loading-text\\\"></div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Horizontal</h3>\\r\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"{width:'600px'}\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Horizontal and Vertical</h3>\\r\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"{width:'600px'}\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Frozen Columns</h3>\\r\\n    <p-treeTable [value]=\\\"files4\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\r\\n                    {{rowData.name}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablescrolldemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablescrolldemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetablescrolldemo.html',\\r\\n    styles: [`\\r\\n        .loading-text &#123;\\r\\n            display: block;\\r\\n            background-color: #f1f1f1;\\r\\n            min-height: 19px;\\r\\n            animation: pulse 1s infinite ease-in-out;\\r\\n            text-indent: -99999px;\\r\\n            overflow: hidden;\\r\\n        &#125;\\r\\n    `]\\r\\n5;)\\r\\nexport class TreeTableScrollDemo &#123;\\r\\n\\r\\n    files1: TreeNode[];\\r\\n\\r\\n    files2: TreeNode[];\\r\\n\\r\\n    files3: TreeNode[];\\r\\n\\r\\n    files4: TreeNode[];\\r\\n\\r\\n    virtualFiles: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    frozenCols: any[];\\r\\n\\r\\n    scrollableCols: any[];\\r\\n\\r\\n    totalRecords: number;\\r\\n\\r\\n    showLoader: boolean;\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n\\r\\n        this.scrollableCols = [\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n\\r\\n        this.frozenCols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;\\r\\n        ];\\r\\n\\r\\n        //in a production application, retrieve the logical number of rows from a remote datasource\\r\\n        this.totalRecords = 250000;\\r\\n\\r\\n        this.showLoader = false;\\r\\n    &#125;\\r\\n\\r\\n    loadNodes(event) &#123;\\r\\n        //in a production application, make a remote request to load data using state metadata from event\\r\\n        //event.first = First row offset\\r\\n        //event.rows = Number of rows per page\\r\\n        //event.sortField = Field name to sort with\\r\\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\\r\\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\r\\n\\r\\n        //imitate db connection over a network\\r\\n        setTimeout(() => &#123;\\r\\n            this.virtualFiles = [];\\r\\n\\r\\n            //last chunk\\r\\n            if (event.first === 249980)\\r\\n                this.createLazyNodes(event.first, 20);\\r\\n            else\\r\\n                this.createLazyNodes(event.first, event.rows);\\r\\n        &#125;, 250);\\r\\n    &#125;\\r\\n\\r\\n    createLazyNodes(index, length) &#123;\\r\\n        for(let i = 0; i < length; i++) &#123;\\r\\n            let node = &#123;\\r\\n                data: &#123;  \\r\\n                    name: 'Item ' + (index + i),\\r\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                    type: 'Type ' + (index + i)\\r\\n                &#125;,\\r\\n                leaf: false\\r\\n            &#125;;\\r\\n\\r\\n            this.virtualFiles.push(node);\\r\\n        &#125;\\r\\n    &#125;\\r\\n\\r\\n    onNodeExpand(event) &#123;\\r\\n        this.showLoader = true;\\r\\n\\r\\n        setTimeout(() => &#123;\\r\\n            this.showLoader = false;\\r\\n            const node = event.node;\\r\\n\\r\\n            node.children = [\\r\\n                &#123;\\r\\n                    data: &#123;  \\r\\n                        name: node.data.name + ' - 0',\\r\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                        type: 'File'\\r\\n                    &#125;,\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    data: &#123;  \\r\\n                        name: node.data.name + ' - 1',\\r\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\r\\n                        type: 'File'\\r\\n                    &#125;\\r\\n                &#125;\\r\\n            ];\\r\\n\\r\\n            this.virtualFiles = [...this.virtualFiles];\\r\\n        &#125;, 250);\\r\\n        \\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablescrolldemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/treetablescrolldemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Vertical&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Virtual Scroll - 250K Root Nodes X 2 Child Nodes&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\"\\r\\n    [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadNodes($event)\\\" \\r\\n    [totalRecords]=\\\"totalRecords\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\" [loading]=\\\"true\\\" [showLoader]=\\\"showLoader\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns;\\\"&gt;\\r\\n                &lt;div class=\\\"loading-text\\\"&gt;&lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Horizontal&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Horizontal and Vertical&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Frozen Columns&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files4\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData.name&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Sections</span></span>\\r\\n        <span>TreeTable provides templates to customize the content of various sections such as caption and summary.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            FileSystem\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"footer\\\" let-columns>\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            There are {{files?.length}} Root Folders\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablesectionsdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesectionsdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSectionsDemo implements OnInit &123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &123; &125;\\r\\n\\r\\n    ngOnInit() &123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &123; field: 'name', header: 'Name' &125;,\\r\\n            &123; field: 'size', header: 'Size' &125;,\\r\\n            &123; field: 'type', header: 'Type' &125;\\r\\n        ];\\r\\n    &125;\\r\\n&125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablesectionsdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesectionsdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        FileSystem\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &123;&123;col.header&125;&125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &123;&123;rowData[col.field]&125;&125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &123;&123;col.header&125;&125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &123;&123;files?.length&125;&125; Root Folders\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Selection</span></span>\\r\\n        <span>TreeTable supports single, multiple and checkbox based selection modes.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <h3 class=\\\"first\\\">Single</h3>\\r\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode1\\\" dataKey=\\\"name\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <div style=\\\"text-align: left\\\">\\r\\n                Selected Node: <span style=\\\"font-weight: normal\\\">{{selectedNode1 ? selectedNode1.data.name + ' - ' + selectedNode1.data.size + ' - ' + selectedNode1.data.type : 'none'}}</span>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Multiple</h3>\\r\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes1\\\" dataKey=\\\"name\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <div style=\\\"text-align: left\\\">\\r\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes1 || selectedNodes1.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\r\\n                <ul *ngIf=\\\"selectedNodes1 && selectedNodes1.length\\\">\\r\\n                    <li *ngFor=\\\"let node of selectedNodes1\\\">\\r\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Multiple with MetaKey</h3>\\r\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes2\\\" dataKey=\\\"name\\\" [metaKeySelection]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <div style=\\\"text-align: left\\\">\\r\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes2 || selectedNodes2.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\r\\n                <ul *ngIf=\\\"selectedNodes2 && selectedNodes2.length\\\">\\r\\n                    <li *ngFor=\\\"let node of selectedNodes2\\\">\\r\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Events</h3>\\r\\n    <p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode2\\\" dataKey=\\\"name\\\"\\r\\n        (onNodeSelect)=\\\"nodeSelect($event)\\\" (onNodeUnselect)=\\\"nodeUnselect($event)\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Checkbox</h3>\\r\\n    <p-treeTable [value]=\\\"files5\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes3\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div style=\\\"text-align:left\\\">\\r\\n                <p-treeTableHeaderCheckbox></p-treeTableHeaderCheckbox>\\r\\n                <span style=\\\"margin-left: .25em; vertical-align: middle\\\">Toggle All</span>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    <p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableCheckbox>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <div style=\\\"text-align: left\\\">\\r\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes3 || selectedNodes3.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\r\\n                <ul *ngIf=\\\"selectedNodes3 && selectedNodes3.length\\\">\\r\\n                    <li *ngFor=\\\"let node of selectedNodes3\\\">\\r\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetableselectiondemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableselectiondemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSelectionDemo &#123;\\r\\n\\r\\n    files1: TreeNode[];\\r\\n\\r\\n    files2: TreeNode[];\\r\\n\\r\\n    files3: TreeNode[];\\r\\n\\r\\n    files4: TreeNode[];\\r\\n\\r\\n    files5: TreeNode[];\\r\\n\\r\\n    selectedNode1: TreeNode;\\r\\n\\r\\n    selectedNode2: TreeNode;\\r\\n\\r\\n    selectedNodes1: TreeNode[];\\r\\n\\r\\n    selectedNodes2: TreeNode[];\\r\\n\\r\\n    selectedNodes3: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService, private messageService: MessageService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\r\\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    nodeSelect(event) &#123;\\r\\n        this.messageService.add(&#123;severity: 'info', summary: 'Node Selected', detail: event.node.data.name&#125;);\\r\\n    &#125;\\r\\n\\r\\n    nodeUnselect(event) &#123;\\r\\n        this.messageService.add(&#123;severity: 'info', summary: 'Node Unselected', detail: event.node.data.name&#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetableselectiondemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableselectiondemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;h3 class=\\\"first\\\"&gt;Single&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode1\\\" dataKey=\\\"name\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Node: &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;selectedNode1 ? selectedNode1.data.name + ' - ' + selectedNode1.data.size + ' - ' + selectedNode1.data.type : 'none'&#125;&#125;&lt;/span&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes1\\\" dataKey=\\\"name\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes1 || selectedNodes1.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\r\\n            &lt;ul *ngIf=\\\"selectedNodes1 && selectedNodes1.length\\\"&gt;\\r\\n                &lt;li *ngFor=\\\"let node of selectedNodes1\\\"&gt;\\r\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\r\\n                &lt;/li&gt;\\r\\n            &lt;/ul&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple with MetaKey&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes2\\\" dataKey=\\\"name\\\" [metaKeySelection]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes2 || selectedNodes2.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\r\\n            &lt;ul *ngIf=\\\"selectedNodes2 && selectedNodes2.length\\\"&gt;\\r\\n                &lt;li *ngFor=\\\"let node of selectedNodes2\\\"&gt;\\r\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\r\\n                &lt;/li&gt;\\r\\n            &lt;/ul&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Events&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode2\\\" dataKey=\\\"name\\\"\\r\\n    (onNodeSelect)=\\\"nodeSelect($event)\\\" (onNodeUnselect)=\\\"nodeUnselect($event)\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Checkbox&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files5\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes3\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\r\\n            &lt;p-treeTableHeaderCheckbox&gt;&lt;/p-treeTableHeaderCheckbox&gt;\\r\\n            &lt;span style=\\\"margin-left: .25em; vertical-align: middle\\\"&gt;Toggle All&lt;/span&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &lt;p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableCheckbox&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes3 || selectedNodes3.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\r\\n            &lt;ul *ngIf=\\\"selectedNodes3 && selectedNodes3.length\\\"&gt;\\r\\n                &lt;li *ngFor=\\\"let node of selectedNodes3\\\"&gt;\\r\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\r\\n                &lt;/li&gt;\\r\\n            &lt;/ul&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Sort</span></span>\\r\\n        <span>TreeTable supports both single column and multiple column sorting.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Single Sort</h3>\\r\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-treeTableSortIcon [field]=\\\"col.field\\\"></p-treeTableSortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n\\r\\n    <h3>Multiple Sort</h3>\\r\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-treeTableSortIcon [field]=\\\"col.field\\\"></p-treeTableSortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablesortdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesortdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TreeTableSortDemo implements OnInit &#123;\\r\\n\\r\\n    files1: TreeNode[];\\r\\n\\r\\n    files2: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\r\\n        this.nodeService.getFilesystem().then(files => &#123;\\r\\n            this.files2 = files;\\r\\n            this.files2.push(&#123;\\r\\n                data: &#123;\\r\\n                    name: 'Documents',\\r\\n                    size: '100kb',\\r\\n                    type: 'Link'\\r\\n                &#125;\\r\\n            &#125;);\\r\\n        &#125;);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablesortdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesortdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Single Sort&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple Sort&lt;/h3&gt;\\r\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<treetable-submenu></treetable-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"subitem\\\">Style</span></span>\\r\\n        <span>Certain rows or cell can easily be styled based on conditions. In this example, nodes\\r\\n            whose size is in kilobytes are highlighted at row and cell level.\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\r\\n            <tr [ngClass]=\\\"{'kb-row': rowData.size.endsWith('kb')}\\\">\\r\\n                <td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"{'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')}\\\">\\r\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>            \\r\\n        </ng-template>\\r\\n    </p-treeTable>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"treetablestyledemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablestyledemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './treetablestyledemo.html',\\r\\n    styles: [`\\r\\n        .kb-row &#123;\\r\\n            background-color: #1CA979 !important;\\r\\n            color: #ffffff !important;\\r\\n        &#125;\\r\\n\\r\\n        .kb-cell &#123;\\r\\n            background-color: #2CA8B1 !important;\\r\\n            color: #ffffff !important;\\r\\n        &#125;\\r\\n    `]\\r\\n&#125;)\\r\\nexport class TreeTableStyleDemo &#123;\\r\\n\\r\\n    files: TreeNode[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private nodeService: NodeService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'name', header: 'Name' &#125;,\\r\\n            &#123; field: 'size', header: 'Size' &#125;,\\r\\n            &#123; field: 'type', header: 'Type' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"treetablestyledemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablestyledemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ngClass]=\\\"&#123;'kb-row': rowData.size.endsWith('kb')&#125;\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"&#123;'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')&#125;\\\"&gt;\\r\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;            \\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-treeTable&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeNode } from '../common/treenode';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { DomHandler } from '../dom/domhandler';\r\nimport { PaginatorModule } from '../paginator/paginator';\r\nimport { PrimeTemplate, SharedModule } from '../common/shared';\r\nimport { SortMeta } from '../common/sortmeta';\r\nimport { BlockableUI } from '../common/blockableui';\r\nimport { FilterMetadata } from '../common/filtermetadata';\r\nimport { ObjectUtils } from '../utils/objectutils';\r\nimport { FilterUtils } from '../utils/filterutils';\r\n\r\n@Injectable()\r\nexport class TreeTableService {\r\n\r\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\r\n    private selectionSource = new Subject();\r\n    private contextMenuSource = new Subject<any>();\r\n    private uiUpdateSource = new Subject<any>();\r\n    private totalRecordsSource = new Subject<any>();\r\n\r\n    sortSource$ = this.sortSource.asObservable();\r\n    selectionSource$ = this.selectionSource.asObservable();\r\n    contextMenuSource$ = this.contextMenuSource.asObservable();\r\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\r\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\r\n\r\n    onSort(sortMeta: SortMeta|SortMeta[]) {\r\n        this.sortSource.next(sortMeta);\r\n    }\r\n\r\n    onSelectionChange() {\r\n        this.selectionSource.next();\r\n    }\r\n\r\n    onContextMenu(node: any) {\r\n        this.contextMenuSource.next(node);\r\n    }\r\n\r\n    onUIUpdate(value: any) {\r\n        this.uiUpdateSource.next(value);\r\n    }\r\n\r\n    onTotalRecordsChange(value: number) {\r\n        this.totalRecordsSource.next(value);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTable',\r\n    template: `\r\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\r\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\r\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit')}\">\r\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\r\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\r\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\r\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"></p-paginator>\r\n            \r\n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\r\n                <table #table class=\"ui-treetable-table\">\r\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"ui-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                    <tfoot class=\"ui-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\r\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\r\n               <div class=\"ui-treetable-scrollable-view\" [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\"></div>\r\n            </div>\r\n\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"></p-paginator>\r\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\r\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n            </div>\r\n\r\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\r\n\r\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\r\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\r\n        </div>\r\n    `,\r\n    providers: [TreeTableService]\r\n})\r\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI {\r\n\r\n    @Input() columns: any[];\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() autoLayout: boolean;\r\n\r\n    @Input() lazy: boolean = false;\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() defaultSortOrder: number = 1;\r\n\r\n    @Input() sortMode: string = 'single';\r\n    \r\n    @Input() resetPageOnSort: boolean = true;\r\n\r\n    @Input() customSort: boolean;\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelection: any;\r\n\r\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelectionMode: string = \"separate\";\r\n\r\n    @Input() dataKey: string;\r\n\r\n    @Input() metaKeySelection: boolean;\r\n\r\n    @Input() compareSelectionBy: string = 'deepEquals';\r\n\r\n    @Input() rowHover: boolean;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() showLoader: boolean = true;\r\n\r\n    @Input() scrollable: boolean;\r\n\r\n    @Input() scrollHeight: string;\r\n\r\n    @Input() virtualScroll: boolean;\r\n\r\n    @Input() virtualScrollDelay: number = 150;\r\n\r\n    @Input() virtualRowHeight: number = 28;\r\n\r\n    @Input() frozenWidth: string;\r\n\r\n    @Input() frozenColumns: any[];\r\n\r\n    @Input() resizableColumns: boolean;\r\n\r\n    @Input() columnResizeMode: string = 'fit';\r\n\r\n    @Input() reorderableColumns: boolean;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\r\n\r\n    @Input() globalFilterFields: string[];\r\n\r\n    @Input() filterDelay: number = 300;\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('container', { static: false }) containerViewChild: ElementRef;\r\n\r\n    @ViewChild('resizeHelper', { static: false }) resizeHelperViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorUp', { static: false }) reorderIndicatorUpViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorDown', { static: false }) reorderIndicatorDownViewChild: ElementRef;\r\n\r\n    @ViewChild('table', { static: false }) tableViewChild: ElementRef;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    _value: TreeNode[] = [];\r\n\r\n    serializedValue: any[];\r\n\r\n    _totalRecords: number = 0;\r\n\r\n    _multiSortMeta: SortMeta[];\r\n\r\n    _sortField: string;\r\n\r\n    _sortOrder: number = 1;\r\n\r\n    virtualScrollTimer: any;\r\n    \r\n    virtualScrollCallback: Function;\r\n\r\n    filteredNodes: any[];\r\n\r\n    filterTimeout: any;\r\n\r\n    colGroupTemplate: TemplateRef<any>;\r\n\r\n    captionTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    loadingBodyTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    summaryTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    frozenHeaderTemplate: TemplateRef<any>;\r\n\r\n    frozenBodyTemplate: TemplateRef<any>;\r\n\r\n    frozenFooterTemplate: TemplateRef<any>;\r\n\r\n    frozenColGroupTemplate: TemplateRef<any>;\r\n\r\n    lastResizerHelperX: number;\r\n\r\n    reorderIconWidth: number;\r\n\r\n    reorderIconHeight: number;\r\n\r\n    draggedColumn: any;\r\n\r\n    dropPosition: number;\r\n\r\n    preventSelectionSetterPropagation: boolean;\r\n\r\n    _selection: any;\r\n\r\n    selectionKeys: any = {};\r\n\r\n    rowTouched: boolean;\r\n\r\n    editingCell: Element;\r\n\r\n    editingCellClick: boolean;\r\n\r\n    documentEditListener: any;\r\n\r\n    initialized: boolean;\r\n\r\n    toggleRowIndex: number;\r\n\r\n    ngOnInit() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'caption':\r\n                    this.captionTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'loadingbody':\r\n                    this.loadingBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n\r\n                case 'summary':\r\n                    this.summaryTemplate = item.template;\r\n                break;\r\n\r\n                case 'colgroup':\r\n                    this.colGroupTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessage':\r\n                    this.emptyMessageTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenheader':\r\n                    this.frozenHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenbody':\r\n                    this.frozenBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenfooter':\r\n                    this.frozenFooterTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozencolgroup':\r\n                    this.frozenColGroupTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\r\n\r\n    @Input() get value(): any[] {\r\n        return this._value;\r\n    }\r\n    set value(val: any[]) {\r\n        this._value = val;\r\n\r\n        if (!this.lazy) {\r\n            this.totalRecords = (this._value ? this._value.length : 0);\r\n\r\n            if (this.sortMode == 'single' && this.sortField)\r\n                this.sortSingle();\r\n            else if (this.sortMode == 'multiple' && this.multiSortMeta)\r\n                this.sortMultiple();\r\n            else if(this.hasFilter())       //sort already filters\r\n                this._filter();\r\n        }\r\n\r\n        if(this.virtualScroll && this.virtualScrollCallback) {\r\n            this.virtualScrollCallback();\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n        this.tableService.onUIUpdate(this.value);\r\n    }\r\n\r\n    updateSerializedValue() {\r\n        this.serializedValue = [];\r\n\r\n        if(this.paginator)\r\n            this.serializePageNodes();\r\n        else\r\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\r\n    }\r\n\r\n    serializeNodes(parent, nodes, level, visible) {\r\n        if(nodes && nodes.length) {\r\n            for(let node of nodes) {\r\n                node.parent = parent;\r\n                const rowNode = {\r\n                    node: node,\r\n                    parent: parent,\r\n                    level: level,\r\n                    visible: visible && (parent ? parent.expanded : true)\r\n                };\r\n                this.serializedValue.push(rowNode);\r\n                \r\n                if (rowNode.visible && node.expanded) {\r\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    serializePageNodes() {\r\n        let data = this.filteredNodes || this.value;\r\n        this.serializedValue = [];\r\n        if(data && data.length) {\r\n            const first = this.lazy ? 0 : this.first;\r\n\r\n            for(let i = first; i < (first + this.rows); i++) {\r\n                let node = data[i];\r\n                if(node) {\r\n                    this.serializedValue.push({\r\n                        node: node,\r\n                        parent: null,\r\n                        level: 0,\r\n                        visible: true\r\n                    });\r\n        \r\n                    this.serializeNodes(node, node.children, 1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n    set totalRecords(val: number) {\r\n        this._totalRecords = val;\r\n        this.tableService.onTotalRecordsChange(this._totalRecords);\r\n    }\r\n\r\n    @Input() get sortField(): string {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(val: string) {\r\n        this._sortField = val;\r\n\r\n        //avoid triggering lazy load prior to lazy initialization at onInit\r\n        if ( !this.lazy || this.initialized ) {\r\n            if (this.sortMode === 'single') {\r\n                this.sortSingle();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Input() get sortOrder(): number {\r\n        return this._sortOrder;\r\n    }\r\n    set sortOrder(val: number) {\r\n        this._sortOrder = val;\r\n\r\n        //avoid triggering lazy load prior to lazy initialization at onInit\r\n        if ( !this.lazy || this.initialized ) {\r\n            if (this.sortMode === 'single') {\r\n                this.sortSingle();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Input() get multiSortMeta(): SortMeta[] {\r\n        return this._multiSortMeta;\r\n    }\r\n\r\n    set multiSortMeta(val: SortMeta[]) {\r\n        this._multiSortMeta = val;\r\n        if (this.sortMode === 'multiple') {\r\n            this.sortMultiple();\r\n        }\r\n    }\r\n\r\n    @Input() get selection(): any {\r\n        return this._selection;\r\n    }\r\n\r\n    set selection(val: any) {\r\n        this._selection = val;\r\n\r\n        if(!this.preventSelectionSetterPropagation) {\r\n            this.updateSelectionKeys();\r\n            this.tableService.onSelectionChange();\r\n        }\r\n        this.preventSelectionSetterPropagation = false;\r\n    }\r\n\r\n    updateSelectionKeys() {\r\n        if(this.dataKey && this._selection) {\r\n            this.selectionKeys = {};\r\n            if(Array.isArray(this._selection)) {\r\n                for(let node of this._selection) {\r\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\r\n                }\r\n            }\r\n            else {\r\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageChange(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy)\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        else\r\n            this.serializePageNodes();\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n        \r\n        this.tableService.onUIUpdate(this.value);\r\n    }\r\n\r\n    sort(event) {\r\n        let originalEvent = event.originalEvent;\r\n\r\n        if(this.sortMode === 'single') {\r\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\r\n            this._sortField = event.field;\r\n            this.sortSingle();\r\n        }\r\n        if (this.sortMode === 'multiple') {\r\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\r\n            let sortMeta = this.getSortMeta(event.field);\r\n\r\n            if (sortMeta) {\r\n                if (!metaKey) {\r\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\r\n                }\r\n                else {\r\n                    sortMeta.order = sortMeta.order * -1;\r\n                }\r\n            }\r\n            else {\r\n                if (!metaKey || !this.multiSortMeta) {\r\n                    this._multiSortMeta = [];\r\n                }\r\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\r\n            }\r\n            \r\n            this.sortMultiple();\r\n        }\r\n    }\r\n\r\n    sortSingle() {\r\n        if(this.sortField && this.sortOrder) {\r\n            if(this.resetPageOnSort) {\r\n                this.first = 0;\r\n            }\r\n\r\n            if(this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n                this.sortNodes(this.value);\r\n\r\n                if(this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n    \r\n            let sortMeta: SortMeta = {\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            };\r\n    \r\n            this.onSort.emit(sortMeta);\r\n            this.tableService.onSort(sortMeta);\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    sortNodes(nodes) {\r\n        if(!nodes || nodes.length === 0) {\r\n            return;\r\n        } \r\n\r\n        if(this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: nodes,\r\n                mode: this.sortMode,\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            });\r\n        }\r\n        else {\r\n            nodes.sort((node1, node2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortNodes(node.children);\r\n        }\r\n    }\r\n\r\n    sortMultiple() {\r\n        if(this.multiSortMeta) {\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n               this.sortMultipleNodes(this.value);\r\n\r\n                if(this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n            \r\n            this.onSort.emit({\r\n                multisortmeta: this.multiSortMeta\r\n            });\r\n            this.tableService.onSort(this.multiSortMeta);\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    sortMultipleNodes(nodes) {\r\n        if(!nodes || nodes.length === 0) {\r\n            return;\r\n        } \r\n        \r\n        if(this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: this.value,\r\n                mode: this.sortMode,\r\n                multiSortMeta: this.multiSortMeta\r\n            });\r\n        }\r\n        else {\r\n            this.value.sort((node1, node2) => {\r\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortMultipleNodes(node.children);\r\n        }\r\n    }\r\n\r\n    multisortField(node1, node2, multiSortMeta, index) {\r\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\r\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\r\n        let result = null;\r\n\r\n        if (value1 == null && value2 != null)\r\n            result = -1;\r\n        else if (value1 != null && value2 == null)\r\n            result = 1;\r\n        else if (value1 == null && value2 == null)\r\n            result = 0;\r\n        if (typeof value1 == 'string' || value1 instanceof String) {\r\n            if (value1.localeCompare && (value1 != value2)) {\r\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\r\n            }\r\n        }\r\n        else {\r\n            result = (value1 < value2) ? -1 : 1;\r\n        }\r\n\r\n        if (value1 == value2) {\r\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\r\n        }\r\n\r\n        return (multiSortMeta[index].order * result);\r\n    }\r\n\r\n    getSortMeta(field: string) {\r\n        if (this.multiSortMeta && this.multiSortMeta.length) {\r\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\r\n                if (this.multiSortMeta[i].field === field) {\r\n                    return this.multiSortMeta[i];\r\n                }\r\n            }\r\n        }\r\n       \r\n        return null;\r\n    }\r\n\r\n    isSorted(field: string) {\r\n        if(this.sortMode === 'single') {\r\n            return (this.sortField && this.sortField === field);\r\n        }\r\n        else if(this.sortMode === 'multiple') {\r\n            let sorted = false;\r\n            if(this.multiSortMeta) {\r\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\r\n                    if(this.multiSortMeta[i].field == field) {\r\n                        sorted = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return sorted;\r\n        }\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            filters: this.filters,\r\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\r\n            multiSortMeta: this.multiSortMeta\r\n        };\r\n    }\r\n\r\n    handleVirtualScroll(event) {\r\n        this.first = (event.page - 1) * this.rows;\r\n        this.virtualScrollCallback = event.callback;\r\n        \r\n        this.zone.run(() => {\r\n            if(this.virtualScrollTimer) {\r\n                clearTimeout(this.virtualScrollTimer);\r\n            }\r\n            \r\n            this.virtualScrollTimer = setTimeout(() => {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }, this.virtualScrollDelay);\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredNodes||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n    \r\n    onColumnResizeBegin(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\r\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    onColumnResizeEnd(event, column) {\r\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        let columnWidth = column.offsetWidth;\r\n        let newColumnWidth = columnWidth + delta;\r\n        let minWidth = column.style.minWidth || 15;\r\n\r\n        if (columnWidth + delta > parseInt(minWidth)) {\r\n            if (this.columnResizeMode === 'fit') {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\r\n                        if (this.scrollable) {\r\n                            let scrollableView = this.findParentScrollableView(column);\r\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\r\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\r\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\r\n                            let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        }\r\n                        else {\r\n                            column.style.width = newColumnWidth + 'px';\r\n                            if (nextColumn) {\r\n                                nextColumn.style.width = nextColumnWidth + 'px';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (this.columnResizeMode === 'expand') {\r\n                if (this.scrollable) {\r\n                    let scrollableView = this.findParentScrollableView(column);\r\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\r\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\r\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\r\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\r\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\r\n                    if(scrollableFooterTable) {\r\n                        scrollableFooterTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\r\n                    }\r\n                    let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\r\n                }\r\n                else {\r\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\r\n                    column.style.width = newColumnWidth + 'px';\r\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\r\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\r\n                }\r\n            }\r\n\r\n            this.onColResize.emit({\r\n                element: column,\r\n                delta: delta\r\n            });\r\n        }\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\r\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\r\n    }\r\n\r\n    findParentScrollableView(column) {\r\n        if (column) {\r\n            let parent = column.parentElement;\r\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\r\n                parent = parent.parentElement;\r\n            }\r\n\r\n            return parent;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\r\n        if(table) {\r\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if(colGroup) {\r\n                let col = colGroup.children[resizeColumnIndex];\r\n                let nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n    \r\n                if (nextCol && nextColumnWidth) {\r\n                    nextCol.style.width = nextColumnWidth + 'px';\r\n                }\r\n            }\r\n            else {\r\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragStart(event, columnElement) {\r\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\r\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\r\n        this.draggedColumn = columnElement;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onColumnDragEnter(event, dropHeader) {\r\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\r\n            event.preventDefault();\r\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\r\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\r\n\r\n            if (this.draggedColumn != dropHeader) {\r\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\r\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\r\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\r\n\r\n                if (event.pageX > columnCenter) {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = 1;\r\n                }\r\n                else {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = -1;\r\n                }\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\r\n            }\r\n            else {\r\n                event.dataTransfer.dropEffect = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragLeave(event) {\r\n        if (this.reorderableColumns && this.draggedColumn) {\r\n            event.preventDefault();\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    onColumnDrop(event, dropColumn) {\r\n        event.preventDefault();\r\n        if (this.draggedColumn) {\r\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\r\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\r\n            let allowDrop = (dragIndex != dropIndex);\r\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\r\n                allowDrop = false;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\r\n                dropIndex = dropIndex + 1;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\r\n                dropIndex = dropIndex - 1;\r\n            }\r\n\r\n            if (allowDrop) {\r\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\r\n\r\n                this.onColReorder.emit({\r\n                    dragIndex: dragIndex,\r\n                    dropIndex: dropIndex,\r\n                    columns: this.columns\r\n                });\r\n            }\r\n\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n            this.draggedColumn.draggable = false;\r\n            this.draggedColumn = null;\r\n            this.dropPosition = null;\r\n        }\r\n    }\r\n\r\n    handleRowClick(event) {\r\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\r\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\r\n            return;\r\n        }\r\n\r\n        if(this.selectionMode) {\r\n            this.preventSelectionSetterPropagation = true;\r\n            let rowNode = event.rowNode;\r\n            let selected = this.isSelected(rowNode.node);\r\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\r\n\r\n            if(metaSelection) {\r\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\r\n\r\n                if(selected && metaKey) {\r\n                    if(this.isSingleSelectionMode()) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(null);\r\n                    }\r\n                    else {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        if(dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\r\n                }\r\n                else {\r\n                    if(this.isSingleSelectionMode()) {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(rowNode.node);\r\n                        if(dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                    else if(this.isMultipleSelectionMode()) {\r\n                        if(metaKey) {\r\n                            this._selection = this.selection||[];\r\n                        }\r\n                        else {\r\n                            this._selection = [];\r\n                            this.selectionKeys = {};\r\n                        }\r\n\r\n                        this._selection = [...this.selection, rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        if(dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\r\n                }\r\n            }\r\n            else {\r\n                if (this.selectionMode === 'single') {\r\n                    if (selected) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                    }\r\n                    else {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.selectionMode === 'multiple') {\r\n                    if (selected) {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.tableService.onSelectionChange();\r\n        }\r\n\r\n        this.rowTouched = false;\r\n    }\r\n\r\n    handleRowTouchEnd(event) {\r\n        this.rowTouched = true;\r\n    }\r\n\r\n    handleRowRightClick(event) {\r\n        if (this.contextMenu) {\r\n            const node = event.rowNode.node;\r\n\r\n            if (this.contextMenuSelectionMode === 'separate') {\r\n                this.contextMenuSelection = node;\r\n                this.contextMenuSelectionChange.emit(node);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.tableService.onContextMenu(node);\r\n            }\r\n            else if (this.contextMenuSelectionMode === 'joint') {\r\n                this.preventSelectionSetterPropagation = true;\r\n                let selected = this.isSelected(node);\r\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this.selection = node;\r\n                        this.selectionChange.emit(node);\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        this.selection = [node];\r\n                        this.selectionChange.emit(this.selection);\r\n                    }\r\n                    \r\n                    if (dataKeyValue) {\r\n                        this.selectionKeys[dataKeyValue] = 1;\r\n                    }\r\n                }\r\n    \r\n                this.contextMenu.show(event.originalEvent);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleNodeWithCheckbox(event) {\r\n        this.selection = this.selection||[];\r\n        this.preventSelectionSetterPropagation = true;\r\n        let node = event.rowNode.node;\r\n        let selected = this.isSelected(node);\r\n\r\n        if(selected) {\r\n            this.propagateSelectionDown(node, false);\r\n            if(event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, false);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n        }\r\n        else {\r\n            this.propagateSelectionDown(node, true);\r\n            if (event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, true);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeSelect.emit({originalEvent: event, node: node});\r\n        }\r\n\r\n        this.tableService.onSelectionChange();\r\n    }\r\n\r\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\r\n        let data = this.filteredNodes || this.value;\r\n        this._selection = check && data ? data.slice() : [];\r\n        if (check) {\r\n            if (data && data.length) {\r\n                for (let node of data) {\r\n                    this.propagateSelectionDown(node, true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._selection = [];\r\n            this.selectionKeys = {};\r\n        }\r\n\r\n        this.preventSelectionSetterPropagation = true;\r\n        this.selectionChange.emit(this._selection);\r\n        this.tableService.onSelectionChange();\r\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\r\n    }\r\n    \r\n    propagateSelectionUp(node: TreeNode, select: boolean) {\r\n        if (node.children && node.children.length) {\r\n            let selectedChildCount: number = 0;\r\n            let childPartialSelected: boolean = false;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n            for (let child of node.children) {\r\n                if (this.isSelected(child))\r\n                selectedChildCount++;\r\n                else if (child.partialSelected)\r\n                    childPartialSelected = true;\r\n            }\r\n            \r\n            if (select && selectedChildCount == node.children.length) {\r\n                this._selection =  [...this.selection||[], node];\r\n                node.partialSelected = false;\r\n                if (dataKeyValue) {\r\n                    this.selectionKeys[dataKeyValue] = 1;\r\n                }\r\n            }\r\n            else {                \r\n                if (!select) {\r\n                    let index = this.findIndexInSelection(node);\r\n                    if (index >= 0) {\r\n                        this._selection =  this.selection.filter((val,i) => i!=index);\r\n\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\r\n                    node.partialSelected = true;\r\n                else\r\n                    node.partialSelected = false;\r\n            }\r\n        }\r\n                \r\n        let parent = node.parent;\r\n        if (parent) {\r\n            this.propagateSelectionUp(parent, select);\r\n        }\r\n    }\r\n    \r\n    propagateSelectionDown(node: TreeNode, select: boolean) {\r\n        let index = this.findIndexInSelection(node);\r\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n        \r\n        if (select && index == -1) {\r\n            this._selection =  [...this.selection||[],node]\r\n            if (dataKeyValue) {\r\n                this.selectionKeys[dataKeyValue] = 1;\r\n            }\r\n        }\r\n        else if (!select && index > -1) {\r\n            this._selection =  this.selection.filter((val,i) => i!=index);\r\n            if (dataKeyValue) {\r\n                delete this.selectionKeys[dataKeyValue];\r\n            }\r\n        }\r\n        \r\n        node.partialSelected = false;\r\n        \r\n        if (node.children && node.children.length) {\r\n            for (let child of node.children) {\r\n                this.propagateSelectionDown(child, select);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node) {\r\n        if (node && this.selection) {\r\n            if (this.dataKey) {\r\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\r\n            }\r\n            else {\r\n                if (this.selection instanceof Array)\r\n                    return this.findIndexInSelection(node) > -1;\r\n                else\r\n                    return this.equals(node, this.selection);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findIndexInSelection(node: any) {\r\n        let index: number = -1;\r\n        if (this.selection && this.selection.length) {\r\n            for (let i = 0; i < this.selection.length; i++) {\r\n                if (this.equals(node, this.selection[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode === 'multiple';\r\n    }\r\n\r\n    equals(node1, node2) {\r\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\r\n    }\r\n\r\n    filter(value, field, matchMode) {\r\n        if(this.filterTimeout) {\r\n            clearTimeout(this.filterTimeout);\r\n        }\r\n        \r\n        if (!this.isFilterBlank(value)) {\r\n            this.filters[field] = { value: value, matchMode: matchMode };\r\n        } else if (this.filters[field]) {\r\n            delete this.filters[field];\r\n        }\r\n        \r\n        this.filterTimeout = setTimeout(() => {\r\n            this._filter();\r\n            this.filterTimeout = null;\r\n        }, this.filterDelay);\r\n    }\r\n\r\n    filterGlobal(value, matchMode) {\r\n        this.filter(value, 'global', matchMode);\r\n    }\r\n\r\n    isFilterBlank(filter: any): boolean {\r\n        if (filter !== null && filter !== undefined) {\r\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _filter() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            if (!this.value) {\r\n                return;\r\n            }\r\n\r\n            if(!this.hasFilter()) {\r\n                this.filteredNodes = null;\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n            else {\r\n                let globalFilterFieldsArray;\r\n                if (this.filters['global']) {\r\n                    if (!this.columns && !this.globalFilterFields)\r\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\r\n                    else\r\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\r\n                }\r\n                \r\n                this.filteredNodes = [];\r\n                const isStrictMode = this.filterMode === 'strict';\r\n                let isValueChanged = false;\r\n\r\n                for (let node of this.value) {\r\n                    let copyNode = {...node};\r\n                    let localMatch = true;\r\n                    let globalMatch = false;\r\n                    let paramsWithoutNode;\r\n    \r\n                    for (let prop in this.filters) {\r\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\r\n                            let filterMeta = this.filters[prop];\r\n                            let filterField = prop;\r\n                            let filterValue = filterMeta.value;\r\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\r\n                            let filterConstraint = FilterUtils[filterMatchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\r\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\r\n                                    localMatch = false;\r\n                            }\r\n    \r\n                            if (!localMatch) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\r\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\r\n                            let copyNodeForGlobal = {...copyNode};\r\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\r\n                            let filterValue = this.filters['global'].value;\r\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n\r\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\r\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\r\n                                    globalMatch = true;\r\n                                    copyNode = copyNodeForGlobal;\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    let matches = localMatch;\r\n                    if (this.filters['global']) {\r\n                        matches = localMatch && globalMatch;\r\n                    }\r\n\r\n                    if (matches) {\r\n                        this.filteredNodes.push(copyNode);\r\n                    }\r\n\r\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\r\n                }\r\n    \r\n                if (!isValueChanged) {\r\n                    this.filteredNodes = null;\r\n                }\r\n    \r\n                if (this.paginator) {\r\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.first = 0;\r\n\r\n        const filteredValue = this.filteredNodes || this.value;\r\n        \r\n        this.onFilter.emit({\r\n            filters: this.filters,\r\n            filteredValue: filteredValue\r\n        });\r\n\r\n        this.tableService.onUIUpdate(filteredValue);\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    findFilteredNodes(node, paramsWithoutNode) {\r\n        if (node) {\r\n            let matched = false;\r\n            if (node.children) {\r\n                let childNodes = [...node.children];\r\n                node.children = [];\r\n                for (let childNode of childNodes) {\r\n                    let copyChildNode = {...childNode};\r\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\r\n                        matched = true;\r\n                        node.children.push(copyChildNode);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (matched) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\r\n        let matched = false;\r\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\r\n        if (filterConstraint(dataFieldValue, filterValue)) {\r\n            matched = true;\r\n        }\r\n\r\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\r\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\r\n        }\r\n\r\n        return matched;\r\n    }\r\n\r\n    isNodeLeaf(node) {\r\n        return node.leaf === false ? false : !(node.children && node.children.length);\r\n    }\r\n\r\n    hasFilter() {\r\n        let empty = true;\r\n        for (let prop in this.filters) {\r\n            if (this.filters.hasOwnProperty(prop)) {\r\n                empty = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return !empty;\r\n    }\r\n\r\n    public reset() {\r\n        this._sortField = null;\r\n        this._sortOrder = 1;\r\n        this._multiSortMeta = null;\r\n        this.tableService.onSort(null);\r\n\r\n        this.filteredNodes = null;\r\n        this.filters = {};\r\n                \r\n        this.first = 0;\r\n        \r\n        if(this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            this.totalRecords = (this._value ? this._value.length : 0);\r\n        }\r\n    }\r\n\r\n    updateEditingCell(cell) {\r\n        this.editingCell = cell;\r\n        this.bindDocumentEditListener();\r\n    }\r\n\r\n    isEditingCellValid() {\r\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\r\n    }\r\n\r\n    bindDocumentEditListener() {\r\n        if (!this.documentEditListener) {\r\n            this.documentEditListener = (event) => {\r\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\r\n                    this.editingCell = null;\r\n                    this.unbindDocumentEditListener();\r\n                }\r\n\r\n                this.editingCellClick = false;\r\n            };\r\n            \r\n            document.addEventListener('click', this.documentEditListener);\r\n        }\r\n    }\r\n     \r\n    unbindDocumentEditListener() {\r\n        if (this.documentEditListener) {\r\n            document.removeEventListener('click', this.documentEditListener);\r\n            this.documentEditListener = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentEditListener();\r\n        this.editingCell = null;\r\n        this.initialized = null;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: '[pTreeTableBody]',\r\n    template: `\r\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n        <ng-container *ngIf=\"tt.isEmpty()\">\r\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\r\n        </ng-container>\r\n    `\r\n})\r\nexport class TTBody {\r\n\r\n    @Input(\"pTreeTableBody\") columns: any[];\r\n\r\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\r\n\r\n    constructor(public tt: TreeTable) {}\r\n}\r\n\r\n@Component({\r\n    selector: '[ttScrollableView]',\r\n    template: `\r\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\r\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\r\n                <table class=\"ui-treetable-scrollable-header-table\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"ui-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <div #scrollBody class=\"ui-treetable-scrollable-body\">\r\n            <table #scrollTable [ngClass]=\"{'ui-treetable-scrollable-body-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\r\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\"></tbody>\r\n            </table>\r\n            <table #loadingTable *ngIf=\"tt.virtualScroll && tt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-treetable-scrollable-body-table ui-treetable-loading-virtual-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\r\n                <tbody class=\"ui-treetable-tbody\">\r\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\r\n                        <ng-container *ngTemplateOutlet=\"tt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\r\n                    </ng-template>\r\n                </tbody>\r\n            </table>\r\n            <div #virtualScroller class=\"ui-treetable-virtual-scroller\" *ngIf=\"tt.virtualScroll\"></div>\r\n        </div>\r\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\r\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\r\n                <table class=\"ui-treetable-scrollable-footer-table\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tfoot class=\"ui-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\r\n\r\n    @Input(\"ttScrollableView\") columns: any[];\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    @ViewChild('scrollHeader', { static: false }) scrollHeaderViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollHeaderBox', { static: false }) scrollHeaderBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollBody', { static: false }) scrollBodyViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollTable', { static: false }) scrollTableViewChild: ElementRef;\r\n\r\n    @ViewChild('loadingTable', { static: false }) scrollLoadingTableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooter', { static: false }) scrollFooterViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooterBox', { static: false }) scrollFooterBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('virtualScroller', { static: false }) virtualScrollerViewChild: ElementRef;\r\n\r\n    headerScrollListener: Function;\r\n\r\n    bodyScrollListener: Function;\r\n\r\n    footerScrollListener: Function;\r\n\r\n    frozenSiblingBody: Element;\r\n\r\n    _scrollHeight: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    totalRecordsSubscription: Subscription;\r\n    \r\n    initialized: boolean;\r\n\r\n    loadingArray: number[] = [];\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\r\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            this.zone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    this.alignScrollBar();\r\n                    this.initialized = true;\r\n\r\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\r\n                    }\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        if (this.tt.virtualScroll) {\r\n            this.totalRecordsSubscription = this.tt.tableService.totalRecordsSource$.subscribe(() => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.setVirtualScrollerHeight();\r\n                    }, 50);\r\n                });\r\n            });\r\n        }\r\n\r\n        this.loadingArray = Array(this.tt.rows).fill(1);\r\n\r\n        this.initialized = false;\r\n     }\r\n\r\n    @Input() get scrollHeight(): string {\r\n        return this._scrollHeight;\r\n    }\r\n    set scrollHeight(val: string) {\r\n        this._scrollHeight = val;\r\n        this.setScrollHeight();\r\n    }\r\n    \r\n    ngAfterViewChecked() {\r\n        if(!this.initialized && this.el.nativeElement.offsetParent) {\r\n            this.alignScrollBar();\r\n            this.initialized = true;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.bindEvents();\r\n        this.setScrollHeight();\r\n        this.alignScrollBar();\r\n\r\n        if(!this.frozen) {\r\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\r\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\r\n            }\r\n\r\n            if(this.tt.frozenWidth) {\r\n                this.el.nativeElement.style.left = this.tt.frozenWidth;\r\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.tt.frozenWidth + ')';\r\n            }\r\n\r\n            let frozenView = this.el.nativeElement.previousElementSibling;\r\n            if (frozenView) {\r\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\r\n            }\r\n        }\r\n        else {\r\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\r\n        }\r\n\r\n        if(this.tt.virtualScroll) {\r\n            this.setVirtualScrollerHeight();\r\n\r\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\r\n            }\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\r\n\r\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\r\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\r\n            }\r\n\r\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n                this.footerScrollListener = this.onFooterScroll.bind(this);\r\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\r\n            }\r\n\r\n            if(!this.frozen) {\r\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\r\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\r\n        }\r\n\r\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n    }\r\n\r\n    onHeaderScroll(event) {\r\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\r\n    }\r\n\r\n    onFooterScroll(event) {\r\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\r\n    }\r\n\r\n    onBodyScroll(event) {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.frozenSiblingBody) {\r\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\r\n        }\r\n\r\n        if (this.tt.virtualScroll) {\r\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\r\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\r\n            let pageHeight = this.tt.virtualRowHeight * this.tt.rows;\r\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\r\n            let pageCount = (virtualTableHeight / pageHeight)||1;\r\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top||'0';\r\n\r\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) || (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\r\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\r\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\r\n                }\r\n                \r\n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\r\n                this.tt.handleVirtualScroll({\r\n                    page: page,\r\n                    callback: () => {\r\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\r\n                        }\r\n                        \r\n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\r\n\r\n                        if (this.frozenSiblingBody) {\r\n                            (<HTMLElement> this.frozenSiblingBody.children[0]).style.top = this.scrollTableViewChild.nativeElement.style.top;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setScrollHeight() {\r\n        if(this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\r\n            if(this.scrollHeight.indexOf('%') !== -1) {\r\n                let relativeHeight;\r\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\r\n                this.scrollBodyViewChild.nativeElement.style.height = '100px';     //temporary height to calculate static height\r\n                let containerHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.children[0]);\r\n                \r\n                if (this.scrollHeight.includes(\"calc\")) {\r\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\r\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\r\n                    relativeHeight = (DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\r\n                }\r\n                else {\r\n                    relativeHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\r\n                }\r\n                \r\n                let staticHeight = containerHeight - 100;   //total height of headers, footers, paginators\r\n                let scrollBodyHeight = (relativeHeight - staticHeight);\r\n\r\n                if(this.frozen) {\r\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\r\n                }\r\n                \r\n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\r\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\r\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\r\n            }\r\n            else {\r\n                if(this.frozen)\r\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - DomHandler.calculateScrollbarWidth()) + 'px';\r\n                else\r\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    setVirtualScrollerHeight() {\r\n        if(this.virtualScrollerViewChild.nativeElement) {\r\n            this.virtualScrollerViewChild.nativeElement.style.height = this.tt.totalRecords * this.tt.virtualRowHeight + 'px';\r\n        }\r\n    }\r\n\r\n    hasVerticalOverflow() {\r\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\r\n    }\r\n\r\n    alignScrollBar() {\r\n        if(!this.frozen) {\r\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\r\n            \r\n            if(this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\r\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\r\n            }\r\n        }\r\n        this.initialized = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n\r\n        this.frozenSiblingBody = null;\r\n\r\n        if(this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n\r\n        if(this.totalRecordsSubscription) {\r\n            this.totalRecordsSubscription.unsubscribe();\r\n        }\r\n\r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSortableColumn]',\r\n    host: {\r\n        '[class.ui-sortable-column]': 'isEnabled()',\r\n        '[class.ui-state-highlight]': 'sorted',\r\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\r\n    }\r\n})\r\nexport class TTSortableColumn implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSortableColumn\") field: string;\r\n\r\n    @Input() ttSortableColumnDisabled: boolean;\r\n\r\n    sorted: boolean;\r\n    \r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n                this.updateSortState();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n        }\r\n    }\r\n\r\n    updateSortState() {\r\n        this.sorted = this.tt.isSorted(this.field);\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n            this.tt.sort({\r\n                originalEvent: event,\r\n                field: this.field\r\n            });\r\n\r\n            DomHandler.clearSelection();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKey(event: MouseEvent) {\r\n        this.onClick(event);\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSortableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableSortIcon',\r\n    template: `\r\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\r\n    `\r\n})\r\nexport class TTSortIcon implements OnInit, OnDestroy {\r\n\r\n    @Input() field: string;\r\n    \r\n    @Input() ariaLabelDesc: string;\r\n    \r\n    @Input() ariaLabelAsc: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    sortOrder: number;\r\n\r\n    constructor(public tt: TreeTable) {\r\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n            this.updateSortState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.updateSortState();\r\n    }\r\n    \r\n    onClick(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    updateSortState() {\r\n        if (this.tt.sortMode === 'single') {\r\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\r\n        }\r\n        else if (this.tt.sortMode === 'multiple') {\r\n            let sortMeta = this.tt.getSortMeta(this.field);\r\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttResizableColumn]'\r\n})\r\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttResizableColumnDisabled: boolean;\r\n\r\n    resizer: HTMLSpanElement;\r\n\r\n    resizerMouseDownListener: any;\r\n\r\n    documentMouseMoveListener: any;\r\n\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'ui-column-resizer ui-clickable';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n    \r\n            this.zone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        this.tt.onColumnResizeBegin(event);\r\n        this.bindDocumentEvents();\r\n    }\r\n\r\n    onDocumentMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onDocumentMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttResizableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n        \r\n        this.unbindDocumentEvents();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttReorderableColumn]'\r\n})\r\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttReorderableColumnDisabled: boolean;\r\n\r\n    dragStartListener: any;\r\n\r\n    dragOverListener: any;\r\n\r\n    dragEnterListener: any;\r\n\r\n    dragLeaveListener: any;\r\n\r\n    mouseDownListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n\r\n            this.dragStartListener = this.onDragStart.bind(this);\r\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\r\n\r\n            this.dragOverListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n\r\n            this.dragEnterListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\r\n\r\n            this.dragLeaveListener = this.onDragLeave.bind(this);\r\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n        }\r\n\r\n        if (this.dragOverListener) {\r\n            document.removeEventListener('dragover', this.dragOverListener);\r\n            this.dragOverListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragLeaveListener) {\r\n            document.removeEventListener('dragleave', this.dragLeaveListener);\r\n            this.dragLeaveListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\r\n            this.el.nativeElement.draggable = false;\r\n        else\r\n            this.el.nativeElement.draggable = true;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        this.tt.onColumnDragLeave(event);\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.onColumnDrop(event, this.el.nativeElement);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttReorderableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRow]',\r\n    host: {\r\n        '[class.ui-state-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRow implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRow\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKey(event: Event) {\r\n        this.onClick(event);\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    onTouchEnd(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowTouchEnd(event);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRowDblClick]',\r\n    host: {\r\n        '[class.ui-state-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttContextMenuRow]',\r\n    host: {\r\n        '[class.ui-contextmenu-selected]': 'selected'\r\n    }\r\n})\r\nexport class TTContextMenuRow {\r\n\r\n    @Input(\"ttContextMenuRow\") rowNode: any;\r\n\r\n    @Input() ttContextMenuRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\r\n                this.selected = this.tt.equals(this.rowNode.node, node);\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onContextMenu(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowRightClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttContextMenuRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCheckbox',\r\n    template: `\r\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\r\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\">\r\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTCheckbox  {\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input(\"value\") rowNode: any;\r\n\r\n    @ViewChild('box', { static: false }) boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.tt.isSelected(this.rowNode.node);\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.tt.isSelected(this.rowNode.node);\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if(!this.disabled) {\r\n            this.tt.toggleNodeWithCheckbox({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n   \r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableHeaderCheckbox',\r\n    template: `\r\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\r\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\">\r\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTHeaderCheckbox  {\r\n\r\n    @ViewChild('box', { static: false }) boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    disabled: boolean;\r\n\r\n    selectionChangeSubscription: Subscription;\r\n\r\n    valueChangeSubscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n\r\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.updateCheckedState();\r\n    }\r\n\r\n    onClick(event: Event, checked) {\r\n        if(this.tt.value && this.tt.value.length > 0) {\r\n            this.tt.toggleNodesWithCheckbox(event, !checked);\r\n        }\r\n        \r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.selectionChangeSubscription) {\r\n            this.selectionChangeSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.valueChangeSubscription) {\r\n            this.valueChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    updateCheckedState() {\r\n        let checked: boolean;\r\n        const data = this.tt.filteredNodes||this.tt.value;\r\n\r\n        if (data) {\r\n            for (let node of data) {\r\n                if (this.tt.isSelected(node)) {\r\n                    checked = true;\r\n                }   \r\n                else  {\r\n                    checked = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            checked = false;\r\n        }\r\n\r\n        return checked;\r\n    }\r\n   \r\n}\r\n\r\n@Directive({\r\n    selector: '[ttEditableColumn]'\r\n})\r\nexport class TTEditableColumn implements AfterViewInit {\r\n\r\n    @Input(\"ttEditableColumn\") data: any;\r\n\r\n    @Input(\"ttEditableColumnField\") field: any;\r\n\r\n    @Input() ttEditableColumnDisabled: boolean;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.tt.editingCellClick = true;\r\n\r\n            if (this.tt.editingCell) {\r\n                if (this.tt.editingCell !== this.el.nativeElement) {\r\n                    if (!this.tt.isEditingCellValid()) {\r\n                        return;\r\n                    }\r\n        \r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.openCell();\r\n                }\r\n            }\r\n            else {\r\n                this.openCell();\r\n            }\r\n        }\r\n    }\r\n\r\n    openCell() {\r\n        this.tt.updateEditingCell(this.el.nativeElement);\r\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\r\n                if (focusable) {\r\n                    focusable.focus();\r\n                }\r\n            }, 50);\r\n        });\r\n    }\r\n\r\n    closeEditingCell() {\r\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n        this.tt.editingCell = null;\r\n        this.tt.unbindDocumentEditListener();\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            //enter\r\n            if (event.keyCode == 13) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n                }\r\n    \r\n                event.preventDefault();\r\n            }\r\n    \r\n            //escape\r\n            else if (event.keyCode == 27) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\r\n                }\r\n    \r\n                event.preventDefault();\r\n            }\r\n    \r\n            //tab\r\n            else if (event.keyCode == 9) {\r\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n                \r\n                if (event.shiftKey)\r\n                    this.moveToPreviousCell(event);\r\n                else\r\n                    this.moveToNextCell(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    findCell(element) {\r\n        if (element) {\r\n            let cell = element;\r\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\r\n                cell = cell.parentElement;\r\n            }\r\n\r\n            return cell;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    moveToPreviousCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findPreviousEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    moveToNextCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findNextEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    findPreviousEditableColumn(cell: Element) {\r\n        let prevCell = cell.previousElementSibling;\r\n\r\n        if (!prevCell) {\r\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\r\n            if (previousRow) {\r\n                prevCell = previousRow.lastElementChild;\r\n            }\r\n        }\r\n\r\n        if (prevCell) {\r\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\r\n                return prevCell;\r\n            else\r\n                return this.findPreviousEditableColumn(prevCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findNextEditableColumn(cell: Element) {\r\n        let nextCell = cell.nextElementSibling;\r\n\r\n        if (!nextCell) {\r\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\r\n            if (nextRow) {\r\n                nextCell = nextRow.firstElementChild;\r\n            }\r\n        }\r\n\r\n        if (nextCell) {\r\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\r\n                return nextCell;\r\n            else\r\n                return this.findNextEditableColumn(nextCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttEditableColumnDisabled !== true;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCellEditor',\r\n    template: `\r\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\r\n        </ng-container>\r\n    `\r\n})\r\nexport class TreeTableCellEditor implements AfterContentInit {\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    inputTemplate: TemplateRef<any>;\r\n\r\n    outputTemplate: TemplateRef<any>;\r\n\r\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'input':\r\n                    this.inputTemplate = item.template;\r\n                    break;\r\n\r\n                case 'output':\r\n                    this.outputTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttRow]',\r\n    host: {\r\n        '[attr.tabindex]': '\"0\"'\r\n    }\r\n})\r\nexport class TTRow {\r\n\r\n    @Input('ttRow') rowNode: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                let nextRow = this.el.nativeElement.nextElementSibling;\r\n                if (nextRow) {\r\n                    nextRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //down arrow\r\n            case 38:\r\n                let prevRow = this.el.nativeElement.previousElementSibling;\r\n                if (prevRow) {\r\n                    prevRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = false;\r\n\r\n                    this.tt.onNodeCollapse.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = true;\r\n\r\n                    this.tt.onNodeExpand.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n        }\r\n    }\r\n\r\n    restoreFocus() {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\r\n                if (row) {\r\n                    row.focus();\r\n                }\r\n            }, 25);\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableToggler',\r\n    template: `\r\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" *ngIf=\"rowNode.node.leaf === false || rowNode.level !== 0 || rowNode.node.children && rowNode.node.children.length\" (click)=\"onClick($event)\"\r\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\r\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\r\n        </a>\r\n    `\r\n})\r\nexport class TreeTableToggler {\r\n\r\n    @Input() rowNode: any;\r\n\r\n    constructor(public tt: TreeTable) {}\r\n\r\n    onClick(event: Event) {\r\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\r\n\r\n        if(this.rowNode.node.expanded) {\r\n            this.tt.onNodeExpand.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n        else {\r\n            this.tt.onNodeCollapse.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n\r\n        this.tt.updateSerializedValue();\r\n        this.tt.tableService.onUIUpdate(this.tt.value);\r\n        \r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,PaginatorModule],\r\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor],\r\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\r\n})\r\nexport class TreeTableModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablecolgroupdemo.html'\r\n})\r\nexport class TreeTableColGroupDemo implements OnInit {\r\n\r\n    sales: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    ngOnInit() {\r\n        this.sales = [\r\n            {\r\n                data: { brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'},\r\n                expanded: true,\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' },\r\n                        expanded: true,\r\n                        children: [\r\n                            {\r\n                                data: { brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' }, \r\n                            },\r\n                            {\r\n                                data: { brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' }, \r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        data: { brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data: { brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' }, \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                data:  { brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' },\r\n                children: [\r\n                    {\r\n                        data: { brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' }, \r\n                    },\r\n                    {\r\n                        data: { brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' }, \r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n    };\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablecolresizedemo.html'\r\n})\r\nexport class TreeTableColResizeDemo {\r\n\r\n    files1: TreeNode[];\r\n\r\n    files2: TreeNode[];\r\n\r\n    files3: TreeNode[];\r\n\r\n    files4: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name', width: '50%' },\r\n            { field: 'size', header: 'Size', width: '30%' },\r\n            { field: 'type', header: 'Type', width: '20%' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablecoltoggledemo.html'\r\n})\r\nexport class TreeTableColToggleDemo {\r\n    \r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    selectedColumns: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.selectedColumns = this.cols;\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode, MenuItem } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablecontextmenudemo.html',\r\n    providers: [MessageService]\r\n})\r\nexport class TreeTableContextMenuDemo {\r\n\r\n    files: TreeNode[];\r\n\r\n    selectedNode: TreeNode;\r\n\r\n    cols: any[];\r\n\r\n    items: MenuItem[];\r\n\r\n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.items = [\r\n            { label: 'View', icon: 'pi pi-search', command: (event) => this.viewFile(this.selectedNode) },\r\n            { label: 'Toggle', icon: 'pi pi-sort', command: (event) => this.toggleFile(this.selectedNode) }\r\n        ];\r\n    }\r\n\r\n    viewFile(node) {\r\n        this.messageService.add({ severity: 'info', summary: 'File Selected', detail: node.data.name + ' - ' + node.data.size });\r\n    }\r\n\r\n    toggleFile(node) {\r\n        node.expanded = !node.expanded;\r\n        this.files = [...this.files];\r\n    }\r\n}\r\n","import { NgModule}     from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { TreeTableDemo } from './treetabledemo';\r\nimport { TreeTablePageDemo } from './treetablepagedemo';\r\nimport { TreeTableSortDemo } from './treetablesortdemo';\r\nimport { TreeTableSelectionDemo } from './treetableselectiondemo';\r\nimport { TreeTableSectionsDemo } from './treetablesectionsdemo';\r\nimport { TreeTableStyleDemo } from './treetablestyledemo';\r\nimport { TreeTableLazyDemo } from './treetablelazydemo';\r\nimport { TreeTableColGroupDemo } from './treetablecolgroupdemo';\r\nimport { TreeTableScrollDemo } from './treetablescrolldemo';\r\nimport { TreeTableColToggleDemo } from './treetablecoltoggledemo';\r\nimport { TreeTableResponsiveDemo } from './treetableresponsivedemo';\r\nimport { TreeTableContextMenuDemo } from './treetablecontextmenudemo';\r\nimport { TreeTableColResizeDemo } from './treetablecolresizedemo';\r\nimport { TreeTableReorderDemo } from './treetablereorderdemo';\r\nimport { TreeTableEditDemo } from './treetableeditdemo';\r\nimport { TreeTableFilterDemo } from './treetablefilterdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n            {path:'',component: TreeTableDemo},\r\n            { path: 'page', component: TreeTablePageDemo },\r\n\t\t\t{ path: 'sort', component: TreeTableSortDemo },\r\n\t\t\t{ path: 'selection', component: TreeTableSelectionDemo },\r\n\t\t\t{ path: 'sections', component: TreeTableSectionsDemo },\r\n\t\t\t{ path: 'style', component: TreeTableStyleDemo },\r\n\t\t\t{ path: 'lazy', component: TreeTableLazyDemo },\r\n\t\t\t{ path: 'colgroup', component: TreeTableColGroupDemo },\r\n\t\t\t{ path: 'scroll', component: TreeTableScrollDemo },\r\n\t\t\t{ path: 'coltoggle', component: TreeTableColToggleDemo },\r\n\t\t\t{ path: 'responsive', component: TreeTableResponsiveDemo },\r\n\t\t\t{ path: 'contextmenu', component: TreeTableContextMenuDemo },\r\n\t\t\t{ path: 'colresize', component: TreeTableColResizeDemo },\r\n\t\t\t{ path: 'reorder', component: TreeTableReorderDemo },\r\n\t\t\t{ path: 'edit', component: TreeTableEditDemo },\r\n\t\t\t{ path: 'filter', component: TreeTableFilterDemo }\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class TreeTableDemoRoutingModule {}\r\n","import { NgModule }     from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule }    from '@angular/forms';\r\nimport { TreeTableDemo } from './treetabledemo';\r\nimport { TreeTableDemoRoutingModule } from './treetabledemo-routing.module';\r\nimport { TreeTableModule } from '../../../components/treetable/treetable';\r\nimport { ToastModule } from '../../../components/toast/toast';\r\nimport { TabViewModule } from '../../../components/tabview/tabview';\r\nimport { MultiSelectModule } from '../../../components/multiselect/multiselect';\r\nimport { InputTextModule } from '../../../components/inputtext/inputtext';\r\nimport { ContextMenuModule } from '../../../components/contextmenu/contextmenu';\r\nimport { CodeHighlighterModule } from '../../../components/codehighlighter/codehighlighter';\r\nimport { TreeTableSubmenu } from './treetablesubmenu';\r\nimport { TreeTablePageDemo } from './treetablepagedemo';\r\nimport { TreeTableSortDemo } from './treetablesortdemo';\r\nimport { TreeTableSelectionDemo } from './treetableselectiondemo';\r\nimport { TreeTableSectionsDemo } from './treetablesectionsdemo';\r\nimport { TreeTableStyleDemo } from './treetablestyledemo';\r\nimport { TreeTableLazyDemo } from './treetablelazydemo';\r\nimport { TreeTableColGroupDemo } from './treetablecolgroupdemo';\r\nimport { TreeTableScrollDemo } from './treetablescrolldemo';\r\nimport { TreeTableColToggleDemo } from './treetablecoltoggledemo';\r\nimport { TreeTableResponsiveDemo } from './treetableresponsivedemo';\r\nimport { TreeTableContextMenuDemo } from './treetablecontextmenudemo';\r\nimport { TreeTableColResizeDemo } from './treetablecolresizedemo';\r\nimport { TreeTableReorderDemo } from './treetablereorderdemo';\r\nimport { TreeTableEditDemo } from './treetableeditdemo';\r\nimport { TreeTableFilterDemo } from './treetablefilterdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tTreeTableDemoRoutingModule,\r\n        TreeTableModule,\r\n        ToastModule,\r\n        TabViewModule,\r\n        MultiSelectModule,\r\n        InputTextModule,\r\n        ContextMenuModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n        TreeTableDemo,\r\n        TreeTablePageDemo,\r\n        TreeTableSortDemo,\r\n        TreeTableSelectionDemo,\r\n        TreeTableSectionsDemo,\r\n        TreeTableStyleDemo,\r\n        TreeTableLazyDemo,\r\n        TreeTableColGroupDemo,\r\n        TreeTableScrollDemo,\r\n        TreeTableColToggleDemo,\r\n        TreeTableResponsiveDemo,\r\n        TreeTableContextMenuDemo,\r\n        TreeTableColResizeDemo,\r\n        TreeTableReorderDemo,\r\n        TreeTableEditDemo,\r\n        TreeTableFilterDemo,\r\n        TreeTableSubmenu\r\n\t]\r\n})\r\nexport class TreeTableDemoModule {}\r\n","import {Component,OnInit} from '@angular/core';\r\nimport {NodeService} from '../../service/nodeservice';\r\nimport {TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetabledemo.html'\r\n})\r\nexport class TreeTableDemo implements OnInit {\r\n\r\n    files1: TreeNode[];\r\n\r\n    files2: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetableeditdemo.html',\r\n    styles: [`\r\n        :host ::ng-deep .ui-editing-cell {\r\n            padding: 0 !important;\r\n        }\r\n\r\n        :host ::ng-deep .ui-toggler-column.ui-editing-cell {\r\n            padding-left: 0.857em !important;\r\n        }\r\n    `]\r\n})\r\nexport class TreeTableEditDemo {\r\n    \r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import {Component,OnInit} from '@angular/core';\r\nimport {NodeService} from '../../service/nodeservice';\r\nimport {TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablefilterdemo.html'\r\n})\r\nexport class TreeTableFilterDemo implements OnInit {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablelazydemo.html'\r\n})\r\nexport class TreeTableLazyDemo {\r\n    \r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    totalRecords: number;\r\n\r\n    loading: boolean;\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        //in a production application, retrieve the logical number of rows from a remote datasource\r\n        this.totalRecords = 1000;\r\n\r\n        this.loading = true;\r\n    }\r\n\r\n    loadNodes(event) {\r\n        this.loading = true;\r\n\r\n        //in a production application, make a remote request to load data using state metadata from event\r\n        //event.first = First row offset\r\n        //event.rows = Number of rows per page\r\n        //event.sortField = Field name to sort with\r\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\r\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\r\n\r\n        //imitate db connection over a network\r\n        setTimeout(() => {\r\n            this.loading = false;\r\n            this.files = [];\r\n\r\n            for(let i = 0; i < event.rows; i++) {\r\n                let node = {\r\n                    data: {  \r\n                        name: 'Item ' + (event.first + i),\r\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                        type: 'Type ' + (event.first + i)\r\n                    },\r\n                    leaf: false\r\n                };\r\n\r\n                this.files.push(node);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    onNodeExpand(event) {\r\n        this.loading = true;\r\n\r\n        setTimeout(() => {\r\n            this.loading = false;\r\n            const node = event.node;\r\n\r\n            node.children = [\r\n                {\r\n                    data: {  \r\n                        name: node.data.name + ' - 0',\r\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                        type: 'File'\r\n                    },\r\n                },\r\n                {\r\n                    data: {  \r\n                        name: node.data.name + ' - 1',\r\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                        type: 'File'\r\n                    }\r\n                }\r\n            ];\r\n\r\n            this.files = [...this.files];\r\n        }, 250);\r\n        \r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { NodeService } from '../../service/nodeservice';\r\nimport { TreeNode } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablepagedemo.html'\r\n})\r\nexport class TreeTablePageDemo implements OnInit {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.files = [];\r\n        for(let i = 0; i < 50; i++) {\r\n            let node = {\r\n                data:{  \r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        data: {  \r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            this.files.push(node);\r\n        }\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablereorderdemo.html'\r\n})\r\nexport class TreeTableReorderDemo {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetableresponsivedemo.html',\r\n    styles: [`\r\n        :host ::ng-deep .priority-2, \r\n        :host ::ng-deep .priority-3,\r\n        :host ::ng-deep .visibility-sm {\r\n            display: none;\r\n        }\r\n\r\n        @media screen and (max-width: 39.938em) {\r\n            :host ::ng-deep .visibility-sm {\r\n                display: inline;\r\n            }\r\n        }\r\n\r\n        @media screen and (min-width: 40em) {\r\n            :host ::ng-deep .priority-2 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n\r\n        @media screen and (min-width: 64em) {\r\n            :host ::ng-deep .priority-3 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n    `]\r\n})\r\nexport class TreeTableResponsiveDemo {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\n\r\n@Component({\r\n    templateUrl: './treetablescrolldemo.html',\r\n    styles: [`\r\n        .loading-text {\r\n            display: block;\r\n            background-color: #f1f1f1;\r\n            min-height: 19px;\r\n            animation: pulse 1s infinite ease-in-out;\r\n            text-indent: -99999px;\r\n            overflow: hidden;\r\n        }\r\n    `]\r\n})\r\nexport class TreeTableScrollDemo {\r\n    \r\n    files1: TreeNode[];\r\n\r\n    files2: TreeNode[];\r\n\r\n    files3: TreeNode[];\r\n\r\n    files4: TreeNode[];\r\n\r\n    virtualFiles: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    frozenCols: any[];\r\n\r\n    scrollableCols: any[];\r\n\r\n    totalRecords: number;\r\n\r\n    showLoader: boolean;\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.scrollableCols = [\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.frozenCols = [\r\n            { field: 'name', header: 'Name' }\r\n        ];\r\n\r\n        //in a production application, retrieve the logical number of rows from a remote datasource\r\n        this.totalRecords = 250000;\r\n\r\n        this.showLoader = false;\r\n    }\r\n\r\n    loadNodes(event) {\r\n        //in a production application, make a remote request to load data using state metadata from event\r\n        //event.first = First row offset\r\n        //event.rows = Number of rows per page\r\n        //event.sortField = Field name to sort with\r\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\r\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\r\n\r\n        //imitate db connection over a network\r\n        setTimeout(() => {\r\n            this.virtualFiles = [];\r\n\r\n            //last chunk\r\n            if (event.first === 249980)\r\n                this.createLazyNodes(event.first, 20);\r\n            else\r\n                this.createLazyNodes(event.first, event.rows);\r\n        }, 250);\r\n    }\r\n\r\n    createLazyNodes(index, length) {\r\n        for(let i = 0; i < length; i++) {\r\n            let node = {\r\n                data: {  \r\n                    name: 'Item ' + (index + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (index + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            this.virtualFiles.push(node);\r\n        }\r\n    }\r\n\r\n    onNodeExpand(event) {\r\n        this.showLoader = true;\r\n\r\n        setTimeout(() => {\r\n            this.showLoader = false;\r\n            const node = event.node;\r\n\r\n            node.children = [\r\n                {\r\n                    data: {  \r\n                        name: node.data.name + ' - 0',\r\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                        type: 'File'\r\n                    },\r\n                },\r\n                {\r\n                    data: {  \r\n                        name: node.data.name + ' - 1',\r\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                        type: 'File'\r\n                    }\r\n                }\r\n            ];\r\n\r\n            this.virtualFiles = [...this.virtualFiles];\r\n        }, 250);\r\n        \r\n    }\r\n}","import {Component,OnInit} from '@angular/core';\r\nimport {NodeService} from '../../service/nodeservice';\r\nimport {TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablesectionsdemo.html'\r\n})\r\nexport class TreeTableSectionsDemo implements OnInit {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { TreeNode } from '../../../components/common/api';\r\nimport { NodeService } from '../../service/nodeservice';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './treetableselectiondemo.html',\r\n    providers: [MessageService]\r\n})\r\nexport class TreeTableSelectionDemo {\r\n\r\n    files1: TreeNode[];\r\n\r\n    files2: TreeNode[];\r\n\r\n    files3: TreeNode[];\r\n\r\n    files4: TreeNode[];\r\n\r\n    files5: TreeNode[];\r\n\r\n    selectedNode1: TreeNode;\r\n\r\n    selectedNode2: TreeNode;\r\n\r\n    selectedNodes1: TreeNode[];\r\n\r\n    selectedNodes2: TreeNode[];\r\n\r\n    selectedNodes3: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n\r\n    nodeSelect(event) {\r\n        this.messageService.add({severity: 'info', summary: 'Node Selected', detail: event.node.data.name});\r\n    }\r\n    \r\n    nodeUnselect(event) {\r\n        this.messageService.add({severity: 'info', summary: 'Node Unselected', detail: event.node.data.name});\r\n    }\r\n}\r\n","import {Component,OnInit} from '@angular/core';\r\nimport {NodeService} from '../../service/nodeservice';\r\nimport {TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablesortdemo.html'\r\n})\r\nexport class TreeTableSortDemo implements OnInit {\r\n\r\n    files1: TreeNode[];\r\n\r\n    files2: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => {\r\n            this.files2 = files;\r\n            this.files2.push({\r\n                data: {\r\n                    name: 'Documents',\r\n                    size: '100kb',\r\n                    type: 'Link'\r\n                }\r\n            });\r\n        });\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport {NodeService} from '../../service/nodeservice';\r\nimport {TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './treetablestyledemo.html',\r\n    styles: [`\r\n        .kb-row {\r\n            background-color: #1CA979 !important;\r\n            color: #ffffff !important;\r\n        }\r\n\r\n        .kb-cell {\r\n            background-color: #2CA8B1 !important;\r\n            color: #ffffff !important;\r\n        }\r\n    `]\r\n})\r\nexport class TreeTableStyleDemo {\r\n\r\n    files: TreeNode[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files = files);\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'treetable-submenu',\r\n    template: `\r\n        <div class=\"content-section content-submenu ui-helper-clearfix\">\r\n            <ul>\r\n                <li><a [routerLink]=\"['/treetable']\">&#9679; Documentation</a></li>\r\n                <li><a [routerLink]=\"['/treetable/sections']\">&#9679; Sections</a></li>\r\n                <li><a [routerLink]=\"['/treetable/page']\">&#9679; Page</a></li>\r\n                <li><a [routerLink]=\"['/treetable/sort']\">&#9679; Sort</a></li>\r\n                <li><a [routerLink]=\"['/treetable/selection']\">&#9679; Selection</a></li>\r\n                <li><a [routerLink]=\"['/treetable/colgroup']\">&#9679; ColGroup</a></li>\r\n                <li><a [routerLink]=\"['/treetable/lazy']\">&#9679; Lazy</a></li>\r\n                <li><a [routerLink]=\"['/treetable/edit']\">&#9679; Edit</a></li>\r\n                <li><a [routerLink]=\"['/treetable/scroll']\">&#9679; Scroll</a></li>\r\n                <li><a [routerLink]=\"['/treetable/colresize']\">&#9679; Resize</a></li>\r\n                <li><a [routerLink]=\"['/treetable/reorder']\">&#9679; Reorder</a></li>\r\n                <li><a [routerLink]=\"['/treetable/coltoggle']\">&#9679; Toggle</a></li>\r\n                <li><a [routerLink]=\"['/treetable/style']\">&#9679; Style</a></li>\r\n                <li><a [routerLink]=\"['/treetable/contextmenu']\">&#9679; ContextMenu</a></li>\r\n                <li><a [routerLink]=\"['/treetable/responsive']\">&#9679; Responsive</a></li>\r\n                <li><a [routerLink]=\"['/treetable/filter']\">&#9679; Filter</a></li>\r\n            </ul>\r\n        </div>\r\n    `\r\n})\r\nexport class TreeTableSubmenu {}\r\n"],"sourceRoot":""}