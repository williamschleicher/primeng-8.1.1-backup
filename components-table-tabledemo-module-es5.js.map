{"version":3,"sources":["webpack:///./src/app/showcase/components/table/tablecolgroupdemo.html","webpack:///./src/app/showcase/components/table/tablecolresizedemo.html","webpack:///./src/app/showcase/components/table/tablecoltoggledemo.html","webpack:///./src/app/showcase/components/table/tablecontextmenudemo.html","webpack:///./src/app/showcase/components/table/tablecruddemo.html","webpack:///./src/app/showcase/components/table/tabledemo.html","webpack:///./src/app/showcase/components/table/tableeditdemo.html","webpack:///./src/app/showcase/components/table/tableexportdemo.html","webpack:///./src/app/showcase/components/table/tablefilterdemo.html","webpack:///./src/app/showcase/components/table/tablelazydemo.html","webpack:///./src/app/showcase/components/table/tablepagedemo.html","webpack:///./src/app/showcase/components/table/tablereorderdemo.html","webpack:///./src/app/showcase/components/table/tableresponsivedemo.html","webpack:///./src/app/showcase/components/table/tablerowexpansiondemo.html","webpack:///./src/app/showcase/components/table/tablerowgroupdemo.html","webpack:///./src/app/showcase/components/table/tablescrolldemo.html","webpack:///./src/app/showcase/components/table/tablesectionsdemo.html","webpack:///./src/app/showcase/components/table/tableselectiondemo.html","webpack:///./src/app/showcase/components/table/tablesortdemo.html","webpack:///./src/app/showcase/components/table/tablestatedemo.html","webpack:///./src/app/showcase/components/table/tablestickydemo.html","webpack:///./src/app/showcase/components/table/tablestyledemo.html","webpack:///./src/app/showcase/components/table/tablecolgroupdemo.ts","webpack:///./src/app/showcase/components/table/tablecolresizedemo.ts","webpack:///./src/app/showcase/components/table/tablecoltoggledemo.ts","webpack:///./src/app/showcase/components/table/tablecontextmenudemo.ts","webpack:///./src/app/showcase/components/table/tablecruddemo.ts","webpack:///./src/app/showcase/components/table/tabledemo-routing.module.ts","webpack:///./src/app/showcase/components/table/tabledemo.module.ts","webpack:///./src/app/showcase/components/table/tabledemo.ts","webpack:///./src/app/showcase/components/table/tableeditdemo.ts","webpack:///./src/app/showcase/components/table/tableexportdemo.ts","webpack:///./src/app/showcase/components/table/tablefilterdemo.ts","webpack:///./src/app/showcase/components/table/tablelazydemo.ts","webpack:///./src/app/showcase/components/table/tablepagedemo.ts","webpack:///./src/app/showcase/components/table/tablereorderdemo.ts","webpack:///./src/app/showcase/components/table/tableresponsivedemo.ts","webpack:///./src/app/showcase/components/table/tablerowexpansiondemo.ts","webpack:///./src/app/showcase/components/table/tablerowgroupdemo.ts","webpack:///./src/app/showcase/components/table/tablescrolldemo.ts","webpack:///./src/app/showcase/components/table/tablesectionsdemo.ts","webpack:///./src/app/showcase/components/table/tableselectiondemo.ts","webpack:///./src/app/showcase/components/table/tablesortdemo.ts","webpack:///./src/app/showcase/components/table/tablestatedemo.ts","webpack:///./src/app/showcase/components/table/tablestickydemo.ts","webpack:///./src/app/showcase/components/table/tablestyledemo.ts","webpack:///./src/app/showcase/components/table/tablesubmenu.ts"],"names":[],"mappings":"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","file":"components-table-tabledemo-module-es5.js","sourcesContent":["module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Column Group</span></span>\\r\\n        <span>Columns can be grouped using rowspan and colspan properties.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [value]=\\\"sales\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th rowspan=\\\"3\\\">Brand</th>\\r\\n                <th colspan=\\\"4\\\">Sale Rate</th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th colspan=\\\"2\\\">Sales</th>\\r\\n                <th colspan=\\\"2\\\">Profits</th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th>Last Year</th>\\r\\n                <th>This Year</th>\\r\\n                <th>Last Year</th>\\r\\n                <th>This Year</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-sale>\\r\\n            <tr>\\r\\n                <td>{{sale.brand}}</td>\\r\\n                <td>{{sale.lastYearSale}}</td>\\r\\n                <td>{{sale.thisYearSale}}</td>\\r\\n                <td>{{sale.lastYearProfit}}</td>\\r\\n                <td>{{sale.thisYearProfit}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"footer\\\">\\r\\n            <tr>\\r\\n                <td colspan=\\\"3\\\">Totals</td>\\r\\n                <td>$506,202</td>\\r\\n                <td>$531,020</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecolgroupdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolgroupdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableColGroupDemo implements OnInit &#123;\\r\\n\\r\\n    sales: any[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.sales = [\\r\\n            &#123; brand: 'Apple', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342' &#125;,\\r\\n            &#123; brand: 'Samsung', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\r\\n            &#123; brand: 'Microsoft', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\r\\n            &#123; brand: 'Philips', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323,' &#125;,\\r\\n            &#123; brand: 'Song', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\r\\n            &#123; brand: 'LG', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\r\\n            &#123; brand: 'Sharp', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\r\\n            &#123; brand: 'Panasonic', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\r\\n            &#123; brand: 'HTC', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\r\\n            &#123; brand: 'Toshiba', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecolgroupdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolgroupdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"sales\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-sale&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearProfit&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearProfit&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\r\\n            &lt;td&gt;$506,202&lt;/td&gt;\\r\\n            &lt;td&gt;$531,020&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Column Resize</span></span>\\r\\n        <span>Columns can be resized using drag drop by setting the resizableColumns to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and \\r\\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Fit Mode</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" pResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Expand Mode</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" pResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n    \\r\\n    <h3>Scrollable</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" >\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" pResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Scrollable with Variable Width</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" pResizableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecolresizedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolresizedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableColResizeDemo implements OnInit &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n\\r\\n    cars2: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsMedium().then(cars => this.cars2 = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin', width: '25%'&#125;,\\r\\n            &#123; field: 'year', header: 'Year', width: '15%' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand', width: '35%' &#125;,\\r\\n            &#123; field: 'color', header: 'Color', width: '25%' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecolresizedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolresizedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Expand Mode&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Scrollable&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" &gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Scrollable with Variable Width&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Column Toggle</span></span>\\r\\n        <span>This demo uses a multiselect component to implement toggleable columns.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"selectedColumns\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div style=\\\"text-align:left\\\">\\r\\n                <p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\r\\n                         selectedItemsLabel=\\\"{0} columns selected\\\" [style]=\\\"{minWidth: '200px'}\\\" defaultLabel=\\\"Choose Columns\\\"></p-multiSelect>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    &#123;&#123;col.header&#125;&#125;\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecoltoggle.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/blob/master/src/app/showcase/components/table/tablecoltoggledemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableColToggleDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    selectedColumns: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.selectedColumns = this.cols;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecoltoggle.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/blob/master/src/app/showcase/components/table/tablecoltoggledemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"selectedColumns\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\r\\n            &lt;p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\r\\n                        selectedItemsLabel=\\\"&#123;0&#125; columns selected\\\" [style]=\\\"&#123;minWidth: '200px'&#125;\\\" defaultLabel=\\\"Choose Columns\\\"&gt;&lt;/p-multiSelect&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">ContextMenu</span></span>\\r\\n        <span>Table has exclusive integration with ContextMenu.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(contextMenuSelection)]=\\\"selectedCar\\\" [contextMenu]=\\\"cm\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pContextMenuRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <p-contextMenu #cm [model]=\\\"items\\\"></p-contextMenu>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecontextmenudemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecontextmenudemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableContextMenuDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    selectedCar: Car;\\r\\n\\r\\n    selectCars: Car[];\\r\\n\\r\\n    items: MenuItem[];\\r\\n\\r\\n    constructor(private carService: CarService, private messageService: MessageService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.items = [\\r\\n            &#123; label: 'View', icon: 'pi pi-search', command: (event) => this.viewCar(this.selectedCar) &#125;,\\r\\n            &#123; label: 'Delete', icon: 'pi pi-times', command: (event) => this.deleteCar(this.selectedCar) &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    viewCar(car: Car) &#123;\\r\\n        this.messageService.add(&#123; severity: 'info', summary: 'Car Selected', detail: car.vin + ' - ' + car.brand &#125;);\\r\\n    &#125;\\r\\n\\r\\n    deleteCar(car: Car) &#123;\\r\\n        let index = -1;\\r\\n        for (let i = 0; i &lt; this.cars.length; i++) &#123;\\r\\n            if (this.cars[i].vin == car.vin) &#123;\\r\\n                index = i;\\r\\n                break;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        this.cars.splice(index, 1);\\r\\n\\r\\n        this.messageService.add(&#123; severity: 'info', summary: 'Car Deleted', detail: car.vin + ' - ' + car.brand &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecontextmenudemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecontextmenudemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(contextMenuSelection)]=\\\"selectedCar\\\" [contextMenu]=\\\"cm\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pContextMenuRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">CRUD</span></span>\\r\\n        <span>This samples demonstrates a CRUD implementation using various PrimeNG components.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar\\\" (onRowSelect)=\\\"onRowSelect($event)\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            List of Cars\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\" let-rowData>\\r\\n            <div style=\\\"text-align:left\\\">\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"fa fa-plus\\\" (click)=\\\"showDialogToAdd()\\\" label=\\\"Add\\\"></button>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n    \\r\\n    <p-dialog header=\\\"Car Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [style]=\\\"{width: '300px'}\\\">\\r\\n        <div class=\\\"ui-g ui-fluid\\\" *ngIf=\\\"car\\\">\\r\\n            <div class=\\\"ui-g-12\\\">\\r\\n                <div class=\\\"ui-g-4\\\">\\r\\n                    <label for=\\\"vin\\\">Vin</label>\\r\\n                </div>\\r\\n                <div class=\\\"ui-g-8\\\">\\r\\n                    <input pInputText id=\\\"vin\\\" [(ngModel)]=\\\"car.vin\\\" />\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"ui-g-12\\\">\\r\\n                <div class=\\\"ui-g-4\\\">\\r\\n                    <label for=\\\"year\\\">Year</label>\\r\\n                </div>\\r\\n                <div class=\\\"ui-g-8\\\">\\r\\n                    <input pInputText id=\\\"year\\\" [(ngModel)]=\\\"car.year\\\" />\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"ui-g-12\\\">\\r\\n                <div class=\\\"ui-g-4\\\">\\r\\n                    <label for=\\\"brand\\\">Brand</label>\\r\\n                </div>\\r\\n                <div class=\\\"ui-g-8\\\">\\r\\n                    <input pInputText id=\\\"brand\\\" [(ngModel)]=\\\"car.brand\\\" />\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"ui-g-12\\\">\\r\\n                <div class=\\\"ui-g-4\\\">\\r\\n                    <label for=\\\"color\\\">Color</label>\\r\\n                </div>\\r\\n                <div class=\\\"ui-g-8\\\">\\r\\n                    <input pInputText id=\\\"color\\\" [(ngModel)]=\\\"car.color\\\" />\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <p-footer>\\r\\n            <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\">\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"fa fa-close\\\" (click)=\\\"delete()\\\" label=\\\"Delete\\\"></button>\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"fa fa-check\\\" (click)=\\\"save()\\\" label=\\\"Save\\\"></button>\\r\\n            </div>\\r\\n        </p-footer>\\r\\n    </p-dialog>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecruddemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableCrudDemo implements OnInit &#123;\\r\\n\\r\\n    displayDialog: boolean;\\r\\n\\r\\n    car: Car = &#123;&#125;;\\r\\n\\r\\n    selectedCar: Car;\\r\\n\\r\\n    newCar: boolean;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    showDialogToAdd() &#123;\\r\\n        this.newCar = true;\\r\\n        this.car = &#123;&#125;;\\r\\n        this.displayDialog = true;\\r\\n    &#125;\\r\\n\\r\\n    save() &#123;\\r\\n        let cars = [...this.cars];\\r\\n        if (this.newCar)\\r\\n            cars.push(this.car);\\r\\n        else\\r\\n            cars[this.cars.indexOf(this.selectedCar)] = this.car;\\r\\n\\r\\n        this.cars = cars;\\r\\n        this.car = null;\\r\\n        this.displayDialog = false;\\r\\n    &#125;\\r\\n\\r\\n    delete() &#123;\\r\\n        let index = this.cars.indexOf(this.selectedCar);\\r\\n        this.cars = this.cars.filter((val, i) => i != index);\\r\\n        this.car = null;\\r\\n        this.displayDialog = false;\\r\\n    &#125;\\r\\n\\r\\n    onRowSelect(event) &#123;\\r\\n        this.newCar = false;\\r\\n        this.car = this.cloneCar(event.data);\\r\\n        this.displayDialog = true;\\r\\n    &#125;\\r\\n\\r\\n    cloneCar(c: Car): Car &#123;\\r\\n        let car = &#123;&#125;;\\r\\n        for (let prop in c) &#123;\\r\\n            car[prop] = c[prop];\\r\\n        &#125;\\r\\n        return car;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecruddemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar\\\" (onRowSelect)=\\\"onRowSelect($event)\\\" [paginator]=\\\"true\\\" [rows]=\\\"15\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\" let-rowData&gt;\\r\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"fa fa-plus\\\" (click)=\\\"showDialogToAdd()\\\" label=\\\"Add\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;    \\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;p-dialog header=\\\"Car Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\"  [style]=\\\"&#123;width: '300px'&#125;\\\"&gt;\\r\\n    &lt;div class=\\\"ui-g ui-fluid\\\" *ngIf=\\\"car\\\"&gt;\\r\\n        &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n            &lt;div class=\\\"ui-g-4\\\"&gt;\\r\\n                &lt;label for=\\\"vin\\\"&gt;Vin&lt;/label&gt;\\r\\n            &lt;/div&gt;\\r\\n            &lt;div class=\\\"ui-g-8\\\"&gt;\\r\\n                &lt;input pInputText id=\\\"vin\\\" [(ngModel)]=\\\"car.vin\\\" /&gt;\\r\\n            &lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n        &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n            &lt;div class=\\\"ui-g-4\\\"&gt;\\r\\n                &lt;label for=\\\"year\\\"&gt;Year&lt;/label&gt;\\r\\n            &lt;/div&gt;\\r\\n            &lt;div class=\\\"ui-g-8\\\"&gt;\\r\\n                &lt;input pInputText id=\\\"year\\\" [(ngModel)]=\\\"car.year\\\" /&gt;\\r\\n            &lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n        &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n            &lt;div class=\\\"ui-g-4\\\"&gt;\\r\\n                &lt;label for=\\\"brand\\\"&gt;Brand&lt;/label&gt;\\r\\n            &lt;/div&gt;\\r\\n            &lt;div class=\\\"ui-g-8\\\"&gt;\\r\\n                &lt;input pInputText id=\\\"brand\\\" [(ngModel)]=\\\"car.brand\\\" /&gt;\\r\\n            &lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n        &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n            &lt;div class=\\\"ui-g-4\\\"&gt;\\r\\n                &lt;label for=\\\"color\\\"&gt;Color&lt;/label&gt;\\r\\n            &lt;/div&gt;\\r\\n            &lt;div class=\\\"ui-g-8\\\"&gt;\\r\\n                &lt;input pInputText id=\\\"color\\\" [(ngModel)]=\\\"car.color\\\" /&gt;\\r\\n            &lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/div&gt;\\r\\n    &lt;p-footer&gt;\\r\\n        &lt;div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\"&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"fa fa-close\\\" (click)=\\\"delete()\\\" label=\\\"Delete\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"fa fa-check\\\" (click)=\\\"save()\\\" label=\\\"Save\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/p-footer&gt;\\r\\n&lt;/p-dialog&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table</span>\\r\\n        <span>Table displays data in tabular format.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p-table [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Brand</th>\\r\\n                <th>Color</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-car>\\r\\n            <tr>\\r\\n                <td>{{car.vin}}</td>\\r\\n                <td>{{car.year}}</td>\\r\\n                <td>{{car.brand}}</td>\\r\\n                <td>{{car.color}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Dynamic Columns</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                     {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;TableModule&#125; from 'primeng/table';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Table requires a value as an array of objects and templates for the presentation. Throughout the samples, a car interface having\\r\\n            vin, brand, year and color properties is used to define an object to be displayed by the table. Cars are loaded by a CarService that\\r\\n            connects to a server to fetch the data.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport interface Car &#123;\\r\\n    vin;\\r\\n    year;\\r\\n    brand;\\r\\n    color;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123; HttpClient &#125; from '@angular/common/http';\\r\\nimport &#123; Injectable &#125; from '@angular/core';\\r\\n\\r\\nimport &#123; Car &#125; from '../domain/car';\\r\\n\\r\\n@Injectable()\\r\\nexport class CarService &#123;\\r\\n\\r\\n    constructor(private http: HttpClient) &#123;&#125;\\r\\n\\r\\n    getCarsSmall() &#123;\\r\\n        return this.http.get('/showcase/resources/data/cars-small.json')\\r\\n                    .toPromise()\\r\\n                    .then(res => &lt;Car[]&gt; res.data)\\r\\n                    .then(data => &#123; return data; &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>Following sample has a table of 4 columns and retrieves the data from a service on ngOnInit.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>List of cars are bound to the value property whereas <i>header</i> and <i>body</i> templates are used to define the content of these sections.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <h3>Dynamic Columns</h3>\\r\\n        <p>Instead of configuring columns one by one, a simple ngFor can be used to implement dynamic columns. cols property below is an array of objects that represent a column,\\r\\n            only property that table component uses is field, rest of the properties like header depend on your choice.\\r\\n        </p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class DynamicColumnsDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>There are two ways to render dynamic columns, since cols property is in the scope of component you can just simply bind it to ngFor directive to generate the structure.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of cols\\\"&gt;\\r\\n                    &#123;&#123;car[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Other alternative is binding the cols array to the columns property and then defining a template variable to access it within your templates.\\r\\n                There are 3 cases where this is required which are csv export, reorderable columns and global filtering without the globalFilterFields property.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                    &#123;&#123;car[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Tip: Use ngSwitch to customize the column content per dynamic column.</p>\\r\\n\\r\\n            <h3>Table Layout</h3>\\r\\n            <p>For performance reasons, default table-layout is fixed meaning the cell widths do not depend on their content. If you require cells to scale based on their contents\\r\\n                set <i>autoLayout</i> property to true. Note that Scrollable and/or Resizable tables do not support auto layout due to technical reasons.\\r\\n            </p>\\r\\n\\r\\n            <h3>Templates</h3>\\r\\n            <p>Table is a template driven component with named templates such as header and body that we've used so far. Templates grant a great level of customization and flexibility\\r\\n                where you have total control over the presentation while table handles the features such as paging, sorting, filtering and more. This speeds up development without sacrifing\\r\\n                flexibility. Here is the full list of available templates.</p>\\r\\n\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>caption</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Caption content of the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>header</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the thead element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>body</td>\\r\\n                            <td>$implicit: Data of the row <br>\\r\\n                                rowIndex: Index of the row <br>\\r\\n                                columns: Columns collection <br>\\r\\n                                expanded: Whether the row is expanded\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>footer</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the tfoot element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>summary</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Summary section to display below the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>colgroup</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>ColGroup element of the table to customize columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowexpansion</td>\\r\\n                            <td>$implicit: Data of the row <br>\\r\\n                                rowIndex: Index of the row <br>\\r\\n                                columns: Columns collection <br>\\r\\n                            </td>\\r\\n                            <td>Content of an extended row.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenrows</td>\\r\\n                            <td>$implicit: Data of the row <br>\\r\\n                                rowIndex: Index of the row <br>\\r\\n                                columns: Columns collection<br>\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element to display frozen rows.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenheader</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the thead element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenbody</td>\\r\\n                            <td>$implicit: Data of the row <br>\\r\\n                                rowIndex: Index of the row <br>\\r\\n                                columns: Columns collection <br>\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenfooter</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>Content of the tfoot element in frozen side.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozencolgroup</td>\\r\\n                            <td>$implicit: Columns</td>\\r\\n                            <td>ColGroup element of the table to customize frozen columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>emptymessage</td>\\r\\n                            <td>$implicit: Columns <br />\\r\\n                                frozen: Whether the body belongs to the frozen part of the table.</td>\\r\\n                            <td>Content to display when there is no value to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorleft</td>\\r\\n                            <td>state: $implicit\\r\\n                                state.page: Current page<br />\\r\\n                                state.pageCount: Total page count<br />\\r\\n                                state.rows: Rows per page<br />\\r\\n                                state.first: Index of the first records<br />\\r\\n                                state.totalRecords: Number of total records<br />\\r\\n                            </td>\\r\\n                            <td>Custom content for the left section of the paginator.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorright</td>\\r\\n                            <td>state: $implicit\\r\\n                                state.page: Current page<br />\\r\\n                                state.pageCount: Total page count<br />\\r\\n                                state.rows: Rows per page<br />\\r\\n                                state.first: Index of the first records<br />\\r\\n                                state.totalRecords: Number of total records<br />\\r\\n                            </td>\\r\\n                            <td>Custom content for the right section of the paginator.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loadingbody</td>\\r\\n                            <td>columns: Columns collection <br>\\r\\n                            </td>\\r\\n                            <td>Content of the tbody element to show when data is being loaded in virtual scroll mode.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Change Detection</h3>\\r\\n            <p>Table may need to be aware of changes in its value in some cases such as reapplying sort. For the sake of performance, this is only done when the reference of the value changes meaning a\\r\\n                setter is used instead of ngDoCheck/IterableDiffers which can reduce performance. So when you manipulate the value such as removing or adding an item, instead of using array methods such as push, splice\\r\\n                create a new array reference using a spread operator or similar.\\r\\n            </p>\\r\\n\\r\\n            <h3>Sections</h3>\\r\\n            <p>Table offers various templates to display additional information about the data such as a caption or summary.</p>\\r\\n\\r\\n <pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/sections']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Grouping</h3>\\r\\n            <p>Columns can easily be grouped using templating. Let's start with sample data of sales of brands per year.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableColGroupDemo implements OnInit &#123;\\r\\n\\r\\n    sales: any[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.sales = [\\r\\n            &#123; brand: 'Apple', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342' &#125;,\\r\\n            &#123; brand: 'Samsung', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\r\\n            &#123; brand: 'Microsoft', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\r\\n            &#123; brand: 'Philips', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323,' &#125;,\\r\\n            &#123; brand: 'Song', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\r\\n            &#123; brand: 'LG', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\r\\n            &#123; brand: 'Sharp', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\r\\n            &#123; brand: 'Panasonic', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\r\\n            &#123; brand: 'HTC', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\r\\n            &#123; brand: 'Toshiba', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"sales\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-sale&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearProfit&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearProfit&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\r\\n            &lt;td&gt;$506,202&lt;/td&gt;\\r\\n            &lt;td&gt;$531,020&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/colgroup']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Row Grouping</h3>\\r\\n            <p>Templating features can also be used to implement row grouping functionality, here is an example implementation that uses a metadata object\\r\\n                to keep at what index a group starts and how many items it has.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableRowGroupDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    rowGroupMetadata: any;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => &#123;\\r\\n            this.cars = cars;\\r\\n            this.updateRowGroupMetaData();\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    onSort() &#123;\\r\\n        this.updateRowGroupMetaData();\\r\\n    &#125;\\r\\n\\r\\n    updateRowGroupMetaData() &#123;\\r\\n        this.rowGroupMetadata = &#123;&#125;;\\r\\n        if (this.cars) &#123;\\r\\n            for (let i = 0; i &lt; this.cars.length; i++) &#123;\\r\\n                let rowData = this.cars[i];\\r\\n                let brand = rowData.brand;\\r\\n                if (i == 0) &#123;\\r\\n                    this.rowGroupMetadata[brand] = &#123; index: 0, size: 1 &#125;;\\r\\n                &#125;\\r\\n                else &#123;\\r\\n                    let previousRowData = this.cars[i - 1];\\r\\n                    let previousRowGroup = previousRowData.brand;\\r\\n                    if (brand === previousRowGroup)\\r\\n                        this.rowGroupMetadata[brand].size++;\\r\\n                    else\\r\\n                        this.rowGroupMetadata[brand] = &#123; index: i, size: 1 &#125;;\\r\\n                &#125;\\r\\n            &#125;\\r\\n        &#125;\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Using this metadata rows can be grouped using a subheader that displays the group. Note that grouped data should be sorted so enable sortField\\r\\n            so that table applies sorting before grouping if your data is not sorted.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr class=\\\"ui-widget-header\\\" *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\"&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;\\r\\n                &lt;span style=\\\"font-weight:bold\\\"&gt;&#123;&#123;rowData.brand&#125;&#125;&lt;/span&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<p>An alternative grouping could be using rowspans for the group field.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\" [attr.rowspan]=\\\"rowGroupMetadata[rowData.brand].size\\\"&gt;\\r\\n                &#123;&#123;rowData.brand&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/rowgroup']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Multi Field grouping</h3>\\r\\n            <p>Previous example uses a single field to group the rows however nothing limits you to implement multiple field grouping as well. Similarly to single\\r\\n                grouping, your data should be sorted first, you may use the built-in multiSorting or provide it sorted to the table and create a rowGroupMetadata\\r\\n                for multiple fields.\\r\\n            </p>\\r\\n\\r\\n            <h3>Paginator</h3>\\r\\n            <p>Pagination is enabled by setting paginator property to true, rows property defines the number of rows per page and pageLinks specify the the number\\r\\n                of page links to display. See <a [routerLink]=\\\"['/paginator']\\\">paginator</a> component for more information.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Paginator can also be controlled via model using a binding to the first property where changes trigger a pagination.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [first]=\\\"first\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TablePageDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    first: number = 0;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n    &#125;\\r\\n\\r\\n    reset() &#123;\\r\\n        this.first = 0;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Paginator accepts custom content for the left and the right side via named templates.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [first]=\\\"first\\\"&gt;\\r\\n&lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n    &lt;tr&gt;\\r\\n        &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;col.header&#125;&#125;\\r\\n        &lt;/th&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n    &lt;tr&gt;\\r\\n        &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n        &lt;/td&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;ng-template pTemplate=\\\"paginatorleft\\\" let-state&gt;\\r\\n    &#123;&#123;state.first&#125;&#125;\\r\\n    &lt;button type=\\\"button\\\" pButton icon=\\\"fa-refresh\\\"&gt;&lt;/button&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;ng-template pTemplate=\\\"paginatorright\\\"&gt;\\r\\n    &lt;button type=\\\"button\\\" pButton icon=\\\"fa-cloud-upload\\\"&gt;&lt;/button&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Paginator templates gets the paginator state as an implicit variable that provides the following properties</p>\\r\\n            <ul>\\r\\n                <li>first</li>\\r\\n                <li>rows</li>\\r\\n                <li>page</li>\\r\\n                <li>totalRecords</li>\\r\\n            </ul>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/page']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Sorting</h3>\\r\\n            <p>A column can be made sortable by adding the pSortableColumn directive whose value is the field to sort against and a sort indicator via p-sortIcon component. For dynamic columns,\\r\\n                setting pSortableColumnDisabled property as true disables sorting for that particular column.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>Default sorting is executed on a single column, in order to enable multiple field sorting, set sortMode property to \\\"multiple\\\" and use metakey\\r\\n            when clicking on another column.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" sortMode=\\\"multiple\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>In case you'd like to display the table as sorted by default initially on load, use the sortField-sortOrder properties in single mode.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" sortField=\\\"year\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>In multiple mode, use the multiSortMeta property and bind an array of SortMeta objects.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" sortMode=\\\"multiple\\\" [multiSortMeta]=\\\"multiSortMeta\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nthis.multiSortMeta = [];\\r\\nthis.multiSortMeta.push(&#123;field: 'year', order: 1&#125;);\\r\\nthis.multiSortMeta.push(&#123;field: 'brand', order: -1&#125;);\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Instead of using the built-in sorting algorithm a custom sort can be attached by enabling customSort property and defining a sortFunction implementation. This function gets a SortEvent instance\\r\\n                that provides the data to sort, sortField, sortOrder and multiSortMeta.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class CustomTableSortDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    customSort(event: SortEvent) &#123;\\r\\n        //event.data = Data to sort\\r\\n        //event.mode = 'single' or 'multiple' sort mode\\r\\n        //event.field = Sort field in single sort\\r\\n        //event.order = Sort order in single sort\\r\\n        //event.multiSortMeta = SortMeta array in multiple sort\\r\\n\\r\\n        event.data.sort((data1, data2) => &#123;\\r\\n            let value1 = data1[event.field];\\r\\n            let value2 = data2[event.field];\\r\\n            let result = null;\\r\\n\\r\\n            if (value1 == null && value2 != null)\\r\\n                result = -1;\\r\\n            else if (value1 != null && value2 == null)\\r\\n                result = 1;\\r\\n            else if (value1 == null && value2 == null)\\r\\n                result = 0;\\r\\n            else if (typeof value1 === 'string' && typeof value2 === 'string')\\r\\n                result = value1.localeCompare(value2);\\r\\n            else\\r\\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\\r\\n\\r\\n            return (event.order * result);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" (sortFunction)=\\\"customSort($event)\\\" [customSort]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>For screen reader support of sortable headers, use ariaLabel, ariaLabelDesc and ariaLabelAsc properties\\r\\n                on p-sortIcon component to define aria labels for unsorted, descending and ascending states respectively.</p>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/sort']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Filtering</h3>\\r\\n            <p>Filtering is enabled by defining the filter and calling filter method on the local template variable of the table with value, column field and match mode parameters. Available match modes are\\r\\n            \\\"startsWith\\\", \\\"contains\\\", \\\"endsWith\\\", \\\"equals\\\", \\\"notEquals\\\", \\\"in\\\", \\\"lt\\\", \\\"lte\\\", \\\"gt\\\" and \\\"gte\\\". Following is an example that utilizes various PrimeNG form components as filters.</p>\\r\\n\\r\\n            <p>An optional global filter feature is available to search all fields with the same query, to enable this place an input component and call the filterGlobal function with value and match mode properties on your event of choice.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table #tt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;i class=\\\"fa fa-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\r\\n        &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\"&gt;\\r\\n                &lt;input *ngSwitchCase=\\\"'vin'\\\" pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\"&gt;\\r\\n                &lt;div *ngSwitchCase=\\\"'year'\\\"&gt;\\r\\n                    &#123;&#123;yearFilter&#125;&#125;\\r\\n                    &lt;i class=\\\"fa fa-close\\\" (click)=\\\"yearFilter=null;tt.filter(null, col.field, col.filterMatchMode)\\\"&gt;&lt;/i&gt;\\r\\n                    &lt;p-slider [style]=\\\"&#123;'width':'100%','margin-top':'8px'&#125;\\\" [(ngModel)]=\\\"yearFilter\\\" [min]=\\\"1970\\\" [max]=\\\"2010\\\" (onChange)=\\\"onYearChange($event, dt)\\\"&gt;&lt;/p-slider&gt;\\r\\n                &lt;/div&gt;\\r\\n                &lt;p-dropdown *ngSwitchCase=\\\"'brand'\\\" [options]=\\\"brands\\\" [style]=\\\"&#123;'width':'100%'&#125;\\\" (onChange)=\\\"tt.filter($event.value, col.field, 'equals')\\\"&gt;&lt;/p-dropdown&gt;\\r\\n                &lt;p-multiSelect *ngSwitchCase=\\\"'color'\\\" [options]=\\\"colors\\\" defaultLabel=\\\"All Colors\\\" (onChange)=\\\"tt.filter($event.value, col.field, 'in')\\\"&gt;&lt;/p-multiSelect&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableFilterDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    brands: SelectItem[];\\r\\n\\r\\n    colors: SelectItem[];\\r\\n\\r\\n    yearFilter: number;\\r\\n\\r\\n    yearTimeout: any;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\\r\\n\\r\\n        this.brands = [\\r\\n            &#123; label: 'All Brands', value: null &#125;,\\r\\n            &#123; label: 'Audi', value: 'Audi' &#125;,\\r\\n            &#123; label: 'BMW', value: 'BMW' &#125;,\\r\\n            &#123; label: 'Fiat', value: 'Fiat' &#125;,\\r\\n            &#123; label: 'Honda', value: 'Honda' &#125;,\\r\\n            &#123; label: 'Jaguar', value: 'Jaguar' &#125;,\\r\\n            &#123; label: 'Mercedes', value: 'Mercedes' &#125;,\\r\\n            &#123; label: 'Renault', value: 'Renault' &#125;,\\r\\n            &#123; label: 'VW', value: 'VW' &#125;,\\r\\n            &#123; label: 'Volvo', value: 'Volvo' &#125;\\r\\n        ];\\r\\n\\r\\n        this.colors = [\\r\\n            &#123; label: 'White', value: 'White' &#125;,\\r\\n            &#123; label: 'Green', value: 'Green' &#125;,\\r\\n            &#123; label: 'Silver', value: 'Silver' &#125;,\\r\\n            &#123; label: 'Black', value: 'Black' &#125;,\\r\\n            &#123; label: 'Red', value: 'Red' &#125;,\\r\\n            &#123; label: 'Maroon', value: 'Maroon' &#125;,\\r\\n            &#123; label: 'Brown', value: 'Brown' &#125;,\\r\\n            &#123; label: 'Orange', value: 'Orange' &#125;,\\r\\n            &#123; label: 'Blue', value: 'Blue' &#125;\\r\\n        ];\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    onYearChange(event, dt) &#123;\\r\\n        if (this.yearTimeout) &#123;\\r\\n            clearTimeout(this.yearTimeout);\\r\\n        &#125;\\r\\n\\r\\n        this.yearTimeout = setTimeout(() => &#123;\\r\\n            tt.filter(event.value, 'year', 'gt');\\r\\n        &#125;, 250);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>If you have static columns and need to use global filtering, globalFilterFields property must be defined to configure which fields should be used in global filtering. Another\\r\\n                use case of this property is to change the fields to utilize in global filtering with dynamic columns.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [globalFilterFields]=\\\"['vin','year']\\\"&gt;\\r\\n    //content\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/filter']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Selection</h3>\\r\\n            <p>Table provides built-in single and multiple selection features where selected rows are bound to the selection property and onRowSelect-onRowUnselect events\\r\\n            are provided as optional callbacks. In order to enable this feature, define a selectionMode, bind a selection reference and add pSelectableRow directive\\r\\n            whose value is the rowData to the rows that can be selected. Additionally if you prefer double click use pSelectableRowDblClick directive instead and\\r\\n            to disable selection events on a particular row use pSelectableRowDisabled. In both cases optional\\r\\n            pSelectableRowIndex property is avaiable to access the row index. By default each row click adds or removes the row from the selection, if you prefer a classic\\r\\n            metaKey based selection approach enable metaKeySelection true so that multiple selection or unselection of a row requires metaKey to be pressed. Note that, on touch enabled\\r\\n            devices, metaKey based selection is turned off automatically as there is no metaKey in devices such as mobile phones.</p>\\r\\n\\r\\n            <p>Alternative to the row click, radiobutton or checkbox elements can be used to implement row selection.</p>\\r\\n\\r\\n            <p>When resolving if a row is selected, by default Table compares selection array with the datasource which may cause a performance issue with huge datasets that do not use pagination.\\r\\n                If available the fastest way is to use dataKey property that identifies a unique row so that Table can avoid comparing arrays as internally a map instance is used instead of looping arrays, on the other hand\\r\\n                if dataKey cannot be provided consider using compareSelectionBy property as \\\"equals\\\" which uses reference comparison instead of the default \\\"deepEquals\\\" comparison. Latter is slower since it checks all properties.\\r\\n            </p>\\r\\n\\r\\n            <p>In single mode, selection binding is an object reference.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    selectedCar: Car;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>In multiple mode, selection binding should be an array. Note that if you require shiftKey based range selection, pass the rowIndex to the SelectableRow directive.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    selectedCars: Car[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Single selection using a radiobutton can be done by using p-tableRadioButton component.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCar\\\" dataKey=\\\"vin\\\"&gt;\\r\\n&lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n    &lt;tr&gt;\\r\\n        &lt;th style=\\\"width: 2.25em\\\"&gt;&lt;/th&gt;\\r\\n        &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;col.header&#125;&#125;\\r\\n        &lt;/th&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n    &lt;tr&gt;\\r\\n        &lt;td&gt;\\r\\n            &lt;p-tableRadioButton [value]=\\\"rowData\\\"&gt;&lt;/p-tableRadioButton&gt;\\r\\n        &lt;/td&gt;\\r\\n        &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n        &lt;/td&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Car: &#123;&#123;selectedCar4 ? selectedCar4.vin + ' - ' + selectedCar4.brand + ' - ' + selectedCar4.year + ' - ' + selectedCar4.color: 'none'&#125;&#125;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n                <p>Similarly p-tableCheckbox and p-tableHeaderCheckbox elements are provide to implement checkbox based multiple selection.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCars\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width: 2.25em\\\"&gt;\\r\\n                &lt;p-tableHeaderCheckbox&gt;&lt;/p-tableHeaderCheckbox&gt;\\r\\n            &lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-tableCheckbox [value]=\\\"rowData\\\"&gt;&lt;/p-tableCheckbox&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Both p-tableCheckbox and p-tableRadioButton components can be disabled using their property with the same name to prevent selection of a particular row. In addition, index of the row\\r\\n                needs to be provided to the checkbox/radiobutton components so that they can be available at the onRowSelect or onRowUnselect events of the Table.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\" let-columns=\\\"columns\\\"&gt;\\r\\n    &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n        &lt;td&gt;\\r\\n            &lt;p-tableCheckbox [value]=\\\"rowData\\\" [disabled]=\\\"rowData.year > 2010\\\" [index]=\\\"rowIndex\\\"&gt;&lt;/p-tableCheckbox&gt;\\r\\n        &lt;/td&gt;\\r\\n        &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n        &lt;/td&gt;\\r\\n    &lt;/tr&gt;\\r\\n&lt;/ng-template&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/selection']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>ContextMenu</h3>\\r\\n            <p>Table has exclusive integration with contextmenu component. In order to attach a menu to a table, add pContextMenuRow directive to the rows that can be selected with context menu, define a local template\\r\\n            variable for the menu and bind it to the contextMenu property of the table. This enables displaying the menu whenever a row is right clicked. Optional\\r\\n            pContextMenuRowIndex property is avaiable to access the row index. A separate contextMenuSelection\\r\\n            property is used to get a hold of the right clicked row. For dynamic columns, setting pContextMenuRowDisabled property as true disables context menu for that particular row.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(contextMenuSelection)]=\\\"selectedCar\\\" [contextMenu]=\\\"cm\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pContextMenuRow]=\\\"rowData\\\" [pContextMenuRowIndex]=\\\"rowIndex\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>By default context menu uses a different property called contextMenuSelection as above, this means when row selection mode is also enabled, the two properties, both selection and contextMenuSelection need to be maintained. \\r\\n                In case you prefer to configure Table to manage the same selection property both on row click and context menu, set contextMenuSelectionMode as \\\"joint\\\". Table below has both selectionMode and contextMenu enabled where\\r\\n                both of these features update the same selection object.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar\\\" [contextMenu]=\\\"cm\\\" contextMenuSelectionMode=\\\"joint\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\" [pContextMenuRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/contextmenu']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Cell Editing</h3>\\r\\n            <p>Incell editing is enabled by adding pEditableColumn directive to an editable cell that has a p:cellEditor helper\\r\\n                component to define the input-output templates for the edit and view modes respectively.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData.vin\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.vin&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" required&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.year&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData.brand\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.brand&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.color&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>If you require the edited row data or the selected field in the <i>onEditInit</i>, <i>onEditComplete</i>, and <i>onEditCancel</i> events, bind the row data to the pEditableColumn directive and the field to the pEditableColumnField directive.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;td [pEditableColumn]=\\\"rowData\\\" [pEditableColumnField]=\\\"'year'\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>When opening a cell for editing, the table will automatically focus the first <i>input</i>, <i>textarea</i>, or <i>select</i> element inside the output template.\\r\\n               If you want to override this default behavior, you can pass a custom selector for the elements to focus into the pFocusCellSelector directive.\\r\\n               This is useful when you would like the Tab and Shift+Tab keyboard navigation to focus on buttons or custom edit controls.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;td [pFocusCellSelector]=\\\"'input, .custom-edit-control'\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Row Editing</h3>\\r\\n            <p>Row editing toggles the visibility of the all editors in the row at once and provides additional options to save and cancel editing. Row editing functionality\\r\\n                is enabled by setting the <b></b> to \\\"row\\\" on table, defining a dataKey to uniquely identify a row, adding pEditableRow directive to the editable rows and defining the UI Controls with <b>pInitEditableRow</b>, <b>pSaveEditableRow</b> and <b>pCancelEditableRow</b> directives respectively.\\r\\n            </p>\\r\\n            <p>\\r\\n                Save and Cancel functionality implementation is left to the page author to provide more control over the editing business logic, example below utilizes\\r\\n                a simple implementation where a row is cloned when editing is initialized and is saved or restored depending on the result of the editing. An implicit variable called \\\"editing\\\" is passed to the body template \\r\\n                so you may come up with your own UI controls that implement editing based on your own requirements such as adding validations and styling. Note that <b>pSaveEditableRow</b> only switches the row to back view mode when there are no validation errors.\\r\\n            </p>\\r\\n            <p>Moreover you may use setting <b>pEditableRowDisabled</b> property as true to disable editing for that particular row and \\r\\n                in case you need to display rows in edit mode by default use <b>editingRowKeys</b> property which is a map whose key is the dataKey of the record where value is any arbitrary number greater than zero.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" dataKey=\\\"vin\\\" editMode=\\\"row\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n            &lt;th style=\\\"width:8em\\\"&gt;&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-editing=\\\"editing\\\" let-ri=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pEditableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &#123;&#123;rowData.vin&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" year&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.year&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;p-dropdown [options]=\\\"brands\\\" [(ngModel)]=\\\"rowData.brand\\\" [style]=\\\"&#123;'width':'100%'&#125;\\\"&gt;&lt;/p-dropdown&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.brand&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.color&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td style=\\\"text-align:center\\\"&gt;\\r\\n                &lt;button *ngIf=\\\"!editing\\\" pButton type=\\\"button\\\" pInitEditableRow icon=\\\"pi pi-pencil\\\" class=\\\"ui-button-info\\\" (click)=\\\"onRowEditInit(rowData)\\\"&gt;&lt;/button&gt;\\r\\n                &lt;button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pSaveEditableRow icon=\\\"pi pi-check\\\" class=\\\"ui-button-success\\\" style=\\\"margin-right: .5em\\\" (click)=\\\"onRowEditSave(rowData)\\\"&gt;&lt;/button&gt;\\r\\n                &lt;button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pCancelEditableRow icon=\\\"pi pi-times\\\" class=\\\"ui-button-danger\\\" (click)=\\\"onRowEditCancel(rowData, ri)\\\"&gt;&lt;/button&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableEditDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    brands: SelectItem[];\\r\\n\\r\\n    clonedCars: &#123; [s: string]: Car; &#125; = &#123;&#125;;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.brands = [\\r\\n            &#123;label: 'Audi', value: 'Audi'&#125;,\\r\\n            &#123;label: 'BMW', value: 'BMW'&#125;,\\r\\n            &#123;label: 'Fiat', value: 'Fiat'&#125;,\\r\\n            &#123;label: 'Ford', value: 'Ford'&#125;,\\r\\n            &#123;label: 'Honda', value: 'Honda'&#125;,\\r\\n            &#123;label: 'Jaguar', value: 'Jaguar'&#125;,\\r\\n            &#123;label: 'Mercedes', value: 'Mercedes'&#125;,\\r\\n            &#123;label: 'Renault', value: 'Renault'&#125;,\\r\\n            &#123;label: 'VW', value: 'VW'&#125;,\\r\\n            &#123;label: 'Volvo', value: 'Volvo'&#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    onRowEditInit(car: Car) &#123;\\r\\n        this.clonedCars[car.vin] = &#123;...car&#125;;\\r\\n    &#125;\\r\\n\\r\\n    onRowEditSave(car: Car) &#123;\\r\\n        if (car.year > 0)\\r\\n            delete this.clonedCars[car.vin];\\r\\n        else\\r\\n            this.messageService.add(&#123;severity:'error', summary: 'Error', detail:'Year is required'&#125;);\\r\\n    &#125;\\r\\n\\r\\n    onRowEditCancel(car: Car, index: number) &#123;\\r\\n        this.cars[index] = this.clonedCars[car.vin];\\r\\n        delete this.clonedCars[car.vin];\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/edit']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Expandable Rows</h3>\\r\\n            <p>Row expansion allows displaying detailed content for a particular row. To use this feature, add a template named rowexpansion and\\r\\n                use the pRowToggler directive whose value is the row data instance on an element of your choice whose click event toggles the expansion. This\\r\\n            enables providing your custom UI such as buttons, links and so on. Example below uses an anchor with an icon as a toggler. Setting pRowTogglerDisabled as true disables the toggle event for the element.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width: 2.25em\\\"&gt;&lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\"&gt;\\r\\n                    &lt;i [ngClass]=\\\"expanded ? 'fa fa-fw fa-chevron-circle-down' : 'fa fa-fw fa-chevron-circle-right'\\\"&gt;&lt;/i&gt;\\r\\n                &lt;/a&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td [attr.colspan]=\\\"columns.length + 1\\\"&gt;\\r\\n                &lt;div class=\\\"ui-g ui-fluid\\\" style=\\\"font-size:16px;padding:20px\\\"&gt;\\r\\n                    &lt;div class=\\\"ui-g-12 ui-md-3\\\" style=\\\"text-align:center\\\"&gt;\\r\\n                        &lt;img [attr.alt]=\\\"rowData.brand\\\" src=\\\"assets/showcase/images/demo/car/&#123;&#123;rowData.brand&#125;&#125;.png\\\"&gt;\\r\\n                    &lt;/div&gt;\\r\\n                    &lt;div class=\\\"ui-g-12 ui-md-9\\\"&gt;\\r\\n                        &lt;div class=\\\"ui-g\\\"&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Vin:&lt;/b&gt; &#123;&#123;rowData.vin&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Vin:&lt;/b&gt; &#123;&#123;rowData.color&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Brand:&lt;/b&gt; &#123;&#123;rowData.brand&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Color:&lt;/b&gt; &#123;&#123;rowData.color&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                        &lt;/div&gt;\\r\\n                    &lt;/div&gt;\\r\\n                &lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Multiple rows can be expanded at the same time, if you prefer a single row expansion at any time set rowExpandMode property to \\\"single\\\". All rows\\r\\n                are collapsed initially and providing expandedRowKeys property whose value is the dataKeys of the rows to be expanded enables rendering these rows as expanded. A dataKey must be defined\\r\\n                for this feature.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" dataKey=\\\"vin\\\" [expandedRowKeys]=\\\"expandedRows\\\"&gt;\\r\\n   ...\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/rowexpansion']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Resize</h3>\\r\\n            <p>Columns can be resized using drag drop by setting the resizableColumns to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and\\r\\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width. onColumnResize\\r\\n            is a callback that passes the resized column header as a parameter. For dynamic columns, setting pResizableColumnDisabled property as true disables resizing for that particular column.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>It is important to note that when you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width:20%\\\"&gt;Vin&lt;/th&gt;\\r\\n            &lt;th style=\\\"width:30%\\\"&gt;Year&lt;/th&gt;\\r\\n            &lt;th style=\\\"width:15%\\\"&gt;Brand&lt;/th&gt;\\r\\n            &lt;th style=\\\"width:35%\\\"&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p><b>Note:</b> Scrollable tables require a column group to support resizing.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pResizableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" class=\\\"ui-resizable-column\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/colresize']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Column Reordering</h3>\\r\\n            <p>Columns can be reordered using drag drop by setting the reorderableColumns to true and adding pReorderableColumn directive to the columns that can be dragged. Note that\\r\\n                columns should be dynamic for reordering to work. For dynamic columns, setting pReorderableColumnDisabled property as true disables reordering for that particular column.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [reorderableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/colreorder']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Rows Reordering</h3>\\r\\n            <p>Row reordering is enabled by adding pReorderableRow directive with a row index binding to the rows that can be reordered with drag and drop. The optional pReorderableRowDisabled property is available\\r\\n                to disable dragging for a particular row. In addition, drag handle should get pReorderableRowHandle directive to specify which element is used to initiate the dragging.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width:2em\\\"&gt;&lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-index=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pReorderableRow]=\\\"index\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;i class=\\\"fa fa-bars\\\" pReorderableRowHandle&gt;&lt;/i&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/reorder']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Data Export</h3>\\r\\n            <p>Table can export its data in CSV format using the built-in exportCSV() function. By default whole data is exported, if you'd like to export only the selection then pass a config object with selectionOnly property as true. Note that\\r\\n                columns should be dynamic for export functionality to work and column objects must define field/header properties.\\r\\n            </p>\\r\\n\\r\\n            <p>PDF and EXCEL export are also available using 3rd party libraries such as jspdf. Example below demonstrates how to implement all three export options.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table #dt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div class=\\\"ui-helper-clearfix\\\" style=\\\"text-align: left\\\"&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-o\\\" iconPos=\\\"left\\\" label=\\\"CSV\\\" (click)=\\\"dt.exportCSV()\\\" style=\\\"margin-right: 0.5em;\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-excel\\\" iconPos=\\\"left\\\" label=\\\"EXCEL\\\" (click)=\\\"exportExcel()\\\" style=\\\"margin-right: 0.5em;\\\" class=\\\"ui-button-success\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-pdf\\\" iconPos=\\\"left\\\" label=\\\"PDF\\\" (click)=\\\"exportPdf()\\\" class=\\\"ui-button-warning\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file\\\" iconPos=\\\"left\\\" label=\\\"CSV - Selection Only\\\" (click)=\\\"dt.exportCSV(&#123;selectionOnly:true&#125;)\\\" style=\\\"float:right\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableExportDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    selectedCars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    columns: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.exportColumns = this.cols.map(col => (&#123;title: col.header, dataKey: col.field&#125;));\\r\\n    &#125;\\r\\n\\r\\n    exportPdf() &#123;\\r\\n        import(\\\"jspdf\\\").then(jsPDF => &#123;\\r\\n            import(\\\"jspdf-autotable\\\").then(x => &#123;\\r\\n                const doc = new jsPDF.default(0,0);\\r\\n                doc.autoTable(this.columns, this.cars);\\r\\n                doc.save('primengTable.pdf');\\r\\n            &#125;)\\r\\n        &#125;)\\r\\n    &#125;\\r\\n    \\r\\n    exportExcel() &#123;\\r\\n        import(\\\"xlsx\\\").then(xlsx => &#123;\\r\\n            const worksheet = xlsx.utils.json_to_sheet(this.getCars());\\r\\n            const workbook = &#123; Sheets: &#123; 'data': worksheet &#125;, SheetNames: ['data'] &#125;;\\r\\n            const excelBuffer: any = xlsx.write(workbook, &#123; bookType: 'xlsx', type: 'array' &#125;);\\r\\n            this.saveAsExcelFile(excelBuffer, \\\"primengTable\\\");\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    saveAsExcelFile(buffer: any, fileName: string): void &#123;\\r\\n        import(\\\"file-saver\\\").then(FileSaver => &#123;\\r\\n            let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\\r\\n            let EXCEL_EXTENSION = '.xlsx';\\r\\n            const data: Blob = new Blob([buffer], &#123;\\r\\n                type: EXCEL_TYPE\\r\\n            &#125;);\\r\\n            FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    getCars() &#123;\\r\\n        let cars = [];\\r\\n        for(let car of this.cars) &#123;\\r\\n            car.year = car.year.toString();\\r\\n            cars.push(car);\\r\\n        &#125;\\r\\n        return cars;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/export']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Scrolling</h3>\\r\\n            <p>Table supports both horizontal and vertical scrolling as well as frozen columns and rows. Additionally, virtualScroll mode enables dealing with large datasets by loading data on demand during scrolling.</p>\\r\\n\\r\\n            <p>Sample below uses vertical scrolling where headers are fixed and data is scrollable.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>In horizontal scrolling on the other hand, it is important to give fixed widths to columns. In general when customizing the column widths of scrollable tables,\\r\\n                use colgroup as below to avoid misalignment issues as it will apply both the header, body and footer sections which are different separate elements internally.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'500px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>Horizontal and Vertical scrolling can be combined as well on the same table.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars3\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'500px'&#125;\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        <p>Certain rows can be fixed by using the frozenValue property along with the \\\"frozenrows\\\" template.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars4\\\" [frozenValue]=\\\"frozenCars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenrows\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;b&gt;&#123;&#123;rowData[col.field]&#125;&#125;&lt;/b&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Particular columns can be made fixed where others remain scrollable, there are two ways to implement this functionality, either\\r\\n                define a frozenColumns property if your frozen columns are dynamic or use frozenbody template. The width of the frozen section also\\r\\n                must be defined with frozenWidth property. Templates including header, body and footer apply to the frozen section as well, however\\r\\n                if require different content for the frozen section use frozenheader, frozenbody and frozenfooter instead. First example below uses\\r\\n                dynamic frozen columns and second one demonstrates how to use frozen templates with column grouping.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [value]=\\\"cars5\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:200px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;p-table [value]=\\\"sales\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"150px\\\" frozenWidth=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenheader\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width:200px;height:84px\\\"&gt;Brand&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenbody\\\" let-sale&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.brand&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\r\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n            &lt;th&gt;Last Year&lt;/th&gt;\\r\\n            &lt;th&gt;This Year&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-sale&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearSale&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.lastYearProfit&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;sale.thisYearProfit&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>When frozen columns are enabled, frozen and scrollable cells may have content with varying height which leads to misalignment. To avoid a performance hit, Table avoids expensive calculations\\r\\n                to align the row heights as it can be easily done with CSS manually.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-css\\\" pCode ngNonBindable>\\r\\n.ui-table .ui-table-frozen-view .ui-table-tbody > tr > td,\\r\\n.ui-table .ui-table-unfrozen-view .ui-table-tbody > tr > td &#123;\\r\\n    height: 24px !important;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>When column widths need to vary or resizable columns is activated, use colgroup template to avoid misalignment issues and apply percentage values since table width is 100%.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Virtual Scrolling is used with lazy loading to fetch data on demand during scrolling. For smooth scrolling twice the amount of rows property is loaded\\r\\n                on a lazy load event. In addition, to avoid performance problems row height is not calculated automatically and should be provided using virtualRowHeight\\r\\n                property which defaults to 28px, in your row template also assign the height of the row with the same value for smooth scrolling.\\r\\n                Note that variable row height is not supported due to the nature of the virtual scrolling behavior.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"virtualCars\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\" [virtualRowHeight]=\\\"30\\\"\\r\\n    [virtualScroll]=\\\"true\\\" (onLazyLoad)=\\\"loadDataOnScroll($event)\\\" [lazy]=\\\"true\\\" [totalRecords]=\\\"totalRecords\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:30px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>Instead of using the built-in loading mask indicator, an special \\\"loadingbody\\\" template is available to provide feedback to the users\\r\\n                about the loading status of a scroll event.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"virtualCars\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\" [virtualScroll]=\\\"true\\\" (onLazyLoad)=\\\"loadDataOnScroll($event)\\\"\\r\\n    [lazy]=\\\"true\\\" [totalRecords]=\\\"totalRecords\\\" [virtualRowHeight]=\\\"34\\\" [showLoader]=\\\"false\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;div class=\\\"loading-text\\\"&gt;&lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/scroll']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Lazy Loading</h3>\\r\\n            <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\r\\n             onLazyLoad callback everytime paging, sorting and filtering happens. To implement lazy loading,\\r\\n            enable lazy attribute and provide a method callback using onLazyLoad that actually loads the data from a remote datasource. onLazyLoad gets an event object\\r\\n            that contains information about how the data should be loaded. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator\\r\\n            displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist.</p>\\r\\n\\r\\n            <pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadCarsLazy($event)\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [totalRecords]=\\\"totalRecords\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                 &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nloadData(event: LazyLoadEvent) &#123;\\r\\n    //event.first = First row offset\\r\\n    //event.rows = Number of rows per page\\r\\n    //event.sortField = Field name to sort in single sort mode\\r\\n    //event.sortOrder = Sort order as number, 1 for asc and -1 for dec in single sort mode\\r\\n    //multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.\\r\\n    //filters: Filters object having field as key and filter value, filter matchMode as value\\r\\n    //globalFilter: Value of the global filter if available\\r\\n    this.cars = //do a request to a remote datasource using a service and return the cars that match the lazy load criteria\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/lazy']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>TableState</h3>\\r\\n            <p>Stateful table allows keeping the state such as page, sort and filtering either at local storage or session storage so that when the page is visited again, table would render the data using its last settings.\\r\\n                Enabling state is easy as defining a unique \\\"stateKey\\\", the storage to keep the state is defined with the \\\"stateStorage\\\" property that accepts session for sessionStorage and local for localStorage. Currently following features\\r\\n                are supported by TableState; paging, sorting, filtering, column resizing, column reordering, row expansion and row selection.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table #dt1 [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" dataKey=\\\"vin\\\" [resizableColumns]=\\\"true\\\" [reorderableColumns]=\\\"true\\\"\\r\\n    selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar\\\" stateStorage=\\\"session\\\" stateKey=\\\"statedemo-session\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn pReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\" class=\\\"ui-fluid\\\"&gt;\\r\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"dt1.filter($event.target.value, col.field, col.filterMatchMode)\\\" [value]=\\\"dt1.filters[col.field]?.value\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/responsive']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Responsive</h3>\\r\\n            <p>Table columns are displayed as stacked in responsive mode if the screen size becomes smaller than a certain breakpoint value. This feature is enabled\\r\\n            by setting responsive to true and adding an element whose class name is \\\"ui-column-title\\\" to the body cells.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [responsive]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;span class=\\\"ui-column-title\\\"&gt;&#123;&#123;col.header&#125;&#125;&lt;/span&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>See the <a [routerLink]=\\\"['/table/responsive']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>EmptyMessage</h3>\\r\\n            <p>When there is no data, emptymessage template can be used to display a message.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"emptymessage\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td [attr.colspan]=\\\"columns.length\\\"&gt;\\r\\n                No records found\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Loading Status</h3>\\r\\n            <p>Table has a loading property, when enabled a spinner icon is displayed to indicate data load.\\r\\n                An optional loadingIcon property can be passed in case you'd like a different loading icon.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\" [loading]=\\\"loading\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableDemo implements OnInit &#123;\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.loading = true;\\r\\n        setTimeout(() => &#123;\\r\\n            this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n            this.loading = false;\\r\\n        &#125;, 1000);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Styling Certain Rows and Columns</h3>\\r\\n            <p>Certain rows and cells can easily be styled using templating features. In example below, the row whose vin property is '123' will get the 'success' style class. Example here\\r\\n                paint the background of the last cell using a colgroup and highlights rows whose year is older than 2000.\\r\\n            </p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col&gt;\\r\\n            &lt;col&gt;\\r\\n            &lt;col&gt;\\r\\n            &lt;col style=\\\"background-color:#FFD54F !important\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ngClass]=\\\"rowData.year &gt; 2010 ? 'old-car' : null\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" [ngClass]=\\\"rowData[col.field] &lt; 2000 ? 'very-old-car' : null\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>See the <a [routerLink]=\\\"['/table/style']\\\">live example.</a></p>\\r\\n\\r\\n            <h3>Performance Tips</h3>\\r\\n            <ul>\\r\\n                <li>When selection is enabled use dataKey to avoid deep checking when comparing objects.</li>\\r\\n                <li>Use rowTrackBy to avoid unnecessary dom operations.</li>\\r\\n                <li>Prefer lazy loading for large datasets.</li>\\r\\n            </ul>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>value</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>columns</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to represent dynamic columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenColumns</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to represent dynamic columns that are frozen.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenValue</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of objects to display as frozen.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tableStyle</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tableStyleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginator</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When specified as true, enables the pagination.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rows</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of rows to display per page.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>first</td>\\r\\n                            <td>number</td>\\r\\n                            <td>0</td>\\r\\n                            <td>Index of the first row to be displayed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>totalRecords</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of total records, defaults to length of value when not defined.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>pageLinks</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Number of page links to display in paginator.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowsPerPageOptions</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Array of integer/object values to display inside rows per page dropdown of paginator</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>alwaysShowPaginator</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to show it even there is only one page.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorPosition</td>\\r\\n                            <td>string</td>\\r\\n                            <td>bottom</td>\\r\\n                            <td>Position of the paginator, options are \\\"top\\\",\\\"bottom\\\" or \\\"both\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>currentPageReportTemplate</td>\\r\\n                            <td>string</td>\\r\\n                            <td>&#123;currentPage&#125; of &#123;totalPages&#125;</td>\\r\\n                            <td>Text to display the current page information.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>showCurrentPageReport</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to display current page report.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>single</td>\\r\\n                            <td>Defines whether sorting works on single column or on multiple columns.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortField</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Name of the field to sort data by default.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortOrder</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Order to sort when default sorting is enabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>multiSortMeta</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of SortMeta objects to sort the data by default in multiple sort mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowGroupMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Type of the row grouping, valid values are \\\"subheader\\\" and \\\"rowspan\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>defaultSortOrder</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Sort order to use when an unsorted column gets sorted by user interaction.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>customSort</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to use the default sorting or a custom one using sortFunction.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>sortFunction</td>\\r\\n                            <td>function</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A function to implement custom sorting, refer to sorting section for details.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selectionMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Specifies the selection mode, valid values are \\\"single\\\" and \\\"multiple\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selection</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Selected row in single mode or an array of values in multiple mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>contextMenuSelection</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Selected row with a context menu.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>contextMenuSelectionMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>separate</td>\\r\\n                            <td>Defines the behavior of context menu selection, in \\\"separate\\\" mode context menu updates contextMenuSelection propertty whereas in joint mode\\r\\n                                selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>dataKey</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A property to uniquely identify a record in data.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>metaKeySelection</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowTrackBy</td>\\r\\n                            <td>Function</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>lazy</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Defines if data is loaded and interacted with in lazy manner.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>lazyLoadOnInit</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to call lazy loading on initialization.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>compareSelectionBy</td>\\r\\n                            <td>string</td>\\r\\n                            <td>deepEquals</td>\\r\\n                            <td>Algorithm to define if a row is selected, valid values are \\\"equals\\\" that compares by reference and \\\"deepEquals\\\" that compares all fields.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>csvSeparator</td>\\r\\n                            <td>string</td>\\r\\n                            <td>,</td>\\r\\n                            <td>Character to use as the csv separator.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>exportFilename</td>\\r\\n                            <td>string</td>\\r\\n                            <td>download</td>\\r\\n                            <td>Name of the exported file.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>filters</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of FilterMetadata objects to provide external filters.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>filterDelay</td>\\r\\n                            <td>number</td>\\r\\n                            <td>300</td>\\r\\n                            <td>Delay in milliseconds before filtering the data.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>globalFilterFields</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of fields as string to use in global filtering.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>expandedRowKeys</td>\\r\\n                            <td>&#123;[s: string]: boolean;&#125;</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Map instance to keep the expanded rows where key of the map is the data key of the row.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowExpandMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>multiple</td>\\r\\n                            <td>Whether multiple rows can be expanded at any time. Valid values are \\\"multiple\\\" and \\\"single\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollable</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When specifies, enables horizontal and/or vertical scrolling.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollHeight</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Height of the scroll viewport in fixed pixels, percentage or a calc expression.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualScroll</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether the data should be loaded on demand during scroll.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualScrollDelay</td>\\r\\n                            <td>number</td>\\r\\n                            <td>150</td>\\r\\n                            <td>Delay in virtual scroll before doing a call to lazy load.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>virtualRowHeight</td>\\r\\n                            <td>number</td>\\r\\n                            <td>28</td>\\r\\n                            <td>Height of a row to use in calculations of virtual scrolling.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>frozenWidth</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Width of the frozen columns container.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>responsive</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Defines if the columns should be stacked in smaller screens.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>contextMenu</td>\\r\\n                            <td>ContextMenu</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Local ng-template varilable of a ContextMenu.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>resizableColumns</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, columns can be resized using drag and drop.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>columnResizeMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>fit</td>\\r\\n                            <td>Defines whether the overall table width should change on column resize, valid values are \\\"fit\\\" and \\\"expand\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>reorderableColumns</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, columns can be reordered using drag and drop.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loading</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Displays a loader to indicate data load is in progress.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>loadingIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>fa-circle-o-notch</td>\\r\\n                            <td>The icon to show while indicating data load is in progress.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>showLoader</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to show the loading mask when loading property is true.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>rowHover</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Adds hover effect to rows without the need for selectionMode. Note that tr elements that can be hovered need to have \\\"ui-selectable-row\\\" class for rowHover to work.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorDropdownAppendTo</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Target element to attach the paginator dropdown overlay, valid values are \\\"body\\\" or a local ng-template variable of another element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>paginatorDropdownScrollHeight</td>\\r\\n                            <td>string</td>\\r\\n                            <td>200px</td>\\r\\n                            <td>Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autoLayout</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether the cell widths scale according to their content or not.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>resetPageOnSort</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>When true, resets paginator to first page after sorting.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>exportFunction</td>\\r\\n                            <td>function</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A function to implement custom export. Need to return string value.<br/>\\r\\n                                event.data: Field data.<br>\\r\\n                                event.field: Column field.\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>stateKey</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Unique identifier of a stateful table to use in state storage.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>stateStorage</td>\\r\\n                            <td>string</td>\\r\\n                            <td>session</td>\\r\\n                            <td>Defines where a stateful table keeps its state, valid values are \\\"session\\\" for sessionStorage and \\\"local\\\" for localStorage.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>editMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>cell</td>\\r\\n                            <td>Defines the editing mode, valid values are \\\"cell\\\" and \\\"row\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>editingRowKeys</td>\\r\\n                            <td>&#123;[s: string]: boolean;&#125;</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Map instance to keep the rows being edited where key of the map is the data key of the row.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Parameters</th>\\r\\n                        <th>Description</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onRowSelect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.data: Selected data <br >\\r\\n                                event.type: Type of selection, valid values are \\\"row\\\", \\\"radiobutton\\\" and \\\"checkbox\\\"<br>\\r\\n                                event.index: Index of the row\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a row is selected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onRowUnselect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.data: Unselected data <br >\\r\\n                                event.type: Type of unselection, valid values are \\\"row\\\" and \\\"checkbox\\\"</td>\\r\\n                            <td>Callback to invoke when a row is unselected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onPage</td>\\r\\n                            <td>event.first: Index of first record in page<br>\\r\\n                                event.rows: Number of rows on the page</td>\\r\\n                            <td>Callback to invoke when pagination occurs.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onSort</td>\\r\\n                            <td>event.field: Field name of the sorted column<br>\\r\\n                                event.order: Sort order as 1 or -1<br>\\r\\n                                event.multisortmeta: Sort metadata in multi sort mode. See multiple sorting section for the structure of this object.</td>\\r\\n                            <td>Callback to invoke when a column gets sorted.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onFilter</td>\\r\\n                            <td>event.filters: Filters object having a field as the property key and an object with value, matchMode as the property value.<br>\\r\\n                                event.filteredValue: Filtered data after running the filtering.</td>\\r\\n                            <td>Callback to invoke when data is filtered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onLazyLoad</td>\\r\\n                            <td>event.first = First row offset <br>\\r\\n                                event.rows = Number of rows per page <br>\\r\\n                                event.sortField = Field name to sort with <br>\\r\\n                                event.sortOrder = Sort order as number, 1 for asc and -1 for dec <br>\\r\\n                                event.multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.<br>\\r\\n                                event.filters: FilterMetadata object having field as key and filter value, filter matchMode as value<br>\\r\\n                                event.globalFilter: Value of the global filter if available</td>\\r\\n                            <td>Callback to invoke when paging, sorting or filtering happens in lazy mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onRowExpand</td>\\r\\n                            <td>event.originalEvent: Browser event<br>\\r\\n                                data: Row data to expand.</td>\\r\\n                            <td>Callback to invoke when a row is expanded.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onRowCollapse</td>\\r\\n                            <td>event.originalEvent: Browser event<br>\\r\\n                                data: Row data to collapse.</td>\\r\\n                            <td>Callback to invoke when a row is collapsed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onContextMenuSelect</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.data: Selected data</td>\\r\\n                            <td>Callback to invoke when a row is selected with right click.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onColResize</td>\\r\\n                            <td>event.element: Resized column header <br>\\r\\n                                event.delta: Change of width in number of pixels</td>\\r\\n                            <td>Callback to invoke when a column is resized.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onColReorder</td>\\r\\n                            <td>event.dragIndex: Index of the dragged column <br>\\r\\n                                event.dropIndex: Index of the dropped column <br>\\r\\n                                event.columns: Columns array after reorder</td>\\r\\n                            <td>Callback to invoke when a column is reordered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onRowReorder</td>\\r\\n                            <td>event.dragIndex: Index of the dragged row<br>\\r\\n                                event.dropIndex: Index of the drop location</td>\\r\\n                            <td>Callback to invoke when a row is reordered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditInit</td>\\r\\n                            <td>event.field: Column object of the cell<br>\\r\\n                                event.data: Row data</td>\\r\\n                            <td>Callback to invoke when a cell switches to edit mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditComplete</td>\\r\\n                            <td>event.field: Column object of the cell<br>\\r\\n                                event.data: Row data <br />\\r\\n                                event.originalEvent: Browser event</td>\\r\\n                            <td>Callback to invoke when cell edit is completed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onEditCancel</td>\\r\\n                            <td>event.field: Column object of the cell<br>\\r\\n                                event.data: Row data <br />\\r\\n                                event.originalEvent: Browser event</td>\\r\\n                            <td>Callback to invoke when cell edit is cancelled with escape key.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onHeaderCheckboxToggle</td>\\r\\n                            <td>event.originalEvent: Browser event <br>\\r\\n                                event.checked: State of the header checkbox</td>\\r\\n                            <td>Callback to invoke when state of header checkbox changes.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onStateSave</td>\\r\\n                            <td>state: Table state</td>\\r\\n                            <td>Callback to invoke table state is saved.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onStateRestore</td>\\r\\n                            <td>state: Table state</td>\\r\\n                            <td>Callback to invoke table state is restored.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Methods</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>reset</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Resets sort, filter and paginator state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>clearState</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Clears table state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>exportCSV</td>\\r\\n                            <td>config?.selectionOnly: Exports only the selection.</td>\\r\\n                            <td>Exports the data in csv format.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>closeCellEdit</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Closes the editing cell.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Element</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-table</td>\\r\\n                            <td>Container element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-caption</td>\\r\\n                            <td>Caption element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-summary</td>\\r\\n                            <td>Section section.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-sortable-column</td>\\r\\n                            <td>Sortable column header.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-scrollable-header</td>\\r\\n                            <td>Container of header in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-scrollable-body</td>\\r\\n                            <td>Container of body in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-scrollable-footer</td>\\r\\n                            <td>Container of footer in a scrollable table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-responsive</td>\\r\\n                            <td>Container element of a responsive table.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-loading</td>\\r\\n                            <td>Loader mask.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-loading-content</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-wrapper</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-scrollable-wrapper</td>\\r\\n                            <td>Loader content.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-column-resizer-helper</td>\\r\\n                            <td>Vertical resize indicator bar. To show the resize indicator bar set the \\\"background-color\\\" property.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-reorder-indicator-top</td>\\r\\n                            <td>Top indicator of column reordering.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-table-reorder-indicator-top</td>\\r\\n                            <td>Bottom indicator of column reordering.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p-table [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.brand&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;car.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Dynamic Columns&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123;field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Edit</span></span>\\r\\n        <span>Cell and Row editing provides a rapid and user friendly way to manipulate data.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <h3 class=\\\"first\\\">Cell Editing</h3>\\r\\n    <p-table [value]=\\\"cars1\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Brand</th>\\r\\n                <th>Color</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData>\\r\\n            <tr>\\r\\n                <td pEditableColumn>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.vin\\\">\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.vin}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td pEditableColumn>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" required>\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.year}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td pEditableColumn>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <p-dropdown [options]=\\\"brands\\\" [(ngModel)]=\\\"rowData.brand\\\" [style]=\\\"{'width':'100%'}\\\"></p-dropdown>\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.brand}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td pEditableColumn>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\">\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.color}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Row Editing</h3>\\r\\n    <p-table [value]=\\\"cars2\\\" dataKey=\\\"vin\\\" editMode=\\\"row\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Brand</th>\\r\\n                <th>Color</th>\\r\\n                <th style=\\\"width:8em\\\"></th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-editing=\\\"editing\\\" let-ri=\\\"rowIndex\\\">\\r\\n            <tr [pEditableRow]=\\\"rowData\\\">\\r\\n                <td>\\r\\n                    {{rowData.vin}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" required [ngStyle]=\\\"{'width':'100%'}\\\">\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.year}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <p-dropdown [options]=\\\"brands\\\" [(ngModel)]=\\\"rowData.brand\\\" [style]=\\\"{'width':'100%'}\\\"></p-dropdown>\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.brand}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <p-cellEditor>\\r\\n                        <ng-template pTemplate=\\\"input\\\">\\r\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\" [ngStyle]=\\\"{'width':'100%'}\\\">\\r\\n                        </ng-template>\\r\\n                        <ng-template pTemplate=\\\"output\\\">\\r\\n                            {{rowData.color}}\\r\\n                        </ng-template>\\r\\n                    </p-cellEditor>\\r\\n                </td>\\r\\n                <td style=\\\"text-align:center\\\">\\r\\n                    <button *ngIf=\\\"!editing\\\" pButton type=\\\"button\\\" pInitEditableRow icon=\\\"pi pi-pencil\\\" class=\\\"ui-button-info\\\" (click)=\\\"onRowEditInit(rowData)\\\"></button>\\r\\n                    <button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pSaveEditableRow icon=\\\"pi pi-check\\\" class=\\\"ui-button-success\\\" style=\\\"margin-right: .5em\\\" (click)=\\\"onRowEditSave(rowData)\\\"></button>\\r\\n                    <button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pCancelEditableRow icon=\\\"pi pi-times\\\" class=\\\"ui-button-danger\\\" (click)=\\\"onRowEditCancel(rowData, ri)\\\"></button>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tableeditdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableeditdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableEditDemo implements OnInit &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n\\r\\n    cars2: Car[];\\r\\n\\r\\n    brands: SelectItem[];\\r\\n\\r\\n    clonedCars: &#123; [s: string]: Car; &#125; = &#123;&#125;;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\\r\\n\\r\\n        this.brands = [\\r\\n            &#123;label: 'Audi', value: 'Audi'&#125;,\\r\\n            &#123;label: 'BMW', value: 'BMW'&#125;,\\r\\n            &#123;label: 'Fiat', value: 'Fiat'&#125;,\\r\\n            &#123;label: 'Ford', value: 'Ford'&#125;,\\r\\n            &#123;label: 'Honda', value: 'Honda'&#125;,\\r\\n            &#123;label: 'Jaguar', value: 'Jaguar'&#125;,\\r\\n            &#123;label: 'Mercedes', value: 'Mercedes'&#125;,\\r\\n            &#123;label: 'Renault', value: 'Renault'&#125;,\\r\\n            &#123;label: 'VW', value: 'VW'&#125;,\\r\\n            &#123;label: 'Volvo', value: 'Volvo'&#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    onRowEditInit(car: Car) &#123;\\r\\n        this.clonedCars[car.vin] = &#123;...car&#125;;\\r\\n    &#125;\\r\\n\\r\\n    onRowEditSave(car: Car) &#123;\\r\\n        if (car.year > 0) &#123;\\r\\n            delete this.clonedCars[car.vin];\\r\\n            this.messageService.add(&#123;severity:'success', summary: 'Success', detail:'Car is updated'&#125;);\\r\\n        &#125;\\r\\n        else &#123;\\r\\n            this.messageService.add(&#123;severity:'error', summary: 'Error', detail:'Year is required'&#125;);\\r\\n        &#125;\\r\\n    &#125;\\r\\n\\r\\n    onRowEditCancel(car: Car, index: number) &#123;\\r\\n        this.cars2[index] = this.clonedCars[car.vin];\\r\\n        delete this.clonedCars[car.vin];\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tableeditdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableeditdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.vin\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.vin&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" required&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.year&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;p-dropdown [options]=\\\"brands\\\" [(ngModel)]=\\\"rowData.brand\\\" [style]=\\\"&#123;'width':'100%'&#125;\\\"&gt;&lt;/p-dropdown&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.brand&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td pEditableColumn&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.color&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Row Editing&lt;/h3&gt;\\r\\n&lt;p-table [value]=\\\"cars2\\\" dataKey=\\\"vin\\\" editMode=\\\"row\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n            &lt;th style=\\\"width:8em\\\"&gt;&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-editing=\\\"editing\\\" let-ri=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pEditableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &#123;&#123;rowData.vin&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.year\\\" required&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.year&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;p-dropdown [options]=\\\"brands\\\" [(ngModel)]=\\\"rowData.brand\\\" [style]=\\\"&#123;'width':'100%'&#125;\\\"&gt;&lt;/p-dropdown&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.brand&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-cellEditor&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\r\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData.color\\\"&gt;\\r\\n                    &lt;/ng-template&gt;\\r\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\r\\n                        &#123;&#123;rowData.color&#125;&#125;\\r\\n                    &lt;/ng-template&gt;\\r\\n                &lt;/p-cellEditor&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td style=\\\"text-align:center\\\"&gt;\\r\\n                &lt;button *ngIf=\\\"!editing\\\" pButton type=\\\"button\\\" pInitEditableRow icon=\\\"pi pi-pencil\\\" class=\\\"ui-button-info\\\" (click)=\\\"onRowEditInit(rowData)\\\"&gt;&lt;/button&gt;\\r\\n                &lt;button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pSaveEditableRow icon=\\\"pi pi-check\\\" class=\\\"ui-button-success\\\" style=\\\"margin-right: .5em\\\" (click)=\\\"onRowEditSave(rowData)\\\"&gt;&lt;/button&gt;\\r\\n                &lt;button *ngIf=\\\"editing\\\" pButton type=\\\"button\\\" pCancelEditableRow icon=\\\"pi pi-times\\\" class=\\\"ui-button-danger\\\" (click)=\\\"onRowEditCancel(rowData, ri)\\\"&gt;&lt;/button&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Export</span></span>\\r\\n        <span>Table can export its data to CSV format.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table #dt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div class=\\\"ui-helper-clearfix\\\" style=\\\"text-align: left\\\">\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-o\\\" iconPos=\\\"left\\\" label=\\\"CSV\\\" (click)=\\\"dt.exportCSV()\\\" style=\\\"margin-right: 0.5em;\\\"></button>\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-excel\\\" iconPos=\\\"left\\\" label=\\\"EXCEL\\\" (click)=\\\"exportExcel()\\\" style=\\\"margin-right: 0.5em;\\\" class=\\\"ui-button-success\\\"></button>\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-pdf\\\" iconPos=\\\"left\\\" label=\\\"PDF\\\" (click)=\\\"exportPdf()\\\" class=\\\"ui-button-warning\\\"></button>\\r\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-file\\\" iconPos=\\\"left\\\" label=\\\"CSV - Selection Only\\\" (click)=\\\"dt.exportCSV({selectionOnly:true})\\\" style=\\\"float:right\\\"></button>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tableexportdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableexportdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableExportDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    selectedCars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    columns: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.exportColumns = this.cols.map(col => (&#123;title: col.header, dataKey: col.field&#125;));\\r\\n    &#125;\\r\\n\\r\\n    exportPdf() &#123;\\r\\n        import(\\\"jspdf\\\").then(jsPDF => &#123;\\r\\n            import(\\\"jspdf-autotable\\\").then(x => &#123;\\r\\n                const doc = new jsPDF.default(0,0);\\r\\n                doc.autoTable(this.columns, this.cars);\\r\\n                doc.save('primengTable.pdf');\\r\\n            &#125;)\\r\\n        &#125;)\\r\\n    &#125;\\r\\n    \\r\\n    exportExcel() &#123;\\r\\n        import(\\\"xlsx\\\").then(xlsx => &#123;\\r\\n            const worksheet = xlsx.utils.json_to_sheet(this.getCars());\\r\\n            const workbook = &#123; Sheets: &#123; 'data': worksheet &#125;, SheetNames: ['data'] &#125;;\\r\\n            const excelBuffer: any = xlsx.write(workbook, &#123; bookType: 'xlsx', type: 'array' &#125;);\\r\\n            this.saveAsExcelFile(excelBuffer, \\\"primengTable\\\");\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    saveAsExcelFile(buffer: any, fileName: string): void &#123;\\r\\n        import(\\\"file-saver\\\").then(FileSaver => &#123;\\r\\n            let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\\r\\n            let EXCEL_EXTENSION = '.xlsx';\\r\\n            const data: Blob = new Blob([buffer], &#123;\\r\\n                type: EXCEL_TYPE\\r\\n            &#125;);\\r\\n            FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    getCars() &#123;\\r\\n        let cars = [];\\r\\n        for(let car of this.cars) &#123;\\r\\n            car.year = car.year.toString();\\r\\n            cars.push(car);\\r\\n        &#125;\\r\\n        return cars;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tableexportdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableexportdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table #dt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div class=\\\"ui-helper-clearfix\\\" style=\\\"text-align: left\\\"&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-o\\\" iconPos=\\\"left\\\" label=\\\"CSV\\\" (click)=\\\"dt.exportCSV()\\\" style=\\\"margin-right: 0.5em;\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-excel\\\" iconPos=\\\"left\\\" label=\\\"EXCEL\\\" (click)=\\\"exportExcel()\\\" style=\\\"margin-right: 0.5em;\\\" class=\\\"ui-button-success\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file-pdf\\\" iconPos=\\\"left\\\" label=\\\"PDF\\\" (click)=\\\"exportPdf()\\\" class=\\\"ui-button-warning\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-file\\\" iconPos=\\\"left\\\" label=\\\"CSV - Selection Only\\\" (click)=\\\"dt.exportCSV(&#123;selectionOnly:true&#125;)\\\" style=\\\"float:right\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Filter</span></span>\\r\\n        <span>Filtering reduces the data by running a search using column filters and an optional global filter.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation ui-fluid\\\">\\r\\n    <p-table #dt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            <div style=\\\"text-align: right\\\">\\r\\n                <i class=\\\"fa fa-search\\\" style=\\\"margin:4px 4px 0 0\\\"></i>\\r\\n                <input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"dt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\">\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\">\\r\\n                    <input *ngSwitchCase=\\\"'vin'\\\" pInputText type=\\\"text\\\" (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                    <div *ngSwitchCase=\\\"'year'\\\">\\r\\n                        Value > {{yearFilter}}\\r\\n                        <i class=\\\"fa fa-close\\\" (click)=\\\"yearFilter=null;dt.filter(null, col.field, col.filterMatchMode)\\\" style=\\\"cursor:pointer\\\" *ngIf=\\\"yearFilter\\\"></i>\\r\\n                        <p-slider [style]=\\\"{'width':'100%','margin-top':'8px'}\\\" [(ngModel)]=\\\"yearFilter\\\" [min]=\\\"1970\\\" [max]=\\\"2010\\\" (onChange)=\\\"onYearChange($event, dt)\\\"></p-slider>\\r\\n                    </div>\\r\\n                    <p-dropdown *ngSwitchCase=\\\"'brand'\\\" [options]=\\\"brands\\\" [style]=\\\"{'width':'100%'}\\\" (onChange)=\\\"dt.filter($event.value, col.field, 'equals')\\\"></p-dropdown>\\r\\n                    <p-multiSelect *ngSwitchCase=\\\"'color'\\\" [options]=\\\"colors\\\" defaultLabel=\\\"All Colors\\\" (onChange)=\\\"dt.filter($event.value, col.field, 'in')\\\"></p-multiSelect>\\r\\n                    <input *ngSwitchCase=\\\"'price'\\\" pInputText type=\\\"text\\\" placeholder=\\\"Custom - Greater Than\\\" (input)=\\\"dt.filter($event.target.value, col.field, 'custom')\\\">\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablefilterdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablefilterdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableFilterDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    brands: SelectItem[];\\r\\n\\r\\n    colors: SelectItem[];\\r\\n\\r\\n    yearFilter: number;\\r\\n\\r\\n    yearTimeout: any;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\\r\\n\\r\\n        this.brands = [\\r\\n            &#123; label: 'All Brands', value: null &#125;,\\r\\n            &#123; label: 'Audi', value: 'Audi' &#125;,\\r\\n            &#123; label: 'BMW', value: 'BMW' &#125;,\\r\\n            &#123; label: 'Fiat', value: 'Fiat' &#125;,\\r\\n            &#123; label: 'Honda', value: 'Honda' &#125;,\\r\\n            &#123; label: 'Jaguar', value: 'Jaguar' &#125;,\\r\\n            &#123; label: 'Mercedes', value: 'Mercedes' &#125;,\\r\\n            &#123; label: 'Renault', value: 'Renault' &#125;,\\r\\n            &#123; label: 'VW', value: 'VW' &#125;,\\r\\n            &#123; label: 'Volvo', value: 'Volvo' &#125;\\r\\n        ];\\r\\n\\r\\n        this.colors = [\\r\\n            &#123; label: 'White', value: 'White' &#125;,\\r\\n            &#123; label: 'Green', value: 'Green' &#125;,\\r\\n            &#123; label: 'Silver', value: 'Silver' &#125;,\\r\\n            &#123; label: 'Black', value: 'Black' &#125;,\\r\\n            &#123; label: 'Red', value: 'Red' &#125;,\\r\\n            &#123; label: 'Maroon', value: 'Maroon' &#125;,\\r\\n            &#123; label: 'Brown', value: 'Brown' &#125;,\\r\\n            &#123; label: 'Orange', value: 'Orange' &#125;,\\r\\n            &#123; label: 'Blue', value: 'Blue' &#125;\\r\\n        ];\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        FilterUtils['custom'] = (value, filter): boolean => &#123;\\r\\n            if (filter === undefined || filter === null || filter.trim() === '') &#123;\\r\\n                return true;\\r\\n            &#125;\\r\\n    \\r\\n            if (value === undefined || value === null) &#123;\\r\\n                return false;\\r\\n            &#125;\\r\\n            \\r\\n            return parseInt(filter) > value;\\r\\n        &#125;\\r\\n    &#125;\\r\\n\\r\\n    onYearChange(event, dt) &#123;\\r\\n        if (this.yearTimeout) &#123;\\r\\n            clearTimeout(this.yearTimeout);\\r\\n        &#125;\\r\\n\\r\\n        this.yearTimeout = setTimeout(() => &#123;\\r\\n            dt.filter(event.value, 'year', 'gt');\\r\\n        &#125;, 250);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablefilterdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablefilterdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table #dt [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: right\\\"&gt;        \\r\\n            &lt;i class=\\\"fa fa-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\r\\n            &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"dt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\"&gt;\\r\\n                &lt;input *ngSwitchCase=\\\"'vin'\\\" pInputText type=\\\"text\\\" (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\"&gt;\\r\\n                &lt;div *ngSwitchCase=\\\"'year'\\\"&gt;\\r\\n                    Value &gt; &#123;&#123;yearFilter&#125;&#125;\\r\\n                    &lt;i class=\\\"fa fa-close\\\" (click)=\\\"yearFilter=null;dt.filter(null, col.field, col.filterMatchMode)\\\" style=\\\"cursor:pointer\\\" *ngIf=\\\"yearFilter\\\"&gt;&lt;/i&gt;\\r\\n                    &lt;p-slider [style]=\\\"&#123;'width':'100%','margin-top':'8px'&#125;\\\" [(ngModel)]=\\\"yearFilter\\\" [min]=\\\"1970\\\" [max]=\\\"2010\\\" (onChange)=\\\"onYearChange($event, dt)\\\"&gt;&lt;/p-slider&gt;\\r\\n                &lt;/div&gt;\\r\\n                &lt;p-dropdown *ngSwitchCase=\\\"'brand'\\\" [options]=\\\"brands\\\" [style]=\\\"&#123;'width':'100%'&#125;\\\" (onChange)=\\\"dt.filter($event.value, col.field, 'equals')\\\"&gt;&lt;/p-dropdown&gt;\\r\\n                &lt;p-multiSelect *ngSwitchCase=\\\"'color'\\\" [options]=\\\"colors\\\" defaultLabel=\\\"All Colors\\\" (onChange)=\\\"dt.filter($event.value, col.field, 'in')\\\"&gt;&lt;/p-multiSelect&gt;\\r\\n                &lt;input *ngSwitchCase=\\\"'price'\\\" pInputText type=\\\"text\\\" placeholder=\\\"Custom - Greater Than\\\" (input)=\\\"dt.filter($event.target.value, col.field, 'custom')\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Lazy</span></span>\\r\\n        <span>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\r\\n            onLazyLoad callback everytime paging, sorting and filtering happens. Sample belows imitates lazy paging by using an in memory list.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadCarsLazy($event)\\\" \\r\\n        [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [totalRecords]=\\\"totalRecords\\\" [loading]=\\\"loading\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablelazydemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablelazydemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableLazyDemo implements OnInit &#123;\\r\\n\\r\\n    datasource: Car[];\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    totalRecords: number;\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        //datasource imitation\\r\\n        this.carService.getCarsLarge().then(cars => &#123;\\r\\n            this.datasource = cars;\\r\\n            this.totalRecords = this.datasource.length;\\r\\n        &#125;);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.loading = true;\\r\\n    &#125;\\r\\n\\r\\n    loadCarsLazy(event: LazyLoadEvent) &#123;\\r\\n        this.loading = true;\\r\\n\\r\\n        //in a real application, make a remote request to load data using state metadata from event\\r\\n        //event.first = First row offset\\r\\n        //event.rows = Number of rows per page\\r\\n        //event.sortField = Field name to sort with\\r\\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\\r\\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\r\\n\\r\\n        //imitate db connection over a network\\r\\n        setTimeout(() => &#123;\\r\\n            if (this.datasource) &#123;\\r\\n                this.cars = this.datasource.slice(event.first, (event.first + event.rows));\\r\\n                this.loading = false;\\r\\n            &#125;\\r\\n        &#125;, 1000);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablelazydemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablelazydemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [lazy]=\\\"true\\\" (onLazyLoad)=\\\"loadCarsLazy($event)\\\" [paginator]=\\\"true\\\" \\r\\n    [rows]=\\\"10\\\" [totalRecords]=\\\"totalRecords\\\" [loading]=\\\"loading\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Page</span></span>\\r\\n        <span>Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page. For server side pagination, see the <a [routerLink]=\\\"['/table/lazy']\\\">lazy loading</a> example.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablepagedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TablePageDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablepagedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Reorder</span></span>\\r\\n        <span>Order of the columns and rows can be changed using drag and drop.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [reorderableColumns]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th style=\\\"width:2.5em\\\"></th>\\r\\n                <th *ngFor=\\\"let col of columns\\\" pReorderableColumn>\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-index=\\\"rowIndex\\\">\\r\\n            <tr [pReorderableRow]=\\\"index\\\">\\r\\n                <td>\\r\\n                    <i class=\\\"fa fa-bars\\\" pReorderableRowHandle></i>\\r\\n                </td>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablecolreorder.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolreorder.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableColReorderDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablecolreorder.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablecolreorder.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [reorderableColumns]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width:2.5em\\\"&gt;&lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" pReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-index=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pReorderableRow]=\\\"index\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;i class=\\\"fa fa-bars\\\" pReorderableRowHandle&gt;&lt;/i&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Responsive</span></span>\\r\\n        <span>Table columns are displayed as stacked in responsive mode if the screen size becomes smaller. In addition certain columns can be hidden\\r\\n            based on a priority, note that priority based implementation is not built-in and provided as a demo instead.\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Reflow</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [responsive]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            List of Cars\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    &#123;&#123;col.header&#125;&#125;\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    <span class=\\\"ui-column-title\\\">&#123;&#123;col.header&#125;&#125;</span>\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Priority</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            List of Cars\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n                <tr>\\r\\n                    <th>Vin</th>\\r\\n                    <th class=\\\"ui-p-4\\\">Year - p4</th>\\r\\n                    <th class=\\\"ui-p-5\\\">Brand - p5</th>\\r\\n                    <th class=\\\"ui-p-6\\\">Color - p6</th>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"body\\\" let-car>\\r\\n                <tr>\\r\\n                    <td>&#123;&#123;car.vin&#125;&#125;</td>\\r\\n                    <td class=\\\"ui-p-4\\\">&#123;&#123;car.year&#125;&#125;</td>\\r\\n                    <td class=\\\"ui-p-5\\\">&#123;&#123;car.brand&#125;&#125;</td>\\r\\n                    <td class=\\\"ui-p-6\\\">&#123;&#123;car.color&#125;&#125;</td>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tableresponsivedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableresponsivedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './tableresponsivedemo.html',\\r\\n    styles: [`\\r\\n        /* Column Priorities */\\r\\n        @media only all &#123;\\r\\n            th.ui-p-6,\\r\\n            td.ui-p-6,\\r\\n            th.ui-p-5,\\r\\n            td.ui-p-5,\\r\\n            th.ui-p-4,\\r\\n            td.ui-p-4,\\r\\n            th.ui-p-3,\\r\\n            td.ui-p-3,\\r\\n            th.ui-p-2,\\r\\n            td.ui-p-2,\\r\\n            th.ui-p-1,\\r\\n            td.ui-p-1 &#123;\\r\\n                display: none;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 1 at 320px (20em x 16px) */\\r\\n        @media screen and (min-width: 20em) &#123;\\r\\n            th.ui-p-1,\\r\\n            td.ui-p-1 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 2 at 480px (30em x 16px) */\\r\\n        @media screen and (min-width: 30em) &#123;\\r\\n            th.ui-p-2,\\r\\n            td.ui-p-2 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 3 at 640px (40em x 16px) */\\r\\n        @media screen and (min-width: 40em) &#123;\\r\\n            th.ui-p-3,\\r\\n            td.ui-p-3 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 4 at 800px (50em x 16px) */\\r\\n        @media screen and (min-width: 50em) &#123;\\r\\n            th.ui-p-4,\\r\\n            td.ui-p-4 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 5 at 960px (60em x 16px) */\\r\\n        @media screen and (min-width: 60em) &#123;\\r\\n            th.ui-p-5,\\r\\n            td.ui-p-5 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n        \\r\\n        /* Show priority 6 at 1,120px (70em x 16px) */\\r\\n        @media screen and (min-width: 70em) &#123;\\r\\n            th.ui-p-6,\\r\\n            td.ui-p-6 &#123;\\r\\n                display: table-cell;\\r\\n            &#125;\\r\\n        &#125;\\r\\n    `]\\r\\n    &#125;)\\r\\n    export class TableResponsiveDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tableresponsivedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableresponsivedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>&lt;h3 class=\\\"first\\\"&gt;Reflow&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [responsive]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;span class=\\\"ui-column-title\\\"&gt;&#123;&#123;col.header&#125;&#125;&lt;/span&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Priority&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n            &lt;tr&gt;\\r\\n                &lt;th&gt;Vin&lt;/th&gt;\\r\\n                &lt;th class=\\\"ui-p-4\\\"&gt;Year&lt;/th&gt;\\r\\n                &lt;th class=\\\"ui-p-5\\\"&gt;Brand&lt;/th&gt;\\r\\n                &lt;th class=\\\"ui-p-6\\\"&gt;Color&lt;/th&gt;\\r\\n            &lt;/tr&gt;\\r\\n        &lt;/ng-template&gt;\\r\\n        &lt;ng-template pTemplate=\\\"body\\\" let-car&gt;\\r\\n            &lt;tr&gt;\\r\\n                &lt;td&gt;&#123;&#123;car.vin&#125;&#125;&lt;/td&gt;\\r\\n                &lt;td class=\\\"ui-p-4\\\"&gt;&#123;&#123;car.year&#125;&#125;&lt;/td&gt;\\r\\n                &lt;td class=\\\"ui-p-5\\\"&gt;&#123;&#123;car.brand&#125;&#125;&lt;/td&gt;\\r\\n                &lt;td class=\\\"ui-p-6\\\"&gt;&#123;&#123;car.color&#125;&#125;&lt;/td&gt;\\r\\n            &lt;/tr&gt;\\r\\n        &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Row Expansion</span></span>\\r\\n        <span>Row expansion is used to display additional content about the row data.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" dataKey=\\\"vin\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th style=\\\"width: 3em\\\"></th>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\">\\r\\n                        <i [ngClass]=\\\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\\\"></i>\\r\\n                    </a>\\r\\n                </td>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td [attr.colspan]=\\\"columns.length + 1\\\">\\r\\n                    <div class=\\\"ui-g ui-fluid\\\" style=\\\"font-size:16px;padding:20px\\\" [@rowExpansionTrigger]=\\\"'active'\\\">\\r\\n                        <div class=\\\"ui-g-12 ui-md-3\\\" style=\\\"text-align:center\\\">\\r\\n                            <img [attr.alt]=\\\"rowData.brand\\\" src=\\\"assets/showcase/images/demo/car/{{rowData.brand}}.png\\\">\\r\\n                        </div>\\r\\n                        <div class=\\\"ui-g-12 ui-md-9\\\">\\r\\n                            <div class=\\\"ui-g\\\">\\r\\n                                <div class=\\\"ui-g-12\\\">\\r\\n                                    <b>Vin:</b> {{rowData.vin}}\\r\\n                                </div>\\r\\n                                <div class=\\\"ui-g-12\\\">\\r\\n                                    <b>Year:</b> {{rowData.year}}\\r\\n                                </div>\\r\\n                                <div class=\\\"ui-g-12\\\">\\r\\n                                    <b>Brand:</b> {{rowData.brand}}\\r\\n                                </div>\\r\\n                                <div class=\\\"ui-g-12\\\">\\r\\n                                    <b>Color:</b> {{rowData.color}}\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablerowexpansiondemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablerowexpansiondemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './tablerowexpansiondemo.html',\\r\\n    animations: [\\r\\n        trigger('rowExpansionTrigger', [\\r\\n            state('void', style(&#123;\\r\\n                transform: 'translateX(-10%)',\\r\\n                opacity: 0\\r\\n            &#125;)),\\r\\n            state('active', style(&#123;\\r\\n                transform: 'translateX(0)',\\r\\n                opacity: 1\\r\\n            &#125;)),\\r\\n            transition('* &lt;=&gt; *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\\r\\n        ])\\r\\n    ]\\r\\n&#125;)\\r\\nexport class TableRowExpansionDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablerowexpansiondemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablerowexpansiondemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width: 3em\\\"&gt;&lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\"&gt;\\r\\n                    &lt;i [ngClass]=\\\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\\\"&gt;&lt;/i&gt;\\r\\n                &lt;/a&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td [attr.colspan]=\\\"columns.length + 1\\\"&gt;\\r\\n                &lt;div class=\\\"ui-g ui-fluid\\\" style=\\\"font-size:16px;padding:20px\\\"&gt;\\r\\n                    &lt;div class=\\\"ui-g-12 ui-md-3\\\" style=\\\"text-align:center\\\"&gt;\\r\\n                        &lt;img [attr.alt]=\\\"rowData.brand\\\" src=\\\"assets/showcase/images/demo/car/&#123;&#123;rowData.brand&#125;&#125;.png\\\"&gt;\\r\\n                    &lt;/div&gt;\\r\\n                    &lt;div class=\\\"ui-g-12 ui-md-9\\\"&gt;\\r\\n                        &lt;div class=\\\"ui-g\\\"&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Vin:&lt;/b&gt; &#123;&#123;rowData.vin&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Year:&lt;/b&gt; &#123;&#123;rowData.year&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Brand:&lt;/b&gt; &#123;&#123;rowData.brand&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                            &lt;div class=\\\"ui-g-12\\\"&gt;\\r\\n                                &lt;b&gt;Color:&lt;/b&gt; &#123;&#123;rowData.color&#125;&#125;\\r\\n                            &lt;/div&gt;\\r\\n                        &lt;/div&gt;\\r\\n                    &lt;/div&gt;\\r\\n                &lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">RowGroup</span></span>\\r\\n        <span>It is easy to implement row grouping using the flexible template driven approach of the p-table. In this example, sorting\\r\\n            is enabled by default to sort the data by brand initially and then a rowGroupMetadata object is created to\\r\\n            represent how many rows a brand should span along with the rowIndex of the group. Similarly multiple field grouping can be implemented as well.\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Toggleable Row Groups</h3>\\r\\n    <p-table [value]=\\\"cars\\\" dataKey=\\\"brand\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Color</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\" let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\">\\r\\n            <tr class=\\\"ui-widget-header\\\" *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\">\\r\\n                <td colspan=\\\"3\\\">\\r\\n                    <a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\">\\r\\n                        <i [ngClass]=\\\"expanded ? 'fa fa-fw fa-chevron-circle-down' : 'fa fa-fw fa-chevron-circle-right'\\\"></i>\\r\\n                        <span>{{rowData.brand}}</span>\\r\\n                    </a>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-rowIndex=\\\"rowIndex\\\">\\r\\n            <tr>\\r\\n                <td>{{rowData.vin}}</td>\\r\\n                <td>{{rowData.year}}</td>\\r\\n                <td>{{rowData.color}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Subheader</h3>\\r\\n    <p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Color</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\">\\r\\n            <tr class=\\\"ui-widget-header\\\" *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\">\\r\\n                <td colspan=\\\"3\\\">\\r\\n                    <span style=\\\"font-weight:bold\\\">{{rowData.brand}}</span>\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>{{rowData.vin}}</td>\\r\\n                <td>{{rowData.year}}</td>\\r\\n                <td>{{rowData.color}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Rowspan</h3>\\r\\n    <p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\">\\r\\n            <tr>\\r\\n                <th>Brand</th>\\r\\n                <th>Vin</th>\\r\\n                <th>Year</th>\\r\\n                <th>Color</th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\">\\r\\n            <tr>\\r\\n                <td *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\" [attr.rowspan]=\\\"rowGroupMetadata[rowData.brand].size\\\">\\r\\n                    {{rowData.brand}}\\r\\n                </td>\\r\\n                <td>{{rowData.vin}}</td>\\r\\n                <td>{{rowData.year}}</td>\\r\\n                <td>{{rowData.color}}</td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablerowgroupdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablerowgroupdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableRowGroupDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    rowGroupMetadata: any;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => &#123;\\r\\n            this.cars = cars;\\r\\n            this.updateRowGroupMetaData();\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    onSort() &#123;\\r\\n        this.updateRowGroupMetaData();\\r\\n    &#125;\\r\\n\\r\\n    updateRowGroupMetaData() &#123;\\r\\n        this.rowGroupMetadata = &#123;&#125;;\\r\\n        if (this.cars) &#123;\\r\\n            for (let i = 0; i &lt; this.cars.length; i++) &#123;\\r\\n                let rowData = this.cars[i];\\r\\n                let brand = rowData.brand;\\r\\n                if (i == 0) &#123;\\r\\n                    this.rowGroupMetadata[brand] = &#123; index: 0, size: 1 &#125;;\\r\\n                &#125;\\r\\n                else &#123;\\r\\n                    let previousRowData = this.cars[i - 1];\\r\\n                    let previousRowGroup = previousRowData.brand;\\r\\n                    if (brand === previousRowGroup)\\r\\n                        this.rowGroupMetadata[brand].size++;\\r\\n                    else\\r\\n                        this.rowGroupMetadata[brand] = &#123; index: i, size: 1 &#125;;\\r\\n                &#125;\\r\\n            &#125;\\r\\n        &#125;\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablerowgroupdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablerowgroupdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Toggleable Row Groups&lt;/h3&gt;\\r\\n&lt;p-table [value]=\\\"cars\\\" dataKey=\\\"brand\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\" let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr class=\\\"ui-widget-header\\\" *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\"&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;\\r\\n                &lt;a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\"&gt;\\r\\n                    &lt;i [ngClass]=\\\"expanded ? 'fa fa-fw fa-chevron-circle-down' : 'fa fa-fw fa-chevron-circle-right'\\\"&gt;&lt;/i&gt;\\r\\n                    &lt;span&gt;&#123;&#123;rowData.brand&#125;&#125;&lt;/span&gt;\\r\\n                &lt;/a&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n    \\r\\n&lt;h3&gt;Subheader&lt;/h3&gt;\\r\\n&lt;p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr class=\\\"ui-widget-header\\\" *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\"&gt;\\r\\n            &lt;td colspan=\\\"3\\\"&gt;\\r\\n                &lt;span style=\\\"font-weight:bold\\\"&gt;&#123;&#123;rowData.brand&#125;&#125;&lt;/span&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Rowspan&lt;/h3&gt;\\r\\n&lt;p-table [value]=\\\"cars\\\" sortField=\\\"brand\\\" sortMode=\\\"single\\\" (onSort)=\\\"onSort()\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th&gt;Brand&lt;/th&gt;\\r\\n            &lt;th&gt;Vin&lt;/th&gt;\\r\\n            &lt;th&gt;Year&lt;/th&gt;\\r\\n            &lt;th&gt;Color&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngIf=\\\"rowGroupMetadata[rowData.brand].index === rowIndex\\\" [attr.rowspan]=\\\"rowGroupMetadata[rowData.brand].size\\\"&gt;\\r\\n                &#123;&#123;rowData.brand&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.vin&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.year&#125;&#125;&lt;/td&gt;\\r\\n            &lt;td&gt;&#123;&#123;rowData.color&#125;&#125;&lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Scroll</span></span>\\r\\n        <span>Scrolling data is available horizontally, vertically or both. Optional virtual scrolling mode would be handy to deal with large datasets by loading data on demand during scrolling.\\r\\n            In additon certain columns and rows can be fixed as well.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Vertical</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Virtual Scroll - 250K Rows</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"virtualCars\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\"\\r\\n            [virtualScroll]=\\\"true\\\" (onLazyLoad)=\\\"loadDataOnScroll($event)\\\" [virtualRowHeight]=\\\"34\\\"\\r\\n            [lazy]=\\\"true\\\" [totalRecords]=\\\"totalRecords\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr style=\\\"height:34px\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\">\\r\\n            <tr style=\\\"height:34px\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    <div class=\\\"loading-text\\\"></div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Horizontal</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" [style]=\\\"{width:'500px'}\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Horizontal and Vertical</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars3\\\" [scrollable]=\\\"true\\\" [style]=\\\"{width:'500px'}\\\" scrollHeight=\\\"200px\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Frozen Rows</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars4\\\" [frozenValue]=\\\"frozenCars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"frozenrows\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    <b>{{rowData[col.field]}}</b>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Frozen Columns</h3>\\r\\n    <p-table [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [value]=\\\"cars5\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:300px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Frozen Columns and Frozen Rows</h3>\\r\\n    <p-table [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [frozenValue]=\\\"frozenCars\\\" [value]=\\\"cars5\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\">\\r\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n            <colgroup>\\r\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:300px\\\">\\r\\n            </colgroup>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"frozenrows\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    <b>{{rowData[col.field]}}</b>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <ng-container *ngIf=\\\"false\\\">\\r\\n        <h3>Frozen Column Groups</h3>\\r\\n        <p-table [value]=\\\"sales\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"150px\\\" frozenWidth=\\\"200px\\\">\\r\\n            <ng-template pTemplate=\\\"frozenheader\\\">\\r\\n                <tr>\\r\\n                    <th style=\\\"width:200px;height:102px\\\">Brand</th>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"frozenbody\\\" let-sale>\\r\\n                <tr>\\r\\n                    <td>{{sale.brand}}</td>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"header\\\">\\r\\n                <tr>\\r\\n                    <th colspan=\\\"4\\\">Sale Rate</th>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <th colspan=\\\"2\\\">Sales</th>\\r\\n                    <th colspan=\\\"2\\\">Profits</th>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <th>Last Year</th>\\r\\n                    <th>This Year</th>\\r\\n                    <th>Last Year</th>\\r\\n                    <th>This Year</th>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"body\\\" let-sale>\\r\\n                <tr>\\r\\n                    <td>{{sale.lastYearSale}}</td>\\r\\n                    <td>{{sale.thisYearSale}}</td>\\r\\n                    <td>{{sale.lastYearProfit}}</td>\\r\\n                    <td>{{sale.thisYearProfit}}</td>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n        </p-table>\\r\\n    </ng-container>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablescrolldemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablescrolldemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './tablescrolldemo.html',\\r\\n    styles: [`\\r\\n        .loading-text &#123;\\r\\n            display: block;\\r\\n            background-color: #f1f1f1;\\r\\n            min-height: 19px;\\r\\n            animation: pulse 1s infinite ease-in-out;\\r\\n            text-indent: -99999px;\\r\\n            overflow: hidden;\\r\\n        &#125;\\r\\n    `]\\r\\n&#125;)\\r\\nexport class TableScrollDemo implements OnInit &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n\\r\\n    cars2: Car[];\\r\\n\\r\\n    cars3: Car[];\\r\\n    \\r\\n    cars4: Car[];\\r\\n\\r\\n    cars5: Car[];\\r\\n\\r\\n    virtualCars: Car[];\\r\\n\\r\\n    totalRecords: number;\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    frozenCars: Car[];\\r\\n\\r\\n    frozenCols: any[];\\r\\n\\r\\n    scrollableCols: any[];\\r\\n\\r\\n    sales: any[];\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    inmemoryData: Car[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\\r\\n        this.carService.getCarsMedium().then(cars => this.cars3 = cars);\\r\\n        this.carService.getCarsMedium().then(cars => this.cars4 = cars);\\r\\n        this.carService.getCarsMedium().then(cars => this.cars5 = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.scrollableCols = [\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n\\r\\n        this.frozenCols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;\\r\\n        ];\\r\\n\\r\\n        this.frozenCars = [\\r\\n            &#123; \\\"brand\\\": \\\"BMW\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Grey\\\", \\\"vin\\\": \\\"fh2uf23\\\" &#125;,\\r\\n            &#123; \\\"brand\\\": \\\"Chevrolet\\\", \\\"year\\\": 2011, \\\"color\\\": \\\"Black\\\", \\\"vin\\\": \\\"4525g23\\\" &#125;\\r\\n        ];\\r\\n\\r\\n        this.sales = [\\r\\n            &#123; brand: 'Apple', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342' &#125;,\\r\\n            &#123; brand: 'Samsung', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\r\\n            &#123; brand: 'Microsoft', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\r\\n            &#123; brand: 'Philips', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323,' &#125;,\\r\\n            &#123; brand: 'Song', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\r\\n            &#123; brand: 'LG', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\r\\n            &#123; brand: 'Sharp', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\r\\n            &#123; brand: 'Panasonic', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\r\\n            &#123; brand: 'HTC', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\r\\n            &#123; brand: 'Toshiba', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;\\r\\n        ];\\r\\n\\r\\n        this.totalRecords = 250000;\\r\\n        this.loading = true;\\r\\n\\r\\n        this.inmemoryData = [\\r\\n            &#123;\\\"brand\\\": \\\"VW\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Audi\\\", \\\"year\\\": 2011, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Renault\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Gray\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"BMW\\\", \\\"year\\\": 2003, \\\"color\\\": \\\"Blue\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Mercedes\\\", \\\"year\\\": 1995, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Volvo\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Honda\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Yellow\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Jaguar\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Ford\\\", \\\"year\\\": 2000, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Fiat\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Red\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"VW\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Audi\\\", \\\"year\\\": 2011, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Renault\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Gray\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"BMW\\\", \\\"year\\\": 2003, \\\"color\\\": \\\"Blue\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Mercedes\\\", \\\"year\\\": 1995, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Volvo\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Honda\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Yellow\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Jaguar\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Ford\\\", \\\"year\\\": 2000, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Fiat\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Red\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"VW\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Audi\\\", \\\"year\\\": 2011, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Renault\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Gray\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"BMW\\\", \\\"year\\\": 2003, \\\"color\\\": \\\"Blue\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Mercedes\\\", \\\"year\\\": 1995, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Volvo\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Honda\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Yellow\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Jaguar\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Ford\\\", \\\"year\\\": 2000, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Fiat\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Red\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"VW\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Audi\\\", \\\"year\\\": 2011, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Renault\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Gray\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"BMW\\\", \\\"year\\\": 2003, \\\"color\\\": \\\"Blue\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Mercedes\\\", \\\"year\\\": 1995, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Volvo\\\", \\\"year\\\": 2005, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Honda\\\", \\\"year\\\": 2012, \\\"color\\\": \\\"Yellow\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Jaguar\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Orange\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Ford\\\", \\\"year\\\": 2000, \\\"color\\\": \\\"Black\\\"&#125;,\\r\\n            &#123;\\\"brand\\\": \\\"Fiat\\\", \\\"year\\\": 2013, \\\"color\\\": \\\"Red\\\"&#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    loadDataOnScroll(event: LazyLoadEvent) &#123;      \\r\\n        this.loading = true;   \\r\\n\\r\\n        //for demo purposes keep loading the same dataset \\r\\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options \\r\\n        setTimeout(() => &#123;\\r\\n            //last chunk\\r\\n            if (event.first === 249980)\\r\\n                this.virtualCars = this.loadChunk(event.first, 20);\\r\\n            else\\r\\n                this.virtualCars = this.loadChunk(event.first, event.rows);        \\r\\n            \\r\\n            this.loading = false;  \\r\\n        &#125;, 250);   \\r\\n    &#125;\\r\\n\\r\\n    loadChunk(index, length): Car[] &#123;\\r\\n        let chunk: Car[] = [];\\r\\n        for (let i = 0; i &lt; length; i++) &#123;\\r\\n            chunk[i] = &#123;...this.inmemoryData[i], ...&#123;vin: (index + i)&#125;&#125;;\\r\\n        &#125; \\r\\n\\r\\n        return chunk;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablescrolldemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablescrolldemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Vertical&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Virtual Scroll - 250K Rows&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"virtualCars\\\" [scrollable]=\\\"true\\\" [rows]=\\\"20\\\" scrollHeight=\\\"200px\\\" [virtualScroll]=\\\"true\\\" (onLazyLoad)=\\\"loadDataOnScroll($event)\\\"\\r\\n    [lazy]=\\\"true\\\" [totalRecords]=\\\"totalRecords\\\" [virtualRowHeight]=\\\"34\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"loadingbody\\\" let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;div class=\\\"loading-text\\\"&gt;&lt;/div&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Horizontal&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'500px'&#125;\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Horizontal and Vertical&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars3\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'500px'&#125;\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Frozen Rows&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars4\\\" [frozenValue]=\\\"frozenCars\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenrows\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;b&gt;&#123;&#123;rowData[col.field]&#125;&#125;&lt;/b&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Frozen Columns&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [value]=\\\"cars5\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:300px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Frozen Columns and Frozen Rows&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [frozenValue]=\\\"frozenCars\\\" [value]=\\\"cars5\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\r\\n        &lt;colgroup&gt;\\r\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:300px\\\"&gt;\\r\\n        &lt;/colgroup&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"frozenrows\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &lt;b&gt;&#123;&#123;rowData[col.field]&#125;&#125;&lt;/b&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Sections</span></span>\\r\\n        <span>Table provides templates to customize the content of various sections such as caption and summary.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"caption\\\">\\r\\n            List of Cars\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"footer\\\" let-columns>\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            There are {{cars?.length}} cars\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablesectionsdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablesectionsdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableSectionsDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablesectionsdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablesectionsdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\r\\n        List of Cars\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        There are &#123;&#123;cars?.length&#125;&#125; cars\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Selection</span></span>\\r\\n        <span>Single or Multiple rows can be selected depending on the selectionMode property.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <h3 class=\\\"first\\\">Single Row Selection</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar1\\\" dataKey=\\\"vin\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <div style=\\\"text-align: left\\\">\\r\\n                Selected Car: {{selectedCar1 ? selectedCar1.vin + ' - ' + selectedCar1.brand + ' - ' + selectedCar1.year + ' - ' + selectedCar1.color: 'none'}}\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Multiple Row Selection</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars1\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <ul>\\r\\n                <li *ngFor=\\\"let car of selectedCars1\\\" style=\\\"text-align: left\\\">\\r\\n                    {{car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color}}\\r\\n                </li>\\r\\n            </ul>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Multiple Row Selection with MetaKey</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars2\\\" [metaKeySelection]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <ul>\\r\\n                <li *ngFor=\\\"let car of selectedCars2\\\" style=\\\"text-align: left\\\">\\r\\n                    {{car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color}}\\r\\n                </li>\\r\\n            </ul>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Column Selection</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n                <th style=\\\"width:4em\\\"></th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    <button pButton icon=\\\"fa fa-search\\\" (click)=\\\"selectCarWithButton(rowData)\\\"></button>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Events</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar3\\\" dataKey=\\\"vin\\\"\\r\\n        (onRowSelect)=\\\"onRowSelect($event)\\\" (onRowUnselect)=\\\"onRowUnselect($event)\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>RadioButton</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCar4\\\" dataKey=\\\"vin\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th style=\\\"width: 3em\\\"></th>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <p-tableRadioButton [value]=\\\"rowData\\\"></p-tableRadioButton>\\r\\n                </td>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n                <div style=\\\"text-align: left\\\">\\r\\n                    Selected Car: {{selectedCar4 ? selectedCar4.vin + ' - ' + selectedCar4.brand + ' - ' + selectedCar4.year + ' - ' + selectedCar4.color: 'none'}}\\r\\n                </div>\\r\\n            </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Checkbox Selection</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCars3\\\" dataKey=\\\"vin\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th style=\\\"width: 3em\\\">\\r\\n                    <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\\r\\n                </th>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <p-tableCheckbox [value]=\\\"rowData\\\"></p-tableCheckbox>\\r\\n                </td>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"summary\\\">\\r\\n            <ul>\\r\\n                <li *ngFor=\\\"let car of selectedCars3\\\" style=\\\"text-align: left\\\">\\r\\n                    {{car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color}}\\r\\n                </li>\\r\\n            </ul>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tableselectiondemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableselectiondemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableSelectionDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    selectedCar1: Car;\\r\\n\\r\\n    selectedCar2: Car;\\r\\n\\r\\n    selectedCar3: Car;\\r\\n\\r\\n    selectedCar4: Car;\\r\\n\\r\\n    selectedCars1: Car[];\\r\\n\\r\\n    selectedCars2: Car[];\\r\\n\\r\\n    selectedCars3: Car[];\\r\\n\\r\\n    constructor(private carService: CarService, private messageService: MessageService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    selectCarWithButton(car: Car) &#123;\\r\\n        this.selectedCar2 = car;\\r\\n        this.messageService.add(&#123;severity:'info', summary:'Car Selected', detail:'Vin: ' + car.vin&#125;);\\r\\n    &#125;\\r\\n\\r\\n    onRowSelect(event) &#123;\\r\\n        this.messageService.add(&#123;severity:'info', summary:'Car Selected', detail:'Vin: ' + event.data.vin&#125;);\\r\\n    &#125;\\r\\n\\r\\n    onRowUnselect(event) &#123;\\r\\n        this.messageService.add(&#123;severity:'info', summary:'Car Unselected', detail:'Vin: ' + event.data.vin&#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tableselectiondemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableselectiondemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;h3 class=\\\"first\\\"&gt;Single Row Selection&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar1\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n            Selected Car: &#123;&#123;selectedCar1 ? selectedCar.vin + ' - ' + selectedCar1.brand + ' - ' + selectedCar1.year + ' - ' + selectedCar1.color: 'none'&#125;&#125;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple Row Selection&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars1\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;ul&gt;\\r\\n            &lt;li *ngFor=\\\"let car of selectedCars1\\\" style=\\\"text-align: left\\\"&gt;\\r\\n                &#123;&#123;car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color&#125;&#125;\\r\\n            &lt;/li&gt;\\r\\n        &lt;/ul&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple Row Selection&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedCars2\\\" [metaKeySelection]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;ul&gt;\\r\\n            &lt;li *ngFor=\\\"let car of selectedCars2\\\" style=\\\"text-align: left\\\"&gt;\\r\\n                &#123;&#123;car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color&#125;&#125;\\r\\n            &lt;/li&gt;\\r\\n        &lt;/ul&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Column Selection&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n            &lt;th style=\\\"width:4em\\\"&gt;&lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;button pButton icon=\\\"fa-search\\\" (click)=\\\"selectCarWithButton(rowData)\\\"&gt;&lt;/button&gt;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Events&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar3\\\" dataKey=\\\"vin\\\"\\r\\n    (onRowSelect)=\\\"onRowSelect($event)\\\" (onRowUnselect)=\\\"onRowUnselect($event)\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;RadioButton&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCar4\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width: 3em\\\"&gt;&lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-tableRadioButton [value]=\\\"rowData\\\"&gt;&lt;/p-tableRadioButton&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n            &lt;div style=\\\"text-align: left\\\"&gt;\\r\\n                Selected Car: &#123;&#123;selectedCar4 ? selectedCar4.vin + ' - ' + selectedCar4.brand + ' - ' + selectedCar4.year + ' - ' + selectedCar4.color: 'none'&#125;&#125;\\r\\n            &lt;/div&gt;\\r\\n        &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Checkbox Selection&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\" [(selection)]=\\\"selectedCars3\\\" dataKey=\\\"vin\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th style=\\\"width: 3em\\\"&gt;\\r\\n                &lt;p-tableHeaderCheckbox&gt;&lt;/p-tableHeaderCheckbox&gt;\\r\\n            &lt;/th&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td&gt;\\r\\n                &lt;p-tableCheckbox [value]=\\\"rowData\\\"&gt;&lt;/p-tableCheckbox&gt;\\r\\n            &lt;/td&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\r\\n        &lt;ul&gt;\\r\\n            &lt;li *ngFor=\\\"let car of selectedCars3\\\" style=\\\"text-align: left\\\"&gt;\\r\\n                &#123;&#123;car.vin + ' - ' + car.brand + ' - ' + car.year + ' - ' + car.color&#125;&#125;\\r\\n            &lt;/li&gt;\\r\\n        &lt;/ul&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Sort</span></span>\\r\\n        <span>Table supports both single column and multiple column sorting.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Single Sort</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\" ariaLabel=\\\"Activate to sort\\\" ariaLabelDesc=\\\"Activate to sort in descending order\\\" ariaLabelAsc=\\\"Activate to sort in ascending order\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Multi Sort with MetaKey</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" sortMode=\\\"multiple\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Custom Sort</h3>\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars3\\\" (sortFunction)=\\\"customSort($event)\\\" [customSort]=\\\"true\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\">\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablesortdemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablesortdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableSortDemo implements OnInit &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n\\r\\n    cars2: Car[];\\r\\n\\r\\n    cars3: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\\r\\n        this.carService.getCarsSmall().then(cars => this.cars3 = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n\\r\\n    customSort(event: SortEvent) &#123;\\r\\n        event.data.sort((data1, data2) => &#123;\\r\\n            let value1 = data1[event.field];\\r\\n            let value2 = data2[event.field];\\r\\n            let result = null;\\r\\n\\r\\n            if (value1 == null && value2 != null)\\r\\n                result = -1;\\r\\n            else if (value1 != null && value2 == null)\\r\\n                result = 1;\\r\\n            else if (value1 == null && value2 == null)\\r\\n                result = 0;\\r\\n            else if (typeof value1 === 'string' && typeof value2 === 'string')\\r\\n                result = value1.localeCompare(value2);\\r\\n            else\\r\\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\\r\\n\\r\\n            return (event.order * result);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablesortdemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablesortdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Single Sort&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars1\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\" ariaLabel=\\\"Activate to sort\\\" ariaLabelDesc=\\\"Activate to sort in descending order\\\" ariaLabelAsc=\\\"Activate to sort in ascending order\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Multi Sort with MetaKey&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" sortMode=\\\"multiple\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Custom Sort&lt;/h3&gt;\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars3\\\" (sortFunction)=\\\"customSort($event)\\\" [customSort]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">State</span></span>\\r\\n        <span>Stateful table allows keeping the state such as page, sort and filtering either at local storage or session storage so that when the page\\r\\n            is visited again, table would render the data using its last settings.\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Session Storage</h3>\\r\\n    <p-table #dt1 [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" dataKey=\\\"vin\\\" [resizableColumns]=\\\"true\\\" [reorderableColumns]=\\\"true\\\"\\r\\n        selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar1\\\" stateStorage=\\\"session\\\" stateKey=\\\"statedemo-session\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn pReorderableColumn>\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\" class=\\\"ui-fluid\\\">\\r\\n                    <input pInputText type=\\\"text\\\" (input)=\\\"dt1.filter($event.target.value, col.field, col.filterMatchMode)\\\" [value]=\\\"dt1.filters[col.field]?.value\\\">\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n\\r\\n    <h3>Local Storage</h3>\\r\\n    <p-table #dt2 [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" dataKey=\\\"vin\\\" [resizableColumns]=\\\"true\\\" [reorderableColumns]=\\\"true\\\"\\r\\n        selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar2\\\" stateStorage=\\\"local\\\" stateKey=\\\"statedemo-local\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn pReorderableColumn>\\r\\n                    {{col.header}}\\r\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\" class=\\\"ui-fluid\\\">\\r\\n                    <input pInputText type=\\\"text\\\" (input)=\\\"dt2.filter($event.target.value, col.field, col.filterMatchMode)\\\" [value]=\\\"dt2.filters[col.field]?.value\\\">\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablestatedemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablestatedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class TableStateDemo implements OnInit &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n\\r\\n    cars2: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    selectedCar1: Car;\\r\\n\\r\\n    selectedCar2: Car;\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsMedium().then(cars => this.cars2 = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n    \\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablestatedemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablestatedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Session Storage&lt;/h3&gt;\\r\\n&lt;p-table #dt1 [columns]=\\\"cols\\\" [value]=\\\"cars1\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" dataKey=\\\"vin\\\" [resizableColumns]=\\\"true\\\" [reorderableColumns]=\\\"true\\\"\\r\\n    selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar1\\\" stateStorage=\\\"session\\\" stateKey=\\\"statedemo-session\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn pReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\" class=\\\"ui-fluid\\\"&gt;\\r\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"dt1.filter($event.target.value, col.field, col.filterMatchMode)\\\" [value]=\\\"dt1.filters[col.field]?.value\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n\\r\\n&lt;h3&gt;Local Storage&lt;/h3&gt;\\r\\n&lt;p-table #dt2 [columns]=\\\"cols\\\" [value]=\\\"cars2\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" dataKey=\\\"vin\\\" [resizableColumns]=\\\"true\\\" [reorderableColumns]=\\\"true\\\"\\r\\n    selectionMode=\\\"single\\\" [(selection)]=\\\"selectedCar2\\\" stateStorage=\\\"local\\\" stateKey=\\\"statedemo-local\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn pReorderableColumn&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n                &lt;p-sortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-sortIcon&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\" class=\\\"ui-fluid\\\"&gt;\\r\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"dt2.filter($event.target.value, col.field, col.filterMatchMode)\\\" [value]=\\\"dt2.filters[col.field]?.value\\\"&gt;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [pSelectableRow]=\\\"rowData\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Sticky</span></span>\\r\\n        <span>This demo uses position: sticky to implement sticky headers relative to body scroll position. Visit <a href=\\\"https://caniuse.com/css-sticky\\\">here</a> for more information about the supported browsers.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    {{col.header}}\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr>\\r\\n                <td *ngFor=\\\"let col of columns\\\">\\r\\n                    {{rowData[col.field]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablestickydemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './tablestickydemo.html',\\r\\n    styles: [`\\r\\n        :host ::ng-deep .ui-table .ui-table-thead > tr > th &#123;\\r\\n            position: -webkit-sticky;\\r\\n            position: sticky;\\r\\n            top: 70px;\\r\\n        &#125;\\r\\n\\r\\n        @media screen and (max-width: 64em) &#123;\\r\\n            :host ::ng-deep .ui-table .ui-table-thead > tr > th &#123;\\r\\n                top: 100px;\\r\\n            &#125;\\r\\n        &#125;\\r\\n`]\\r\\n&#125;)\\r\\nexport class TableStickyDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablestickydemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","module.exports = \"<table-submenu></table-submenu>\\r\\n\\r\\n<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Table - <span class=\\\"subitem\\\">Style</span></span>\\r\\n        <span>Certain rows or cell can easily be styled based on conditions.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\">\\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n            <tr>\\r\\n                <th *ngFor=\\\"let col of columns\\\">\\r\\n                    &#123;&#123;col.header&#125;&#125;\\r\\n                </th>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n            <tr [ngClass]=\\\"rowData.year > 2010 ? 'new-car' : null\\\">\\r\\n                <td *ngFor=\\\"let col of columns\\\" [ngClass]=\\\"rowData[col.field] <= 2010 ? 'old-car' : null\\\">\\r\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n                </td>\\r\\n            </tr>\\r\\n        </ng-template>\\r\\n    </p-table>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"tablestyledemo.ts\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablestyledemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './tablestyledemo.html',\\r\\n    styles: [`\\r\\n        .old-car &#123;\\r\\n            background-color: #1CA979 !important;\\r\\n            color: #ffffff !important;\\r\\n        &#125;\\r\\n\\r\\n        .very-old-car &#123;\\r\\n            background-color: #2CA8B1 !important;\\r\\n            color: #ffffff !important;\\r\\n        &#125;\\r\\n    `\\r\\n    ]\\r\\n&#125;)\\r\\nexport class TableStyleDemo implements OnInit &#123;\\r\\n\\r\\n    cars: Car[];\\r\\n\\r\\n    cols: any[];\\r\\n\\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\\r\\n\\r\\n        this.cols = [\\r\\n            &#123; field: 'vin', header: 'Vin' &#125;,\\r\\n            &#123; field: 'year', header: 'Year' &#125;,\\r\\n            &#123; field: 'brand', header: 'Brand' &#125;,\\r\\n            &#123; field: 'color', header: 'Color' &#125;\\r\\n        ];\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>   \\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"tablestyledemo.html\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tablestyledemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-table [columns]=\\\"cols\\\" [value]=\\\"cars\\\"&gt;\\r\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\r\\n        &lt;tr&gt;\\r\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\r\\n                &#123;&#123;col.header&#125;&#125;\\r\\n            &lt;/th&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\"&gt;\\r\\n        &lt;tr [ngClass]=\\\"rowData.year &gt; 2010 ? 'new-car' : null\\\"&gt;\\r\\n            &lt;td *ngFor=\\\"let col of columns\\\" [ngClass]=\\\"rowData[col.field] &lt;= 2010 ? 'old-car' : null\\\"&gt;\\r\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\r\\n            &lt;/td&gt;\\r\\n        &lt;/tr&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-table&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './tablecolgroupdemo.html'\r\n})\r\nexport class TableColGroupDemo implements OnInit {\r\n\r\n    sales: any[];\r\n\r\n    ngOnInit() {\r\n        this.sales = [\r\n            { brand: 'Apple', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342' },\r\n            { brand: 'Samsung', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' },\r\n            { brand: 'Microsoft', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' },\r\n            { brand: 'Philips', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323,' },\r\n            { brand: 'Song', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' },\r\n            { brand: 'LG', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' },\r\n            { brand: 'Sharp', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' },\r\n            { brand: 'Panasonic', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' },\r\n            { brand: 'HTC', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' },\r\n            { brand: 'Toshiba', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablecolresizedemo.html'\r\n})\r\nexport class TableColResizeDemo implements OnInit {\r\n\r\n    cars1: Car[];\r\n\r\n    cars2: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsMedium().then(cars => this.cars2 = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin', width: '25%' },\r\n            { field: 'year', header: 'Year', width: '15%' },\r\n            { field: 'brand', header: 'Brand', width: '35%' },\r\n            { field: 'color', header: 'Color', width: '25%' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablecoltoggledemo.html'\r\n})\r\nexport class TableColToggleDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    selectedColumns: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.selectedColumns = this.cols;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { MenuItem } from '../../../components/common/api';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './tablecontextmenudemo.html',\r\n    providers: [MessageService]\r\n})\r\nexport class TableContextMenuDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    selectedCar: Car;\r\n\r\n    selectCars: Car[];\r\n\r\n    items: MenuItem[];\r\n\r\n    constructor(private carService: CarService, private messageService: MessageService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.items = [\r\n            { label: 'View', icon: 'pi pi-search', command: (event) => this.viewCar(this.selectedCar) },\r\n            { label: 'Delete', icon: 'pi pi-times', command: (event) => this.deleteCar(this.selectedCar) }\r\n        ];\r\n    }\r\n\r\n    viewCar(car: Car) {\r\n        this.messageService.add({ severity: 'info', summary: 'Car Selected', detail: car.vin + ' - ' + car.brand });\r\n    }\r\n\r\n    deleteCar(car: Car) {\r\n        let index = -1;\r\n        for (let i = 0; i < this.cars.length; i++) {\r\n            if (this.cars[i].vin == car.vin) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        this.cars.splice(index, 1);\r\n        \r\n        this.messageService.add({ severity: 'info', summary: 'Car Deleted', detail: car.vin + ' - ' + car.brand });\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablecruddemo.html',\r\n    styles: [`        \r\n        .ui-g label {\r\n          font-weight: bold;\r\n          margin-top: .25em;\r\n          display: block;\r\n        }\r\n  `]\r\n})\r\nexport class TableCrudDemo implements OnInit {\r\n\r\n    displayDialog: boolean;\r\n\r\n    car: Car = {};\r\n\r\n    selectedCar: Car;\r\n\r\n    newCar: boolean;\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n\r\n    showDialogToAdd() {\r\n        this.newCar = true;\r\n        this.car = {};\r\n        this.displayDialog = true;\r\n    }\r\n\r\n    save() {\r\n        let cars = [...this.cars];\r\n        if (this.newCar)\r\n            cars.push(this.car);\r\n        else\r\n            cars[this.cars.indexOf(this.selectedCar)] = this.car;\r\n\r\n        this.cars = cars;\r\n        this.car = null;\r\n        this.displayDialog = false;\r\n    }\r\n\r\n    delete() {\r\n        let index = this.cars.indexOf(this.selectedCar);\r\n        this.cars = this.cars.filter((val, i) => i != index);\r\n        this.car = null;\r\n        this.displayDialog = false;\r\n    }\r\n\r\n    onRowSelect(event) {\r\n        this.newCar = false;\r\n        this.car = this.cloneCar(event.data);\r\n        this.displayDialog = true;\r\n    }\r\n\r\n    cloneCar(c: Car): Car {\r\n        let car = {};\r\n        for (let prop in c) {\r\n            car[prop] = c[prop];\r\n        }\r\n        return car;\r\n    }\r\n}","import { NgModule }     from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { TableDemo } from './tabledemo';\r\nimport { TablePageDemo } from './tablepagedemo';\r\nimport { TableSortDemo } from './tablesortdemo';\r\nimport { TableFilterDemo } from './tablefilterdemo';\r\nimport { TableSelectionDemo } from './tableselectiondemo';\r\nimport { TableSectionsDemo } from './tablesectionsdemo';\r\nimport { TableStyleDemo } from './tablestyledemo';\r\nimport { TableLazyDemo } from './tablelazydemo';\r\nimport { TableExportDemo } from './tableexportdemo';\r\nimport { TableColGroupDemo } from './tablecolgroupdemo';\r\nimport { TableRowExpansionDemo } from './tablerowexpansiondemo';\r\nimport { TableScrollDemo } from './tablescrolldemo';\r\nimport { TableColToggleDemo } from './tablecoltoggledemo';\r\nimport { TableCrudDemo } from './tablecruddemo';\r\nimport { TableResponsiveDemo } from './tableresponsivedemo';\r\nimport { TableContextMenuDemo } from './tablecontextmenudemo';\r\nimport { TableColResizeDemo } from './tablecolresizedemo';\r\nimport { TableReorderDemo } from './tablereorderdemo';\r\nimport { TableEditDemo } from './tableeditdemo';\r\nimport { TableRowGroupDemo } from './tablerowgroupdemo';\r\nimport { TableStateDemo } from './tablestatedemo';\r\nimport { TableStickyDemo } from './tablestickydemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{ path: '', component: TableDemo },\r\n\t\t\t{ path: 'page', component: TablePageDemo },\r\n\t\t\t{ path: 'sort', component: TableSortDemo },\r\n\t\t\t{ path: 'selection', component: TableSelectionDemo },\r\n\t\t\t{ path: 'filter', component: TableFilterDemo },\r\n\t\t\t{ path: 'sections', component: TableSectionsDemo },\r\n\t\t\t{ path: 'style', component: TableStyleDemo },\r\n\t\t\t{ path: 'lazy', component: TableLazyDemo },\r\n\t\t\t{ path: 'export', component: TableExportDemo },\r\n\t\t\t{ path: 'colgroup', component: TableColGroupDemo },\r\n\t\t\t{ path: 'rowexpansion', component: TableRowExpansionDemo },\r\n\t\t\t{ path: 'scroll', component: TableScrollDemo },\r\n\t\t\t{ path: 'coltoggle', component: TableColToggleDemo },\r\n\t\t\t{ path: 'crud', component: TableCrudDemo },\r\n\t\t\t{ path: 'responsive', component: TableResponsiveDemo },\r\n\t\t\t{ path: 'contextmenu', component: TableContextMenuDemo },\r\n\t\t\t{ path: 'colresize', component: TableColResizeDemo },\r\n\t\t\t{ path: 'reorder', component: TableReorderDemo },\r\n\t\t\t{ path: 'edit', component: TableEditDemo },\r\n            { path: 'rowgroup', component: TableRowGroupDemo },\r\n            { path: 'state', component: TableStateDemo },\r\n            { path: 'sticky', component: TableStickyDemo }\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class TableDemoRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TableDemo } from './tabledemo';\r\nimport { TablePageDemo } from './tablepagedemo';\r\nimport { TableSortDemo } from './tablesortdemo';\r\nimport { TableSelectionDemo } from './tableselectiondemo';\r\nimport { TableFilterDemo } from './tablefilterdemo';\r\nimport { TableSectionsDemo } from './tablesectionsdemo';\r\nimport { TableSubmenu } from './tablesubmenu';\r\nimport { TableStyleDemo } from './tablestyledemo';\r\nimport { TableLazyDemo } from './tablelazydemo';\r\nimport { TableExportDemo } from './tableexportdemo';\r\nimport { TableDemoRoutingModule } from './tabledemo-routing.module';\r\nimport { TableModule } from '../../../components/table/table';\r\nimport { SliderModule } from '../../../components/slider/slider';\r\nimport { MultiSelectModule } from '../../../components/multiselect/multiselect';\r\nimport { ContextMenuModule } from '../../../components/contextmenu/contextmenu';\r\nimport { ToastModule } from '../../../components/toast/toast';\r\nimport { ButtonModule } from '../../../components/button/button';\r\nimport { DialogModule } from '../../../components/dialog/dialog';\r\nimport { DropdownModule } from '../../../components/dropdown/dropdown';\r\nimport { InputTextModule } from '../../../components/inputtext/inputtext';\r\nimport { TableColGroupDemo } from './tablecolgroupdemo';\r\nimport { TableRowExpansionDemo } from './tablerowexpansiondemo';\r\nimport { TableScrollDemo } from './tablescrolldemo';\r\nimport { TableColToggleDemo } from './tablecoltoggledemo';\r\nimport { TableCrudDemo } from './tablecruddemo';\r\nimport { TableResponsiveDemo } from './tableresponsivedemo';\r\nimport { TableContextMenuDemo } from './tablecontextmenudemo';\r\nimport { TableColResizeDemo } from './tablecolresizedemo';\r\nimport { TableReorderDemo } from './tablereorderdemo';\r\nimport { TableEditDemo } from './tableeditdemo';\r\nimport { TableStateDemo } from './tablestatedemo';\r\nimport { TableStickyDemo } from './tablestickydemo';\r\nimport { TableRowGroupDemo } from './tablerowgroupdemo';\r\nimport { TabViewModule } from '../../../components/tabview/tabview';\r\nimport { CodeHighlighterModule } from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tFormsModule,\r\n\t\tTableDemoRoutingModule,\r\n\t\tTableModule,\r\n\t\tSliderModule,\r\n\t\tDialogModule,\r\n\t\tMultiSelectModule,\r\n\t\tContextMenuModule,\r\n\t\tDropdownModule,\r\n\t\tButtonModule,\r\n\t\tToastModule,\r\n\t\tInputTextModule,\r\n\t\tTabViewModule,\r\n\t\tCodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tTableSubmenu,\r\n\t\tTableDemo,\r\n\t\tTablePageDemo,\r\n\t\tTableSortDemo,\r\n\t\tTableSelectionDemo,\r\n\t\tTableSectionsDemo,\r\n\t\tTableFilterDemo,\r\n\t\tTableStyleDemo,\r\n\t\tTableLazyDemo,\r\n\t\tTableExportDemo,\r\n\t\tTableColGroupDemo,\r\n\t\tTableRowExpansionDemo,\r\n\t\tTableScrollDemo,\r\n\t\tTableColToggleDemo,\r\n\t\tTableCrudDemo,\r\n\t\tTableResponsiveDemo,\r\n\t\tTableContextMenuDemo,\r\n\t\tTableColResizeDemo,\r\n\t\tTableReorderDemo,\r\n\t\tTableEditDemo,\r\n        TableRowGroupDemo,\r\n        TableStateDemo,\r\n        TableStickyDemo\r\n\t]\r\n})\r\nexport class TableDemoModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tabledemo.html'\r\n})\r\nexport class TableDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { SelectItem } from '../../../components/common/api';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './tableeditdemo.html',\r\n    providers: [MessageService]\r\n})\r\nexport class TableEditDemo implements OnInit {\r\n\r\n    cars1: Car[];\r\n\r\n    cars2: Car[];\r\n\r\n    brands: SelectItem[];\r\n\r\n    clonedCars: { [s: string]: Car; } = {};\r\n\r\n    constructor(private carService: CarService, private messageService: MessageService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\r\n\r\n        this.brands = [\r\n            {label: 'Audi', value: 'Audi'},\r\n            {label: 'BMW', value: 'BMW'},\r\n            {label: 'Fiat', value: 'Fiat'},\r\n            {label: 'Ford', value: 'Ford'},\r\n            {label: 'Honda', value: 'Honda'},\r\n            {label: 'Jaguar', value: 'Jaguar'},\r\n            {label: 'Mercedes', value: 'Mercedes'},\r\n            {label: 'Renault', value: 'Renault'},\r\n            {label: 'VW', value: 'VW'},\r\n            {label: 'Volvo', value: 'Volvo'}\r\n        ];\r\n    }\r\n\r\n    onRowEditInit(car: Car) {\r\n        this.clonedCars[car.vin] = {...car};\r\n    }\r\n\r\n    onRowEditSave(car: Car) {\r\n        if (car.year > 0) {\r\n            delete this.clonedCars[car.vin];\r\n            this.messageService.add({severity:'success', summary: 'Success', detail:'Car is updated'});\r\n        }  \r\n        else {\r\n            this.messageService.add({severity:'error', summary: 'Error', detail:'Year is required'});\r\n        }\r\n    }\r\n\r\n    onRowEditCancel(car: Car, index: number) {\r\n        this.cars2[index] = this.clonedCars[car.vin];\r\n        delete this.clonedCars[car.vin];\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tableexportdemo.html'\r\n})\r\nexport class TableExportDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    selectedCars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    exportColumns: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.exportColumns = this.cols.map(col => ({title: col.header, dataKey: col.field}));\r\n    }\r\n\r\n    exportPdf() {\r\n        import(\"jspdf\").then(jsPDF => {\r\n            import(\"jspdf-autotable\").then(x => {\r\n                const doc = new jsPDF.default(0,0);\r\n                doc.autoTable(this.exportColumns, this.cars);\r\n                doc.save('primengTable.pdf');\r\n            })\r\n        })\r\n    }\r\n\r\n    exportExcel() {\r\n        import(\"xlsx\").then(xlsx => {\r\n            const worksheet = xlsx.utils.json_to_sheet(this.getCars());\r\n            const workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n            const excelBuffer: any = xlsx.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n            this.saveAsExcelFile(excelBuffer, \"primengTable\");\r\n        });\r\n    }\r\n\r\n    saveAsExcelFile(buffer: any, fileName: string): void {\r\n        import(\"file-saver\").then(FileSaver => {\r\n            let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n            let EXCEL_EXTENSION = '.xlsx';\r\n            const data: Blob = new Blob([buffer], {\r\n                type: EXCEL_TYPE\r\n            });\r\n            FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\r\n        });\r\n    }\r\n\r\n    getCars() {\r\n        let cars = [];\r\n        for(let car of this.cars) {\r\n            car.year = car.year.toString();\r\n            cars.push(car);\r\n        }\r\n        return cars;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { SelectItem, FilterUtils } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './tablefilterdemo.html'\r\n})\r\nexport class TableFilterDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    brands: SelectItem[];\r\n\r\n    colors: SelectItem[];\r\n\r\n    yearFilter: number;\r\n\r\n    yearTimeout: any;\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\r\n\r\n        this.brands = [\r\n            { label: 'All Brands', value: null },\r\n            { label: 'Audi', value: 'Audi' },\r\n            { label: 'BMW', value: 'BMW' },\r\n            { label: 'Fiat', value: 'Fiat' },\r\n            { label: 'Honda', value: 'Honda' },\r\n            { label: 'Jaguar', value: 'Jaguar' },\r\n            { label: 'Mercedes', value: 'Mercedes' },\r\n            { label: 'Renault', value: 'Renault' },\r\n            { label: 'VW', value: 'VW' },\r\n            { label: 'Volvo', value: 'Volvo' }\r\n        ];\r\n\r\n        this.colors = [\r\n            { label: 'White', value: 'White' },\r\n            { label: 'Green', value: 'Green' },\r\n            { label: 'Silver', value: 'Silver' },\r\n            { label: 'Black', value: 'Black' },\r\n            { label: 'Red', value: 'Red' },\r\n            { label: 'Maroon', value: 'Maroon' },\r\n            { label: 'Brown', value: 'Brown' },\r\n            { label: 'Orange', value: 'Orange' },\r\n            { label: 'Blue', value: 'Blue' }\r\n        ];\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin'},\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' },\r\n            { field: 'price', header: 'Price' }\r\n        ];\r\n\r\n        FilterUtils['custom'] = (value, filter): boolean => {\r\n            if (filter === undefined || filter === null || filter.trim() === '') {\r\n                return true;\r\n            }\r\n    \r\n            if (value === undefined || value === null) {\r\n                return false;\r\n            }\r\n            \r\n            return parseInt(filter) > value;\r\n        }\r\n    }\r\n\r\n    onYearChange(event, dt) {\r\n        if (this.yearTimeout) {\r\n            clearTimeout(this.yearTimeout);\r\n        }\r\n\r\n        this.yearTimeout = setTimeout(() => {\r\n            dt.filter(event.value, 'year', 'gt');\r\n        }, 250);\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { LazyLoadEvent } from '../../../components/common/api';\r\nimport { FilterMetadata } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './tablelazydemo.html'\r\n})\r\nexport class TableLazyDemo implements OnInit {\r\n\r\n    datasource: Car[];\r\n\r\n    cars: Car[];\r\n\r\n    totalRecords: number;\r\n\r\n    cols: any[];\r\n\r\n    loading: boolean;\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        //datasource imitation\r\n        this.carService.getCarsLarge().then(cars => {\r\n            this.datasource = cars;\r\n            this.totalRecords = this.datasource.length;\r\n        });\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.loading = true;\r\n    }\r\n\r\n    loadCarsLazy(event: LazyLoadEvent) {  \r\n        this.loading = true;\r\n\r\n        //in a real application, make a remote request to load data using state metadata from event\r\n        //event.first = First row offset\r\n        //event.rows = Number of rows per page\r\n        //event.sortField = Field name to sort with\r\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\r\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\r\n\r\n        //imitate db connection over a network\r\n        setTimeout(() => {\r\n            if (this.datasource) {\r\n                this.cars = this.datasource.slice(event.first, (event.first + event.rows));\r\n                this.loading = false;\r\n            }\r\n        }, 1000);\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablepagedemo.html'\r\n})\r\nexport class TablePageDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablereorderdemo.html'\r\n})\r\nexport class TableReorderDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tableresponsivedemo.html',\r\n    styles: [`\r\n        /* Column Priorities */\r\n        @media only all {\r\n            th.ui-p-6,\r\n            td.ui-p-6,\r\n            th.ui-p-5,\r\n            td.ui-p-5,\r\n            th.ui-p-4,\r\n            td.ui-p-4,\r\n            th.ui-p-3,\r\n            td.ui-p-3,\r\n            th.ui-p-2,\r\n            td.ui-p-2,\r\n            th.ui-p-1,\r\n            td.ui-p-1 {\r\n                display: none;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 1 at 320px (20em x 16px) */\r\n        @media screen and (min-width: 20em) {\r\n            th.ui-p-1,\r\n            td.ui-p-1 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 2 at 480px (30em x 16px) */\r\n        @media screen and (min-width: 30em) {\r\n            th.ui-p-2,\r\n            td.ui-p-2 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 3 at 640px (40em x 16px) */\r\n        @media screen and (min-width: 40em) {\r\n            th.ui-p-3,\r\n            td.ui-p-3 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 4 at 800px (50em x 16px) */\r\n        @media screen and (min-width: 50em) {\r\n            th.ui-p-4,\r\n            td.ui-p-4 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 5 at 960px (60em x 16px) */\r\n        @media screen and (min-width: 60em) {\r\n            th.ui-p-5,\r\n            td.ui-p-5 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n        \r\n        /* Show priority 6 at 1,120px (70em x 16px) */\r\n        @media screen and (min-width: 70em) {\r\n            th.ui-p-6,\r\n            td.ui-p-6 {\r\n                display: table-cell;\r\n            }\r\n        }\r\n    `]\r\n})\r\nexport class TableResponsiveDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { trigger,state,style,transition,animate } from '@angular/animations';\r\n\r\n@Component({\r\n    templateUrl: './tablerowexpansiondemo.html',\r\n    animations: [\r\n        trigger('rowExpansionTrigger', [\r\n            state('void', style({\r\n                transform: 'translateX(-10%)',\r\n                opacity: 0\r\n            })),\r\n            state('active', style({\r\n                transform: 'translateX(0)',\r\n                opacity: 1\r\n            })),\r\n            transition('* <=> *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n        ])\r\n    ]\r\n})\r\nexport class TableRowExpansionDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablerowgroupdemo.html'\r\n})\r\nexport class TableRowGroupDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    rowGroupMetadata: any;\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => {\r\n            this.cars = cars;\r\n            this.updateRowGroupMetaData();\r\n        });\r\n    }\r\n\r\n    onSort() {\r\n        this.updateRowGroupMetaData();\r\n    }\r\n\r\n    updateRowGroupMetaData() {\r\n        this.rowGroupMetadata = {};\r\n        if (this.cars) {\r\n            for (let i = 0; i < this.cars.length; i++) {\r\n                let rowData = this.cars[i];\r\n                let brand = rowData.brand;\r\n                if (i == 0) {\r\n                    this.rowGroupMetadata[brand] = { index: 0, size: 1 };\r\n                }\r\n                else {\r\n                    let previousRowData = this.cars[i - 1];\r\n                    let previousRowGroup = previousRowData.brand;\r\n                    if (brand === previousRowGroup)\r\n                        this.rowGroupMetadata[brand].size++;\r\n                    else\r\n                        this.rowGroupMetadata[brand] = { index: i, size: 1 };\r\n                }\r\n            }\r\n        }\r\n    }\r\n   \r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { LazyLoadEvent } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './tablescrolldemo.html',\r\n    styles: [`\r\n        .loading-text {\r\n            display: block;\r\n            background-color: #f1f1f1;\r\n            min-height: 19px;\r\n            animation: pulse 1s infinite ease-in-out;\r\n            text-indent: -99999px;\r\n            overflow: hidden;\r\n        }\r\n    `]\r\n})\r\nexport class TableScrollDemo implements OnInit {\r\n\r\n    cars1: Car[];\r\n\r\n    cars2: Car[];\r\n\r\n    cars3: Car[];\r\n    \r\n    cars4: Car[];\r\n\r\n    cars5: Car[];\r\n\r\n    virtualCars: Car[];\r\n\r\n    totalRecords: number;\r\n\r\n    cols: any[];\r\n\r\n    frozenCars: Car[];\r\n\r\n    frozenCols: any[];\r\n\r\n    scrollableCols: any[];\r\n\r\n    sales: any[];\r\n\r\n    loading: boolean;\r\n\r\n    inmemoryData: Car[];\r\n\r\n    constructor(private carService: CarService) {}\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\r\n        this.carService.getCarsMedium().then(cars => this.cars3 = cars);\r\n        this.carService.getCarsMedium().then(cars => this.cars4 = cars);\r\n        this.carService.getCarsMedium().then(cars => this.cars5 = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.scrollableCols = [\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n\r\n        this.frozenCols = [\r\n            { field: 'vin', header: 'Vin' }\r\n        ];\r\n\r\n        this.frozenCars = [\r\n            { \"brand\": \"BMW\", \"year\": 2013, \"color\": \"Grey\", \"vin\": \"fh2uf23\" },\r\n            { \"brand\": \"Chevrolet\", \"year\": 2011, \"color\": \"Black\", \"vin\": \"4525g23\" }\r\n        ];\r\n\r\n        this.sales = [\r\n            { brand: 'Apple', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342' },\r\n            { brand: 'Samsung', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' },\r\n            { brand: 'Microsoft', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' },\r\n            { brand: 'Philips', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323,' },\r\n            { brand: 'Song', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' },\r\n            { brand: 'LG', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' },\r\n            { brand: 'Sharp', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' },\r\n            { brand: 'Panasonic', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' },\r\n            { brand: 'HTC', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' },\r\n            { brand: 'Toshiba', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' }\r\n        ];\r\n\r\n        this.totalRecords = 250000;\r\n        this.loading = true;\r\n\r\n        this.inmemoryData = [\r\n            {\"brand\": \"VW\", \"year\": 2012, \"color\": \"Orange\"},\r\n            {\"brand\": \"Audi\", \"year\": 2011, \"color\": \"Black\"},\r\n            {\"brand\": \"Renault\", \"year\": 2005, \"color\": \"Gray\"},\r\n            {\"brand\": \"BMW\", \"year\": 2003, \"color\": \"Blue\"},\r\n            {\"brand\": \"Mercedes\", \"year\": 1995, \"color\": \"Orange\"},\r\n            {\"brand\": \"Volvo\", \"year\": 2005, \"color\": \"Black\"},\r\n            {\"brand\": \"Honda\", \"year\": 2012, \"color\": \"Yellow\"},\r\n            {\"brand\": \"Jaguar\", \"year\": 2013, \"color\": \"Orange\"},\r\n            {\"brand\": \"Ford\", \"year\": 2000, \"color\": \"Black\"},\r\n            {\"brand\": \"Fiat\", \"year\": 2013, \"color\": \"Red\"},\r\n            {\"brand\": \"VW\", \"year\": 2012, \"color\": \"Orange\"},\r\n            {\"brand\": \"Audi\", \"year\": 2011, \"color\": \"Black\"},\r\n            {\"brand\": \"Renault\", \"year\": 2005, \"color\": \"Gray\"},\r\n            {\"brand\": \"BMW\", \"year\": 2003, \"color\": \"Blue\"},\r\n            {\"brand\": \"Mercedes\", \"year\": 1995, \"color\": \"Orange\"},\r\n            {\"brand\": \"Volvo\", \"year\": 2005, \"color\": \"Black\"},\r\n            {\"brand\": \"Honda\", \"year\": 2012, \"color\": \"Yellow\"},\r\n            {\"brand\": \"Jaguar\", \"year\": 2013, \"color\": \"Orange\"},\r\n            {\"brand\": \"Ford\", \"year\": 2000, \"color\": \"Black\"},\r\n            {\"brand\": \"Fiat\", \"year\": 2013, \"color\": \"Red\"},\r\n            {\"brand\": \"VW\", \"year\": 2012, \"color\": \"Orange\"},\r\n            {\"brand\": \"Audi\", \"year\": 2011, \"color\": \"Black\"},\r\n            {\"brand\": \"Renault\", \"year\": 2005, \"color\": \"Gray\"},\r\n            {\"brand\": \"BMW\", \"year\": 2003, \"color\": \"Blue\"},\r\n            {\"brand\": \"Mercedes\", \"year\": 1995, \"color\": \"Orange\"},\r\n            {\"brand\": \"Volvo\", \"year\": 2005, \"color\": \"Black\"},\r\n            {\"brand\": \"Honda\", \"year\": 2012, \"color\": \"Yellow\"},\r\n            {\"brand\": \"Jaguar\", \"year\": 2013, \"color\": \"Orange\"},\r\n            {\"brand\": \"Ford\", \"year\": 2000, \"color\": \"Black\"},\r\n            {\"brand\": \"Fiat\", \"year\": 2013, \"color\": \"Red\"},\r\n            {\"brand\": \"VW\", \"year\": 2012, \"color\": \"Orange\"},\r\n            {\"brand\": \"Audi\", \"year\": 2011, \"color\": \"Black\"},\r\n            {\"brand\": \"Renault\", \"year\": 2005, \"color\": \"Gray\"},\r\n            {\"brand\": \"BMW\", \"year\": 2003, \"color\": \"Blue\"},\r\n            {\"brand\": \"Mercedes\", \"year\": 1995, \"color\": \"Orange\"},\r\n            {\"brand\": \"Volvo\", \"year\": 2005, \"color\": \"Black\"},\r\n            {\"brand\": \"Honda\", \"year\": 2012, \"color\": \"Yellow\"},\r\n            {\"brand\": \"Jaguar\", \"year\": 2013, \"color\": \"Orange\"},\r\n            {\"brand\": \"Ford\", \"year\": 2000, \"color\": \"Black\"},\r\n            {\"brand\": \"Fiat\", \"year\": 2013, \"color\": \"Red\"}\r\n        ];\r\n    }\r\n\r\n    loadDataOnScroll(event: LazyLoadEvent) {      \r\n        this.loading = true;   \r\n\r\n        //for demo purposes keep loading the same dataset \r\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options \r\n        setTimeout(() => {\r\n            //last chunk\r\n            if (event.first === 249980)\r\n                this.virtualCars = this.loadChunk(event.first, 20);\r\n            else\r\n                this.virtualCars = this.loadChunk(event.first, event.rows);        \r\n            \r\n            this.loading = false;  \r\n        }, 250);   \r\n    }\r\n\r\n    loadChunk(index, length): Car[] {\r\n        let chunk: Car[] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            chunk[i] = {...this.inmemoryData[i], ...{vin: (index + i)}};\r\n        } \r\n\r\n        return chunk;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablesectionsdemo.html'\r\n})\r\nexport class TableSectionsDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './tableselectiondemo.html',\r\n    providers: [MessageService]\r\n})\r\nexport class TableSelectionDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    selectedCar1: Car;\r\n\r\n    selectedCar2: Car;\r\n\r\n    selectedCar3: Car;\r\n\r\n    selectedCar4: Car;\r\n\r\n    selectedCars1: Car[];\r\n\r\n    selectedCars2: Car[];\r\n\r\n    selectedCars3: Car[];\r\n\r\n    constructor(private carService: CarService, private messageService: MessageService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n\r\n    selectCarWithButton(car: Car) {\r\n        this.selectedCar2 = car;\r\n        this.messageService.add({severity:'info', summary:'Car Selected', detail:'Vin: ' + car.vin});\r\n    }\r\n\r\n    onRowSelect(event) {\r\n        this.messageService.add({severity:'info', summary:'Car Selected', detail:'Vin: ' + event.data.vin});\r\n    }\r\n\r\n    onRowUnselect(event) {\r\n        this.messageService.add({severity:'info', summary:'Car Unselected', detail:'Vin: ' + event.data.vin});\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\nimport { SortEvent } from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: './tablesortdemo.html'\r\n})\r\nexport class TableSortDemo implements OnInit {\r\n\r\n    cars1: Car[];\r\n\r\n    cars2: Car[];\r\n    \r\n    cars3: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\r\n        this.carService.getCarsSmall().then(cars => this.cars3 = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n\r\n    customSort(event: SortEvent) {\r\n        event.data.sort((data1, data2) => {\r\n            let value1 = data1[event.field];\r\n            let value2 = data2[event.field];\r\n            let result = null;\r\n\r\n            if (value1 == null && value2 != null)\r\n                result = -1;\r\n            else if (value1 != null && value2 == null)\r\n                result = 1;\r\n            else if (value1 == null && value2 == null)\r\n                result = 0;\r\n            else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                result = value1.localeCompare(value2);\r\n            else\r\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n            return (event.order * result);\r\n        });\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablestatedemo.html'\r\n})\r\nexport class TableStateDemo implements OnInit {\r\n\r\n    cars1: Car[];\r\n\r\n    cars2: Car[];\r\n\r\n    cols: any[];\r\n\r\n    selectedCar1: Car;\r\n\r\n    selectedCar2: Car;\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsMedium().then(cars => this.cars2 = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablestickydemo.html',\r\n    styles: [`\r\n        :host ::ng-deep .ui-table .ui-table-thead > tr > th {\r\n            position: -webkit-sticky;\r\n            position: sticky;\r\n            top: 69px;\r\n            box-shadow: 1px 3px 6px 0 rgba(32,33,36,0.10);\r\n        }\r\n\r\n        @media screen and (max-width: 64em) {\r\n            :host ::ng-deep .ui-table .ui-table-thead > tr > th {\r\n                top: 99px;\r\n            }\r\n        }\r\n`]\r\n})\r\nexport class TableStickyDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsMedium().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Car } from '../../components/domain/car';\r\nimport { CarService } from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './tablestyledemo.html',\r\n    styles: [`\r\n        .new-car {\r\n            background-color: #1CA979 !important;\r\n            color: #ffffff !important;\r\n        }\r\n\r\n        .old-car {\r\n            background-color: #2CA8B1 !important;\r\n            color: #ffffff !important;\r\n        }\r\n    `\r\n    ]\r\n})\r\nexport class TableStyleDemo implements OnInit {\r\n\r\n    cars: Car[];\r\n\r\n    cols: any[];\r\n\r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars = cars);\r\n\r\n        this.cols = [\r\n            { field: 'vin', header: 'Vin' },\r\n            { field: 'year', header: 'Year' },\r\n            { field: 'brand', header: 'Brand' },\r\n            { field: 'color', header: 'Color' }\r\n        ];\r\n    }\r\n}","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'table-submenu',\r\n    template: `\r\n        <div class=\"content-section content-submenu ui-helper-clearfix\">\r\n            <ul>\r\n                <li><a [routerLink]=\"['/table']\">&#9679; Documentation</a></li>\r\n                <li><a [routerLink]=\"['/table/sections']\">&#9679; Sections</a></li>\r\n                <li><a [routerLink]=\"['/table/page']\">&#9679; Page</a></li>\r\n                <li><a [routerLink]=\"['/table/sort']\">&#9679; Sort</a></li>\r\n                <li><a [routerLink]=\"['/table/selection']\">&#9679; Selection</a></li>\r\n                <li><a [routerLink]=\"['/table/filter']\">&#9679; Filter</a></li>\r\n                <li><a [routerLink]=\"['/table/colgroup']\">&#9679; ColGroup</a></li>\r\n                <li><a [routerLink]=\"['/table/lazy']\">&#9679; Lazy</a></li>\r\n                <li><a [routerLink]=\"['/table/edit']\">&#9679; Edit</a></li>\r\n                <li><a [routerLink]=\"['/table/scroll']\">&#9679; Scroll</a></li>\r\n                <li><a [routerLink]=\"['/table/rowexpansion']\">&#9679; RowExpand</a></li>\r\n                <li><a [routerLink]=\"['/table/rowgroup']\">&#9679; RowGroup</a></li>\r\n                <li><a [routerLink]=\"['/table/colresize']\">&#9679; Resize</a></li>\r\n                <li><a [routerLink]=\"['/table/reorder']\">&#9679; Reorder</a></li>\r\n                <li><a [routerLink]=\"['/table/coltoggle']\">&#9679; Toggle</a></li>\r\n                <li><a [routerLink]=\"['/table/style']\">&#9679; Style</a></li>\r\n                <li><a [routerLink]=\"['/table/export']\">&#9679; Export</a></li>\r\n                <li><a [routerLink]=\"['/table/contextmenu']\">&#9679; ContextMenu</a></li>\r\n                <li><a [routerLink]=\"['/table/responsive']\">&#9679; Responsive</a></li>\r\n                <li><a [routerLink]=\"['/table/crud']\">&#9679; Crud</a></li>\r\n                <li><a [routerLink]=\"['/table/state']\">&#9679; State</a></li>\r\n                <li><a [routerLink]=\"['/table/sticky']\">&#9679; Sticky</a></li>\r\n            </ul>\r\n        </div>\r\n    `\r\n})\r\nexport class TableSubmenu {}\r\n"],"sourceRoot":""}