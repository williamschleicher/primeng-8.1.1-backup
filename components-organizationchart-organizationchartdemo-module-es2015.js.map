{"version":3,"sources":["webpack:///./src/app/showcase/components/organizationchart/organizationchartdemo.html","webpack:///./src/app/components/organizationchart/organizationchart.ts","webpack:///./src/app/components/panel/panel.ts","webpack:///./src/app/showcase/components/organizationchart/organizationchartdemo-routing.module.ts","webpack:///./src/app/showcase/components/organizationchart/organizationchartdemo.module.ts","webpack:///./src/app/showcase/components/organizationchart/organizationchartdemo.ts"],"names":[],"mappings":"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","file":"components-organizationchart-organizationchartdemo-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">OrganizationChart</span>\\r\\n        <span>OrganizationChart visualized hierarchical organization data.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-toast [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\r\\n\\r\\n    <h3 class=\\\"first\\\">Advanced</h3>\\r\\n    <p>Organization with advanced customization.</p>\\r\\n    <p-organizationChart [value]=\\\"data1\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" (onNodeSelect)=\\\"onNodeSelect($event)\\\"\\r\\n        styleClass=\\\"company\\\">\\r\\n        <ng-template let-node pTemplate=\\\"person\\\">\\r\\n            <div class=\\\"node-header ui-corner-top\\\">{{node.label}}</div>\\r\\n            <div class=\\\"node-content\\\">\\r\\n                <img src=\\\"assets/showcase/images/demo/organization/{{node.data.avatar}}\\\" width=\\\"32\\\">\\r\\n                <div>{{node.data.name}}</div>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n        <ng-template let-node pTemplate=\\\"department\\\">\\r\\n            {{node.label}}\\r\\n        </ng-template>\\r\\n    </p-organizationChart>\\r\\n\\r\\n    <h3>Basic</h3>\\r\\n    <p>Hierarchical data with zero configuration.</p>\\r\\n    <p-organizationChart [value]=\\\"data2\\\"></p-organizationChart>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header =\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;OrganizationChartModule&#125; from 'primeng/organizationchart';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>OrganizationChart requires a model of TreeNode as its value. More information about TreeNode API is available at documentation of <a href=\\\"#\\\" [routerLink]=\\\"['/tree']\\\">tree</a> component.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;TreeNode&#125; from 'primeng/api';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-organizationChart [value]=\\\"data\\\"&gt;&lt;/p-organizationChart&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class MyComponents implements OnInit &#123;\\r\\n\\r\\n    data: TreeNode[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.data = [&#123;\\r\\n            label: 'Root',\\r\\n            children: [\\r\\n                &#123;\\r\\n                    label: 'Child 1',\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.1'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.2'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'Child 2',\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Child 2.1'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Child 2.2'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;];\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Templating</h3>\\r\\n            <p>Label of the treenode is displayed inside the node content by default and templating enables enhanced customization. TreeNode API has type property which is\\r\\n            used to match the pTemplate type so templating can be done per node as well. In example below, nodes with type \\\"leaf\\\" are displayed with bold text. Note that a pTemplate\\r\\n            whose type is \\\"default\\\" applies to all nodes that have no type property defined.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-organizationChart [value]=\\\"data\\\"\\r\\n    styleClass=\\\"company\\\"&gt;\\r\\n    &lt;ng-template let-node pTemplate=\\\"leaf\\\"&gt;\\r\\n        &lt;span style=\\\"font-weight:bold\\\"&gt;{{node.label}}&lt;/span&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template let-node pTemplate=\\\"default\\\"&gt;\\r\\n        &#123;&#123;node.label&#125;&#125;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-organizationChart&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class MyComponents implements OnInit &#123;\\r\\n\\r\\n    data: TreeNode[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.data = [&#123;\\r\\n            label: 'Root',\\r\\n            children: [\\r\\n                &#123;\\r\\n                    label: 'Child 1',\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.1', type: 'leaf'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.2', type: 'leaf'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'Child 2',\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Child 2.1', type: 'leaf'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Child 2.2', type: 'leaf'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;];\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Expand/Collapse State</h3>\\r\\n            <p>In order to display a treenode as expanded by default, set \\\"expanded\\\" property as true in your model.</p>\\r\\n\\r\\n            <h3>Selection</h3>\\r\\n            <p>OrganizationChart supports 2 selection methods; single or multiple. Selection is enabled by setting selectionMode property and providing a single TreeNode or\\r\\n            an array of TreeNodes to reference the selections depending on the selection mode.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-organizationChart [value]=\\\"data\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\"&gt;&lt;/p-organizationChart&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class MyComponents implements OnInit &#123;\\r\\n\\r\\n    data: TreeNode[];\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.data = [&#123;\\r\\n            label: 'Root',\\r\\n            children: [\\r\\n                &#123;\\r\\n                    label: 'Child 1,\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.1', type: 'leaf'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Grandchild 1.2', type: 'leaf'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'Child 2',\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Child 2.1', type: 'leaf'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Child 2.2', type: 'leaf'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;];\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>value</td>\\r\\n                            <td>null</td>\\r\\n                            <td>TreeNode[]</td>\\r\\n                            <td>An array of nested TreeNodes.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selectionMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Defines the selection mode, valid values \\\"single\\\" and \\\"multiple\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>selection</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A single treenode instance or an array to refer to the selections.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n        <h3>Events</h3>\\r\\n        <div class=\\\"doc-tablewrapper\\\">\\r\\n            <table class=\\\"doc-table\\\">\\r\\n                <thead>\\r\\n                <tr>\\r\\n                    <th>Name</th>\\r\\n                    <th>Parameters</th>\\r\\n                    <th>Description</th>\\r\\n                </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr>\\r\\n                        <td>onNodeSelect</td>\\r\\n                        <td>event.originalEvent: browser event <br>\\r\\n                            event.node: Selected node instance.</td>\\r\\n                        <td>Callback to invoke when a node is selected.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>onNodeUnselect</td>\\r\\n                        <td>event.originalEvent: browser event <br>\\r\\n                            event.node: Unselected node instance.</td>\\r\\n                        <td>Callback to invoke when a node is unselected.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>onNodeExpand</td>\\r\\n                        <td>event.originalEvent: browser event <br>\\r\\n                            event.node: Expanded node instance.</td>\\r\\n                        <td>Callback to invoke when a node is expanded.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>onNodeCollapse</td>\\r\\n                        <td>event.originalEvent: browser event <br>\\r\\n                            event.node: Collapsed node instance.</td>\\r\\n                        <td>Callback to invoke when a node is collapsed.</td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n        </div>\\r\\n\\r\\n        <h3>Styling</h3>\\r\\n        <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n        <div class=\\\"doc-tablewrapper\\\">\\r\\n            <table class=\\\"doc-table\\\">\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Element</th>\\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart</td>\\r\\n                        <td>Container element.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-table</td>\\r\\n                        <td>Table container of a node.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-lines</td>\\r\\n                        <td>Connector lines container.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-nodes</td>\\r\\n                        <td>Contained of node children.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-line-right</td>\\r\\n                        <td>Right side line of a node connector.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-line-left</td>\\r\\n                        <td>Left side line of a node connector.</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td>ui-organizationchart-line-top</td>\\r\\n                        <td>Top side line of a node connector.</td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n        </div>\\r\\n\\r\\n        <h3>Dependencies</h3>\\r\\n        <p>None.</p>\\r\\n\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/organizationchart\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\r\\n\\r\\n&lt;h3 class=\\\"first\\\"&gt;Advanced&lt;/h3&gt;\\r\\n&lt;p&gt;Organization with advanced customization.&lt;/p&gt;\\r\\n&lt;p-organizationChart [value]=\\\"data1\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" (onNodeSelect)=\\\"onNodeSelect($event)\\\"\\r\\n    styleClass=\\\"company\\\"&gt;\\r\\n    &lt;ng-template let-node pTemplate=\\\"person\\\"&gt;\\r\\n        &lt;div class=\\\"node-header ui-corner-top\\\"&gt;&#123;node.label&#125;&lt;/div&gt;\\r\\n        &lt;div class=\\\"node-content\\\"&gt;\\r\\n            &lt;img src=\\\"assets/showcase/images/demo/organization/&#123;node.data.avatar&#125;\\\" width=\\\"32\\\"&gt;\\r\\n            &lt;div&gt;&#123;node.data.name&#125;&lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n    &lt;ng-template let-node pTemplate=\\\"department\\\"&gt;\\r\\n        &#123;node.label&#125;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-organizationChart&gt;\\r\\n\\r\\n&lt;h3&gt;Basic&lt;/h3&gt;\\r\\n&lt;p&gt;Hierarchical data with zero configuration.&lt;/p&gt;\\r\\n&lt;p-organizationChart [value]=\\\"data2\\\"&gt;&lt;/p-organizationChart&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Component(&#123;\\r\\n    templateUrl: './organizationchartdemo.html',\\r\\n    providers: [MessageService],\\r\\n    styles: [`\\r\\n        .company.ui-organizationchart .ui-organizationchart-node-content.ui-person &#123;\\r\\n            padding: 0;\\r\\n            border: 0 none;\\r\\n        &#125;\\r\\n\\r\\n        .node-header,.node-content &#123;\\r\\n            padding: .5em .7em;\\r\\n        &#125;\\r\\n\\r\\n        .node-header &#123;\\r\\n            background-color: #495ebb;\\r\\n            color: #ffffff;\\r\\n        &#125;\\r\\n\\r\\n        .node-content &#123;\\r\\n            text-align: center;\\r\\n            border: 1px solid #495ebb;\\r\\n        &#125;\\r\\n\\r\\n        .node-content img &#123;\\r\\n            border-radius: 50%;\\r\\n        &#125;\\r\\n\\r\\n        .department-cfo &#123;\\r\\n            background-color: #7247bc;\\r\\n            color: #ffffff;\\r\\n        &#125;\\r\\n\\r\\n        .department-coo &#123;\\r\\n            background-color: #a534b6;\\r\\n            color: #ffffff;\\r\\n        &#125;\\r\\n\\r\\n        .department-cto &#123;\\r\\n            background-color: #e9286f;\\r\\n            color: #ffffff;\\r\\n        &#125;\\r\\n\\r\\n        .ui-person .ui-node-toggler &#123;\\r\\n            color: #495ebb !important;\\r\\n        &#125;\\r\\n\\r\\n        .department-cto .ui-node-toggler &#123;\\r\\n            color: #8a0a39 !important;\\r\\n        &#125;\\r\\n    `],\\r\\n    encapsulation: ViewEncapsulation.None\\r\\n&#125;)\\r\\nexport class OrganizationChartDemo implements OnInit &#123;\\r\\n\\r\\n    data1: TreeNode[];\\r\\n\\r\\n    data2: TreeNode[];\\r\\n\\r\\n    selectedNode: TreeNode;\\r\\n\\r\\n    constructor(private messageService: MessageService) &#123;&#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.data1 = [&#123;\\r\\n            label: 'CEO',\\r\\n            type: 'person',\\r\\n            styleClass: 'ui-person',\\r\\n            expanded: true,\\r\\n            data: &#123;name:'Walter White', 'avatar': 'walter.jpg'&#125;,\\r\\n            children: [\\r\\n                &#123;\\r\\n                    label: 'CFO',\\r\\n                    type: 'person',\\r\\n                    styleClass: 'ui-person',\\r\\n                    expanded: true,\\r\\n                    data: &#123;name:'Saul Goodman', 'avatar': 'saul.jpg'&#125;,\\r\\n                    children:[&#123;\\r\\n                        label: 'Tax',\\r\\n                        styleClass: 'department-cfo'\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        label: 'Legal',\\r\\n                        styleClass: 'department-cfo'\\r\\n                    &#125;],\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'COO',\\r\\n                    type: 'person',\\r\\n                    styleClass: 'ui-person',\\r\\n                    expanded: true,\\r\\n                    data: &#123;name:'Mike E.', 'avatar': 'mike.jpg'&#125;,\\r\\n                    children:[&#123;\\r\\n                        label: 'Operations',\\r\\n                        styleClass: 'department-coo'\\r\\n                    &#125;]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'CTO',\\r\\n                    type: 'person',\\r\\n                    styleClass: 'ui-person',\\r\\n                    expanded: true,\\r\\n                    data: &#123;name:'Jesse Pinkman', 'avatar': 'jesse.jpg'&#125;,\\r\\n                    children:[&#123;\\r\\n                        label: 'Development',\\r\\n                        styleClass: 'department-cto',\\r\\n                        expanded: true,\\r\\n                        children:[&#123;\\r\\n                            label: 'Analysis',\\r\\n                            styleClass: 'department-cto'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Front End',\\r\\n                            styleClass: 'department-cto'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Back End',\\r\\n                            styleClass: 'department-cto'\\r\\n                        &#125;]\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        label: 'QA',\\r\\n                        styleClass: 'department-cto'\\r\\n                    &#125;,\\r\\n                    &#123;\\r\\n                        label: 'R&amp;D',\\r\\n                        styleClass: 'department-cto'\\r\\n                    &#125;]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;];\\r\\n\\r\\n        this.data2 = [&#123;\\r\\n            label: 'F.C Barcelona',\\r\\n            expanded: true,\\r\\n            children: [\\r\\n                &#123;\\r\\n                    label: 'F.C Barcelona',\\r\\n                    expanded: true,\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Chelsea FC'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'F.C. Barcelona'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;,\\r\\n                &#123;\\r\\n                    label: 'Real Madrid',\\r\\n                    expanded: true,\\r\\n                    children: [\\r\\n                        &#123;\\r\\n                            label: 'Bayern Munich'\\r\\n                        &#125;,\\r\\n                        &#123;\\r\\n                            label: 'Real Madrid'\\r\\n                        &#125;\\r\\n                    ]\\r\\n                &#125;\\r\\n            ]\\r\\n        &#125;];\\r\\n    &#125;\\r\\n\\r\\n    onNodeSelect(event) &#123;\\r\\n        this.messageService.add(&#123;severity: 'success', summary: 'Node Selected', detail: event.node.label&#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule,Component,ElementRef,Input,Output,OnInit,AfterContentInit,OnDestroy,EventEmitter,TemplateRef,EmbeddedViewRef,ViewContainerRef,\r\n        Inject,forwardRef,ContentChildren,QueryList} from '@angular/core';\r\nimport {trigger,state,style,transition,animate} from '@angular/animations';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {SharedModule} from '../common/shared';\r\nimport {TreeNode} from '../common/treenode';\r\nimport {PrimeTemplate} from '../common/shared';\r\n\r\n@Component({\r\n    selector: '[pOrganizationChartNode]',\r\n    template: `\r\n        <tr *ngIf=\"node\">\r\n            <td [attr.colspan]=\"colspan\">\r\n                <div class=\"ui-organizationchart-node-content ui-widget-content ui-corner-all {{node.styleClass}}\" \r\n                    [ngClass]=\"{'ui-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'ui-state-highlight':isSelected()}\"\r\n                    (click)=\"onNodeClick($event,node)\">\r\n                    <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\r\n                    <div *ngIf=\"chart.getTemplateForNode(node)\">\r\n                        <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\r\n                    </div>\r\n                    <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"ui-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\r\n                        <i class=\"ui-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\r\n                    </a>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\r\n            <td [attr.colspan]=\"colspan\">\r\n                <div class=\"ui-organizationchart-line-down\"></div>\r\n            </td>\r\n        </tr>\r\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\r\n            <ng-container *ngIf=\"node.children && node.children.length === 1\">\r\n                <td [attr.colspan]=\"colspan\">\r\n                    <div class=\"ui-organizationchart-line-down\"></div>\r\n                </td>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"node.children && node.children.length > 1\">\r\n                <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\r\n                    <td class=\"ui-organizationchart-line-left\" [ngClass]=\"{'ui-organizationchart-line-top':!first}\">&nbsp;</td>\r\n                    <td class=\"ui-organizationchart-line-right\" [ngClass]=\"{'ui-organizationchart-line-top':!last}\">&nbsp;</td>\r\n                </ng-template>\r\n            </ng-container>\r\n        </tr>\r\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-nodes\" [@childState]=\"'in'\">\r\n            <td *ngFor=\"let child of node.children\" colspan=\"2\">\r\n                <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\r\n            </td>\r\n        </tr>\r\n    `,\r\n    animations: [\r\n        trigger('childState', [\r\n            state('in', style({opacity: 1})),\r\n           transition('void => *', [\r\n             style({opacity: 0}),\r\n             animate(150)\r\n           ]),\r\n           transition('* => void', [\r\n             animate(150, style({opacity:0}))\r\n           ])\r\n        ])\r\n    ]\r\n})\r\nexport class OrganizationChartNode {\r\n\r\n    @Input() node: TreeNode;\r\n        \r\n    @Input() root: boolean;\r\n    \r\n    @Input() first: boolean;\r\n    \r\n    @Input() last: boolean;\r\n\r\n    chart: OrganizationChart;\r\n        \r\n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart) {\r\n        this.chart = chart as OrganizationChart;\r\n    }\r\n                \r\n    get leaf(): boolean {\r\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\r\n    }\r\n    \r\n    get colspan() {\r\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\r\n    }\r\n    \r\n    onNodeClick(event: Event, node: TreeNode) {\r\n        this.chart.onNodeClick(event, node)\r\n    }\r\n    \r\n    toggleNode(event: Event, node: TreeNode) {\r\n        node.expanded = !node.expanded;\r\n        if(node.expanded)\r\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\r\n        else\r\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\r\n            \r\n        event.preventDefault();\r\n    }\r\n    \r\n    isSelected() {\r\n        return this.chart.isSelected(this.node);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-organizationChart',\r\n    template: `\r\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"'ui-organizationchart ui-widget'\">\r\n            <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\r\n        </div>\r\n    `\r\n})\r\nexport class OrganizationChart implements AfterContentInit {\r\n            \r\n    @Input() value: TreeNode[];            \r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n    \r\n    @Input() selectionMode: string;\r\n    \r\n    @Input() selection: any;\r\n    \r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    public templateMap: any;\r\n    \r\n    constructor(public el: ElementRef) {}\r\n    \r\n    get root(): TreeNode {\r\n        return this.value && this.value.length ? this.value[0] : null;\r\n    }\r\n    \r\n    ngAfterContentInit() {\r\n        if(this.templates.length) {\r\n            this.templateMap = {};\r\n        }\r\n        \r\n        this.templates.forEach((item) => {\r\n            this.templateMap[item.getType()] = item.template;\r\n        });\r\n    }\r\n    \r\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\r\n        if(this.templateMap)\r\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\r\n        else\r\n            return null;\r\n    }\r\n    \r\n    onNodeClick(event: Event, node: TreeNode) {\r\n        let eventTarget = (<Element> event.target);\r\n        \r\n        if(eventTarget.className && (eventTarget.className.indexOf('ui-node-toggler') !== -1 || eventTarget.className.indexOf('ui-node-toggler-icon') !== -1)) {\r\n            return;\r\n        }\r\n        else if(this.selectionMode) {\r\n            if(node.selectable === false) {\r\n                return;\r\n            }\r\n            \r\n            let index = this.findIndexInSelection(node);\r\n            let selected = (index >= 0);\r\n            \r\n            if(this.selectionMode === 'single') {\r\n                if(selected) {\r\n                    this.selection = null;\r\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                }\r\n                else {\r\n                    this.selection = node;\r\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                }\r\n            }\r\n            else if(this.selectionMode === 'multiple') {\r\n                if(selected) {\r\n                    this.selection = this.selection.filter((val,i) => i!=index);\r\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                }\r\n                else {\r\n                    this.selection = [...this.selection||[],node];\r\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                }\r\n            }\r\n            \r\n            this.selectionChange.emit(this.selection);\r\n        }\r\n    }\r\n    \r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if(this.selectionMode && this.selection) {\r\n            if(this.selectionMode === 'single') {\r\n                index = (this.selection == node) ? 0 : - 1;\r\n            }\r\n            else if(this.selectionMode === 'multiple') {\r\n                for(let i = 0; i  < this.selection.length; i++) {\r\n                    if(this.selection[i] == node) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n    \r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;         \r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [OrganizationChart,SharedModule],\r\n    declarations: [OrganizationChart,OrganizationChartNode]\r\n})\r\nexport class OrganizationChartModule { }","import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ContentChild} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule,Footer} from '../common/shared';\r\nimport {BlockableUI} from '../common/blockableui';\r\nimport {trigger,state,style,transition,animate} from '@angular/animations';\r\n\r\nlet idx: number = 0;\r\n\r\n@Component({\r\n    selector: 'p-panel',\r\n    template: `\r\n        <div [attr.id]=\"id\" [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div [ngClass]=\"{'ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all': true, 'ui-panel-titlebar-clickable': (toggleable && toggler === 'header')}\" \r\n                *ngIf=\"showHeader\" (click)=\"onHeaderClick($event)\">\r\n                <span class=\"ui-panel-title\" *ngIf=\"header\">{{header}}</span>\r\n                <ng-content select=\"p-header\"></ng-content>\r\n                <a *ngIf=\"toggleable\" [attr.id]=\"id + '-label'\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" tabindex=\"0\"\r\n                    (click)=\"onIconClick($event)\" (keydown.enter)=\"onIconClick($event)\" [attr.aria-controls]=\"id + '-content'\" role=\"tab\" [attr.aria-expanded]=\"!collapsed\">\r\n                    <span [class]=\"collapsed ? expandIcon : collapseIcon\"></span>\r\n                </a>\r\n            </div>\r\n            <div [attr.id]=\"id + '-content'\" class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: animating ? transitionOptions : '0ms', height: '0', opacity:'0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*', opacity: '1'}}\" (@panelContent.done)=\"onToggleDone($event)\"\r\n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\"\r\n                role=\"region\" [attr.aria-hidden]=\"collapsed\" [attr.aria-labelledby]=\"id + '-label'\">\r\n                <div class=\"ui-panel-content ui-widget-content\">\r\n                    <ng-content></ng-content>\r\n                </div>\r\n                \r\n                <div class=\"ui-panel-footer ui-widget-content\" *ngIf=\"footerFacet\">\r\n                    <ng-content select=\"p-footer\"></ng-content>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelContent', [\r\n            state('hidden', style({\r\n                height: '0',\r\n                opacity: 0\r\n            })),\r\n            state('void', style({\r\n                height: '{{height}}',\r\n                opacity: '{{opacity}}'\r\n            }), {params: {height: '0', opacity: '0'}}),\r\n            state('visible', style({\r\n                height: '*',\r\n                opacity: 1\r\n            })),\r\n            transition('visible <=> hidden', animate('{{transitionParams}}')),\r\n            transition('void => hidden', animate('{{transitionParams}}')),\r\n            transition('void => visible', animate('{{transitionParams}}'))\r\n        ])\r\n    ]\r\n})\r\nexport class Panel implements BlockableUI {\r\n\r\n    @Input() toggleable: boolean;\r\n\r\n    @Input() header: string;\r\n\r\n    @Input() collapsed: boolean = false;\r\n    \r\n    @Input() style: any;\r\n    \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() expandIcon: string = 'pi pi-plus';\r\n    \r\n    @Input() collapseIcon: string = 'pi pi-minus';\r\n  \r\n    @Input() showHeader: boolean = true;\r\n\r\n    @Input() toggler: string = \"icon\";\r\n    \r\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\r\n\r\n    @ContentChild(Footer, { static: false }) footerFacet;\r\n    \r\n    animating: boolean;\r\n    \r\n    id: string = `ui-panel-${idx++}`;\r\n    \r\n    constructor(private el: ElementRef) {}\r\n\r\n    onHeaderClick(event: Event) {\r\n        if (this.toggler === 'header') {\r\n            this.toggle(event);\r\n        }\r\n    }\r\n\r\n    onIconClick(event: Event) {\r\n        if (this.toggler === 'icon') {\r\n            this.toggle(event);\r\n        }\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if(this.animating) {\r\n            return false;\r\n        }\r\n        \r\n        this.animating = true;\r\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\r\n        \r\n        if(this.toggleable) {\r\n            if(this.collapsed)\r\n                this.expand(event);\r\n            else\r\n                this.collapse(event);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n    \r\n    expand(event) {\r\n        this.collapsed = false;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    collapse(event) {\r\n        this.collapsed = true;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n    \r\n    onToggleDone(event: Event) {\r\n        this.animating = false;\r\n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Panel,SharedModule],\r\n    declarations: [Panel]\r\n})\r\nexport class PanelModule { }\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {OrganizationChartDemo} from './organizationchartdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: OrganizationChartDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class OrganizationChartDemoRoutingModule {}\r\n","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OrganizationChartDemo} from './organizationchartdemo';\r\nimport {OrganizationChartDemoRoutingModule} from './organizationchartdemo-routing.module';\r\nimport {OrganizationChartModule} from '../../../components/organizationchart/organizationchart';\r\nimport {ToastModule} from '../../../components/toast/toast';\r\nimport {PanelModule} from '../../../components/panel/panel';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tOrganizationChartDemoRoutingModule,\r\n        OrganizationChartModule,\r\n        ToastModule,\r\n        PanelModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tOrganizationChartDemo\r\n\t]\r\n})\r\nexport class OrganizationChartDemoModule {}\r\n","import {Component,OnInit,ViewEncapsulation} from '@angular/core';\r\nimport {TreeNode} from '../../../components/common/api';\r\nimport {MessageService} from '../../../components/common/messageservice';\r\n\r\n@Component({\r\n    templateUrl: './organizationchartdemo.html',\r\n    providers: [MessageService],\r\n    styles: [`\r\n        .company.ui-organizationchart .ui-organizationchart-node-content.ui-person {\r\n            padding: 0;\r\n            border: 0 none;\r\n        }\r\n        \r\n        .node-header,.node-content {\r\n            padding: .5em .7em;\r\n        }\r\n        \r\n        .node-header {\r\n            background-color: #495ebb;\r\n            color: #ffffff;\r\n        }\r\n        \r\n        .node-content {\r\n            text-align: center;\r\n            border: 1px solid #495ebb;\r\n        }\r\n        \r\n        .node-content img {\r\n            border-radius: 50%;\r\n        }\r\n        \r\n        .ui-organizationchart-node-content.department-cfo {\r\n            background-color: #7247bc;\r\n            color: #ffffff;\r\n        }\r\n        \r\n        .ui-organizationchart-node-content.department-coo {\r\n            background-color: #a534b6;\r\n            color: #ffffff;\r\n        }\r\n        \r\n        .ui-organizationchart-node-content.department-cto {\r\n            background-color: #e9286f;\r\n            color: #ffffff;\r\n        }\r\n        \r\n        .ui-person .ui-node-toggler {\r\n            color: #495ebb !important;\r\n        }\r\n        \r\n        .department-cto .ui-node-toggler {\r\n            color: #8a0a39 !important;\r\n        }\r\n    `],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class OrganizationChartDemo implements OnInit {\r\n\r\n    data1: TreeNode[];\r\n    \r\n    data2: TreeNode[];\r\n    \r\n    selectedNode: TreeNode;\r\n    \r\n    constructor(private messageService: MessageService) {}\r\n    \r\n    ngOnInit() {\r\n        this.data1 = [{\r\n            label: 'CEO',\r\n            type: 'person',\r\n            styleClass: 'ui-person',\r\n            expanded: true,\r\n            data: {name:'Walter White', 'avatar': 'walter.jpg'},\r\n            children: [\r\n                {\r\n                    label: 'CFO',\r\n                    type: 'person',\r\n                    styleClass: 'ui-person',\r\n                    expanded: true,\r\n                    data: {name:'Saul Goodman', 'avatar': 'saul.jpg'},\r\n                    children:[{\r\n                        label: 'Tax',\r\n                        styleClass: 'department-cfo'\r\n                    },\r\n                    {\r\n                        label: 'Legal',\r\n                        styleClass: 'department-cfo'\r\n                    }],\r\n                },\r\n                {\r\n                    label: 'COO',\r\n                    type: 'person',\r\n                    styleClass: 'ui-person',\r\n                    expanded: true,\r\n                    data: {name:'Mike E.', 'avatar': 'mike.jpg'},\r\n                    children:[{\r\n                        label: 'Operations',\r\n                        styleClass: 'department-coo'\r\n                    }]\r\n                },\r\n                {\r\n                    label: 'CTO',\r\n                    type: 'person',\r\n                    styleClass: 'ui-person',\r\n                    expanded: true,\r\n                    data: {name:'Jesse Pinkman', 'avatar': 'jesse.jpg'},\r\n                    children:[{\r\n                        label: 'Development',\r\n                        styleClass: 'department-cto',\r\n                        expanded: true,\r\n                        children:[{\r\n                            label: 'Analysis',\r\n                            styleClass: 'department-cto'\r\n                        },\r\n                        {\r\n                            label: 'Front End',\r\n                            styleClass: 'department-cto'\r\n                        },\r\n                        {\r\n                            label: 'Back End',\r\n                            styleClass: 'department-cto'\r\n                        }]\r\n                    },\r\n                    {\r\n                        label: 'QA',\r\n                        styleClass: 'department-cto'\r\n                    },\r\n                    {\r\n                        label: 'R&D',\r\n                        styleClass: 'department-cto'\r\n                    }]\r\n                }\r\n            ]\r\n        }];\r\n        \r\n        this.data2 = [{\r\n            label: 'F.C Barcelona',\r\n            expanded: true,\r\n            children: [\r\n                {\r\n                    label: 'F.C Barcelona',\r\n                    expanded: true,\r\n                    children: [\r\n                        {\r\n                            label: 'Chelsea FC'\r\n                        },\r\n                        {\r\n                            label: 'F.C. Barcelona'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    label: 'Real Madrid',\r\n                    expanded: true,\r\n                    children: [\r\n                        {\r\n                            label: 'Bayern Munich'\r\n                        },\r\n                        {\r\n                            label: 'Real Madrid'\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }];\r\n    }\r\n    \r\n    onNodeSelect(event) {\r\n        this.messageService.add({severity: 'success', summary: 'Node Selected', detail: event.node.label});\r\n    }\r\n}\r\n"],"sourceRoot":""}