{"version":3,"sources":["webpack:///./src/app/showcase/components/togglebutton/togglebuttondemo.html","webpack:///./src/app/components/togglebutton/togglebutton.ts","webpack:///./src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","webpack:///./src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","webpack:///./src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"names":[],"mappings":"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","file":"components-togglebutton-togglebuttondemo-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">ToggleButton</span>\\r\\n        <span>ToggleButton is used to select a boolean value using a button.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic - ({{checked1}})</h3>\\r\\n    <p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\r\\n\\r\\n    <h3>Customized - ({{checked2}})</h3>\\r\\n    <p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;ToggleButtonModule&#125; from 'primeng/togglebutton';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Two-way binding to a boolean property is defined using the standard ngModel directive.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n    checked: boolean;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>As model is two-way binding enabled, setting the bound value as true displays the state as checked.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n   checked: boolean = true;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>ToggleButton can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton formControlName=\\\"agreed\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Labels</h3>\\r\\n            <p>Labels are customized using onLabel and offLabel properties.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\"\\r\\n            onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Icons</h3>\\r\\n            <p>Icon on a ToggleButton is specified with the onIcon and offIcon properties and position is customized using the iconPos property.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" \\r\\n            onIcon=\\\"fa fa-check\\\" offIcon=\\\"fa fa-times\\\" iconPos=\\\"right\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                         <tr>\\r\\n                            <td>onLabel</td>\\r\\n                            <td>string</td>\\r\\n                            <td>Yes</td>\\r\\n                            <td>Label for the on state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>offLabel</td>\\r\\n                            <td>string</td>\\r\\n                            <td>No</td>\\r\\n                            <td>Label for the off state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Icon for the on state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>offIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Icon for the off state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>iconPos</td>\\r\\n                            <td>string</td>\\r\\n                            <td>left</td>\\r\\n                            <td>Position of the icon, valid values are \\\"left\\\" and \\\"right\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the element should be disabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tabindex</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Index of the element in tabbing order.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onChange</td>\\r\\n                            <td>event.originalEvent: browser event <br>\\r\\n                                event.checked: boolean value to represent checked state.</td>\\r\\n                            <td>Callback to invoke on state change.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton (onChange)=\\\"handleChange($event)\\\" [(ngModel)]=\\\"val\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n <pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n    handleChange(e) &#123;\\r\\n        var isChecked = e.checked;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-togglebutton</td>\\r\\n                            <td>Container element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-button-icon-left</td>\\r\\n                            <td>Icon element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-button-icon-right</td>\\r\\n                            <td>Icon element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-button-text</td>\\r\\n                            <td>Label element.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/togglebutton\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic - ({{checked1}})&lt;/h3&gt;\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n\\r\\n&lt;h3&gt;Customized - ({{checked2}})&lt;/h3&gt;\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ToggleButtonDemo &#123;\\r\\n\\r\\n    checked1: boolean = false;\\r\\n\\r\\n    checked2: boolean = true;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleButton),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-toggleButton',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon && !offIcon), \r\n                'ui-button-text-icon-left': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'left'), \r\n                'ui-button-text-icon-right': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'right'),'ui-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\r\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \r\n                (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\">\r\n            </div>\r\n            <span *ngIf=\"onIcon||offIcon\" class=\"ui-button-icon-left\" [class]=\"checked ? this.onIcon : this.offIcon\" [ngClass]=\"{'ui-button-icon-left': (iconPos === 'left'), \r\n            'ui-button-icon-right': (iconPos === 'right')}\"></span>\r\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\r\n        </div>\r\n    `,\r\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR]\r\n})\r\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\r\n\r\n    @Input() onLabel: string = 'Yes';\r\n\r\n    @Input() offLabel: string = 'No';\r\n\r\n    @Input() onIcon: string;\r\n\r\n    @Input() offIcon: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ViewChild('checkbox', { static: false }) checkboxViewChild: ElementRef;\r\n    \r\n    checkbox: HTMLInputElement;\r\n    \r\n    checked: boolean = false;\r\n\r\n    focus: boolean = false;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    ngAfterViewInit() {\r\n        if (this.checkboxViewChild){\r\n            this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\r\n        }\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if(!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.onModelChange(this.checked);\r\n            this.onModelTouched();\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                checked: this.checked\r\n            });\r\n            if (this.checkbox) {\r\n                this.checkbox.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    onFocus() {\r\n        this.focus = true;\r\n    }\r\n    \r\n    onBlur() {\r\n        this.focus = false;\r\n        this.onModelTouched();\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.checked = value;\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    get hasOnLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n    \r\n    get hasOffLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ToggleButton],\r\n    declarations: [ToggleButton]\r\n})\r\nexport class ToggleButtonModule { }\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {ToggleButtonDemo} from './togglebuttondemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: ToggleButtonDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class ToggleButtonDemoRoutingModule {}\r\n","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}  from '@angular/forms';\r\nimport {ToggleButtonDemo} from './togglebuttondemo';\r\nimport {ToggleButtonDemoRoutingModule} from './togglebuttondemo-routing.module';\r\nimport {ToggleButtonModule} from '../../../components/togglebutton/togglebutton';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tToggleButtonDemoRoutingModule,\r\n        ToggleButtonModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tToggleButtonDemo\r\n\t]\r\n})\r\nexport class ToggleButtonDemoModule {}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './togglebuttondemo.html'\r\n})\r\nexport class ToggleButtonDemo {\r\n    \r\n    checked1: boolean = false;\r\n\r\n    checked2: boolean = true;\r\n}"],"sourceRoot":""}