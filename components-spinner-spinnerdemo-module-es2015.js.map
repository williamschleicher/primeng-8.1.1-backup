{"version":3,"sources":["webpack:///./src/app/showcase/components/spinner/spinnerdemo.html","webpack:///./src/app/components/spinner/spinner.ts","webpack:///./src/app/showcase/components/spinner/spinnerdemo-routing.module.ts","webpack:///./src/app/showcase/components/spinner/spinnerdemo.module.ts","webpack:///./src/app/showcase/components/spinner/spinnerdemo.ts"],"names":[],"mappings":"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","file":"components-spinner-spinnerdemo-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Spinner</span>\\r\\n        <span>Spinner is an input component to provide a numerical input.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val1\\\"></p-spinner>\\r\\n\\r\\n    <h3>Min/Max</h3>\\r\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val2\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"></p-spinner>\\r\\n\\r\\n    <h3>Step</h3>\\r\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val3\\\" [step]=\\\"0.25\\\"></p-spinner>\\r\\n\\r\\n    <h3>Format Input</h3>\\r\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val4\\\" [step]=\\\"0.25\\\" [formatInput]=\\\"true\\\"></p-spinner>\\r\\n    \\r\\n    <h3>Disabled</h3>\\r\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val5\\\" [disabled]=\\\"true\\\"></p-spinner>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;SpinnerModule&#125; from 'primeng/spinner';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Two-way value binding is defined using standard ngModel directive.</p>     \\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-spinner [(ngModel)]=\\\"val\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>Spinner can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-spinner formControlName=\\\"age\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Min-Max</h3>\\r\\n            <p>Boundaries are specified with min and max attributes.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-spinner [(ngModel)]=\\\"val\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Step</h3>\\r\\n            <p>Step factor is 1 by default and can be customized with step option.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-spinner [(ngModel)]=\\\"val\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Formatting Input</h3>\\r\\n            <p>Enable formatInput property so that value entered is formatted at onblur event using thosandSeparator and decimalSeparator properties which retrieve their values from the user locale automatically. If you'd like to apply\\r\\n                certain separators, define the separators manually.\\r\\n            </p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-spinner [(ngModel)]=\\\"val\\\" [step]=\\\"0.25\\\" [formatInput]=\\\"true\\\" thosandSeparator=\\\",\\\" decimalSeparator=\\\".\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>step</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Step factor to increment/decrement the value.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>min</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Mininum boundary value.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>max</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Maximum boundary value.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>placeholder</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Hint text for the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>undefined</td>\\r\\n                            <td>When present, it specifies that the element should be disabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>readonly</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>undefined</td>\\r\\n                            <td>When present, it specifies that the element should be read-only.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>maxlength</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Maximum number of character allows in the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>size</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Size of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tabindex</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Index of the element in tabbing order.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>type</td>\\r\\n                            <td>string</td>\\r\\n                            <td>text</td>\\r\\n                            <td>Type of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>required</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>name</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Name of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyle</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>decimalSeparator</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Separator character for decimals, defaults to settings at user locale.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>thousandSeparator</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Separator character for thousands, defaults to settings at user locale.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>formatInput</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, formats the user input at blur event.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onBlur</td>\\r\\n                            <td>event: Blur event</td>\\r\\n                            <td>Callback to invoke when input loses focus.</td>\\r\\n                        </tr>       \\r\\n                        <tr>\\r\\n                            <td>onFocus</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when input gets focus.</td>\\r\\n                        </tr>                 \\r\\n                        <tr>\\r\\n                            <td>onChange</td>\\r\\n                            <td>event: Change event</td>\\r\\n                            <td>Callback to invoke on value change.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-spinner</td>\\r\\n                            <td>Container element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-spinner-up</td>\\r\\n                            <td>Up element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-spinner-down</td>\\r\\n                            <td>Down button</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/spinner\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val1\\\"&gt;&lt;/p-spinner&gt;\\r\\n\\r\\n&lt;h3&gt;Min/Max&lt;/h3&gt;\\r\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val2\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-spinner&gt;\\r\\n\\r\\n&lt;h3&gt;Step&lt;/h3&gt;\\r\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val3\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-spinner&gt;\\r\\n\\r\\n&lt;h3&gt;Format Input&lt;/h3&gt;\\r\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val4\\\" [step]=\\\"0.25\\\" [formatInput]=\\\"true\\\"&gt;&lt;/p-spinner&gt;\\r\\n\\r\\n&lt;h3&gt;Disabled&lt;/h3&gt;\\r\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val5\\\" [disabled]=\\\"true\\\"&gt;&lt;/p-spinner&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class SpinnerDemo &#123;\\r\\n\\r\\n    val1: number;\\r\\n\\r\\n    val2: number;\\r\\n\\r\\n    val3: number;\\r\\n\\r\\n    val4: number = 1000000.50;\\r\\n\\r\\n    val5: number = 100;\\r\\n    \\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,forwardRef,ViewChild, ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {InputTextModule} from '../inputtext/inputtext';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const SPINNER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => Spinner),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-spinner',\r\n    template: `\r\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\r\n            <input #inputfield type=\"text\" [attr.id]=\"inputId\" [value]=\"formattedValue||null\" [attr.name]=\"name\"\r\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\r\n            (keydown)=\"onInputKeydown($event)\" (blur)=\"onInputBlur($event)\" (input)=\"onInput($event)\" (change)=\"onInputChange($event)\" (focus)=\"onInputFocus($event)\"\r\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\r\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" [attr.tabindex]=\"tabindex\" [attr.readonly]=\"readonly\"\r\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\r\n                <span class=\"ui-spinner-button-icon pi pi-caret-up ui-clickable\"></span>\r\n            </button>\r\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" [attr.tabindex]=\"tabindex\" [attr.readonly]=\"readonly\"\r\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\r\n                <span class=\"ui-spinner-button-icon pi pi-caret-down ui-clickable\"></span>\r\n            </button>\r\n        </span>\r\n    `,\r\n    host: {\r\n        '[class.ui-inputwrapper-filled]': 'filled',\r\n        '[class.ui-inputwrapper-focus]': 'focus'\r\n    },\r\n    providers: [SPINNER_VALUE_ACCESSOR]\r\n})\r\nexport class Spinner implements AfterViewInit,ControlValueAccessor {\r\n    \r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() step: number = 1;\r\n\r\n    @Input() min: number;\r\n\r\n    @Input() max: number;\r\n    \r\n    @Input() maxlength: number;\r\n    \r\n    @Input() size: number;\r\n\r\n    @Input() placeholder: string;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() disabled: boolean;\r\n    \r\n    @Input() readonly: boolean;\r\n\r\n    @Input() tabindex: number;\r\n            \r\n    @Input() required: boolean;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() inputStyle: any;\r\n\r\n    @Input() inputStyleClass: string;\r\n\r\n    @Input() formatInput: boolean;\r\n\r\n    @Input() decimalSeparator: string;\r\n\r\n    @Input() thousandSeparator: string;\r\n    \r\n    value: any;\r\n\r\n    formattedValue: string;\r\n        \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    keyPattern: RegExp = /[0-9\\+\\-]/;\r\n    \r\n    public precision: number;\r\n    \r\n    public timer: any;\r\n    \r\n    public focus: boolean;\r\n    \r\n    public filled: boolean;\r\n    \r\n    public negativeSeparator = '-';\r\n\r\n    localeDecimalSeparator: string;\r\n\r\n    localeThousandSeparator: string;\r\n\r\n    thousandRegExp: RegExp;\r\n    \r\n    @ViewChild('inputfield', { static: false }) inputfieldViewChild: ElementRef;\r\n    \r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\r\n\r\n    @Input() set type(value: string) {\r\n        console.warn(\"type property is removed as Spinner does not format the value anymore\");\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if(this.value && this.value.toString().indexOf('.') > 0) {\r\n            this.precision = this.value.toString().split(/[.]/)[1].length;\r\n        }\r\n        else if(this.step % 1 !== 0) {\r\n            // If step is not an integer then extract the length of the decimal part\r\n            this.precision = this.step.toString().split(/[,]|[.]/)[1].length;\r\n        }\r\n\r\n        if (this.formatInput) {\r\n            this.localeDecimalSeparator = (1.1).toLocaleString().substring(1, 2);\r\n            this.localeThousandSeparator = (1000).toLocaleString().substring(1, 2);\r\n            this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\r\n\r\n            if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\r\n                console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    repeat(event: Event, interval: number, dir: number) {\r\n        let i = interval||500;\r\n\r\n        this.clearTimer();\r\n        this.timer = setTimeout(() => {\r\n            this.repeat(event, 40, dir);\r\n        }, i);\r\n\r\n        this.spin(event, dir);\r\n    }\r\n    \r\n    spin(event: Event, dir: number) {\r\n        let step = this.step * dir;\r\n        let currentValue: number;\r\n\r\n        if (this.value)\r\n            currentValue = (typeof this.value === 'string') ? this.parseValue(this.value) : this.value;\r\n        else\r\n            currentValue = 0;\r\n        \r\n        if (this.precision)\r\n            this.value = parseFloat(this.toFixed(currentValue + step, this.precision));\r\n        else\r\n            this.value = currentValue + step;\r\n    \r\n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\r\n            this.value = currentValue;\r\n        }\r\n    \r\n        if (this.min !== undefined && this.value < this.min) {\r\n            this.value = this.min;\r\n        }\r\n\r\n        if (this.max !== undefined && this.value > this.max) {\r\n            this.value = this.max;\r\n        }\r\n       \r\n        this.formatValue();\r\n        this.onModelChange(this.value);\r\n        this.onChange.emit(event);\r\n    }\r\n    \r\n    toFixed(value: number, precision: number) {\r\n        let power = Math.pow(10, precision||0);\r\n        return String(Math.round(value * power) / power);\r\n    }\r\n    \r\n    onUpButtonMousedown(event: Event) {\r\n        if (!this.disabled) {\r\n            this.inputfieldViewChild.nativeElement.focus();\r\n            this.repeat(event, null, 1);\r\n            this.updateFilledState();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    \r\n    onUpButtonMouseup(event: Event) {\r\n        if (!this.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n    \r\n    onUpButtonMouseleave(event: Event) {\r\n        if (!this.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n    \r\n    onDownButtonMousedown(event: Event) {\r\n        if (!this.disabled) {\r\n            this.inputfieldViewChild.nativeElement.focus();\r\n            this.repeat(event, null, -1);\r\n            this.updateFilledState();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    \r\n    onDownButtonMouseup(event: Event) {\r\n        if (!this.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n    \r\n    onDownButtonMouseleave(event: Event) {\r\n        if (!this.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n    \r\n    onInputKeydown(event: KeyboardEvent) {\r\n        if (event.which == 38) {\r\n            this.spin(event, 1);\r\n            event.preventDefault();\r\n        }\r\n        else if (event.which == 40) {\r\n            this.spin(event, -1);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onInputChange(event: Event) {\r\n        this.onChange.emit(event);\r\n    }\r\n\r\n    onInput(event: KeyboardEvent) {\r\n        this.value = this.parseValue((<HTMLInputElement> event.target).value);\r\n        this.onModelChange(this.value);\r\n        this.updateFilledState();\r\n    }\r\n        \r\n    onInputBlur(event) {\r\n        this.focus = false;\r\n        this.formatValue();\r\n        this.onModelTouched();\r\n        this.onBlur.emit(event);\r\n    }\r\n    \r\n    onInputFocus(event) {\r\n        this.focus = true;\r\n        this.onFocus.emit(event);\r\n    }\r\n    \r\n    parseValue(val: string): number {\r\n        let value: number;\r\n                \r\n        if (val.trim() === '') {\r\n            value = null;\r\n        }\r\n        else {\r\n            if (this.formatInput) {\r\n                val = val.replace(this.thousandRegExp, '');\r\n            }\r\n\r\n            if (this.precision) {\r\n                val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\r\n                value = parseFloat(val);\r\n            }\r\n            else {\r\n                value = parseInt(val, 10);\r\n            }\r\n            \r\n            if (!isNaN(value)) {\r\n                if (this.max !== null && value > this.max) {\r\n                    value = this.max;\r\n                }\r\n\r\n                if (this.min !== null && value < this.min) {\r\n                    value = this.min;\r\n                }\r\n            }\r\n            else {\r\n                value = null;\r\n            }\r\n        }\r\n        \r\n        return value;\r\n    }\r\n\r\n    formatValue() {\r\n        let value = this.value;\r\n\r\n        if (value != null) {\r\n            if (this.formatInput) {\r\n                value = value.toLocaleString(undefined, {maximumFractionDigits: 20});\r\n    \r\n                if (this.decimalSeparator && this.thousandSeparator) {\r\n                    value = value.split(this.localeDecimalSeparator);\r\n    \r\n                    if (this.precision && value[1]) {\r\n                        value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\r\n                    }\r\n    \r\n                    if (this.thousandSeparator && value[0].length > 3) {\r\n                        value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\r\n                    }\r\n    \r\n                    value = value.join('');\r\n                }\r\n            }\r\n    \r\n            this.formattedValue = value.toString();\r\n        }\r\n        else {\r\n            this.formattedValue = null;\r\n        }\r\n\r\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\r\n            this.inputfieldViewChild.nativeElement.value = this.formattedValue;\r\n        }\r\n    }\r\n            \r\n    clearTimer() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n        this.formatValue();\r\n        this.updateFilledState();\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    updateFilledState() {\r\n        this.filled = (this.value !== undefined && this.value != null);\r\n    }\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule,InputTextModule],\r\n    exports: [Spinner],\r\n    declarations: [Spinner]\r\n})\r\nexport class SpinnerModule { }\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {SpinnerDemo} from './spinnerdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: SpinnerDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class SpinnerDemoRoutingModule {}\r\n","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common'\r\nimport {FormsModule}  from '@angular/forms';;\r\nimport {SpinnerDemo} from './spinnerdemo';\r\nimport {SpinnerDemoRoutingModule} from './spinnerdemo-routing.module';\r\nimport {SpinnerModule} from '../../../components/spinner/spinner';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tSpinnerDemoRoutingModule,\r\n        SpinnerModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tSpinnerDemo\r\n\t]\r\n})\r\nexport class SpinnerDemoModule {}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './spinnerdemo.html'\r\n})\r\nexport class SpinnerDemo {\r\n\r\n    val1: number;\r\n\r\n    val2: number;\r\n\r\n    val3: number;\r\n\r\n    val4: number = 1000000.5;\r\n\r\n    val5: number = 100;\r\n}"],"sourceRoot":""}