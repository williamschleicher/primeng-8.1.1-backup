{"version":3,"sources":["webpack:///./src/app/showcase/components/inputmask/inputmaskdemo.html","webpack:///./src/app/components/inputmask/inputmask.ts","webpack:///./src/app/showcase/components/inputmask/inputmaskdemo-routing.module.ts","webpack:///./src/app/showcase/components/inputmask/inputmaskdemo.module.ts","webpack:///./src/app/showcase/components/inputmask/inputmaskdemo.ts"],"names":[],"mappings":"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","file":"components-inputmask-inputmaskdemo-module-es5.js","sourcesContent":["module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">InputMask</span>\\r\\n        <span>InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n\\r\\n    <div class=\\\"ui-g ui-fluid\\\">\\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>Basic</span>\\r\\n            <p-inputMask mask=\\\"99-999999\\\" [(ngModel)]=\\\"val1\\\" placeholder=\\\"99-999999\\\"></p-inputMask>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>SSN</span>\\r\\n            <p-inputMask mask=\\\"999-99-9999\\\" [(ngModel)]=\\\"val2\\\" placeholder=\\\"999-99-9999\\\"></p-inputMask>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>Date</span>\\r\\n            <p-inputMask mask=\\\"99/99/9999\\\" [(ngModel)]=\\\"val3\\\" placeholder=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\"></p-inputMask>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>Phone</span>\\r\\n            <p-inputMask mask=\\\"(999) 999-9999\\\" [(ngModel)]=\\\"val4\\\" placeholder=\\\"(999) 999-9999\\\"></p-inputMask>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>Phone Ext</span>\\r\\n            <p-inputMask mask=\\\"(999) 999-9999? x99999\\\" [(ngModel)]=\\\"val5\\\" placeholder=\\\"(999) 999-9999? x99999\\\"></p-inputMask>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\">\\r\\n            <span>Serial Number</span>\\r\\n            <p-inputMask mask=\\\"a*-999-a999\\\" [(ngModel)]=\\\"val6\\\" placeholder=\\\"a*-999-a999\\\"></p-inputMask>\\r\\n        </div>\\r\\n    </div>\\r\\n    \\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;InputMaskModule&#125; from 'primeng/inputmask';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Component is defined using p-inputMask element with a mask and two-way value binding is enabled with standard ngModel directive.</p>   \\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-inputMask [(ngModel)]=\\\"val\\\" mask=\\\"99-9999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Mask</h3>\\r\\n            <p>Mask format can be a combination of the the following built-in definitions.</p>\\r\\n            <ul>\\r\\n                <li>a - Alpha character (defaut: A-Z,a-z)</li>\\r\\n                <li>9 - Numeric character (0-9)</li>\\r\\n                <li>* - Alpha numberic character (A-Z,a-z,0-9)</li>\\r\\n            </ul>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-inputMask [(ngModel)]=\\\"val\\\" mask=\\\"a*-999-a999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <p>You can also define your own regex pattern for alpha character</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-inputMask [(ngModel)]=\\\"val\\\" mask=\\\"99-aa\\\" characterPattern=\\\"[А-Яа-я]\\\"&gt;&lt;/p-inputMask&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            \\r\\n            <h3>SlotChar</h3>\\r\\n            <p>Underscore is the default placeholder for a mask and this can be customized using slotChart option.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-inputMask [(ngModel)]=\\\"val\\\" mask=\\\"99-9999\\\" slotChar=\\\" \\\"&gt;&lt;/p-inputMask&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            \\r\\n            <h3>Optional Values</h3>\\r\\n            <p>If the input does not complete the mask definition, it is cleared by default. Use autoClear property to control this behavior. In addition,\\r\\n            certain part of a mask can be made optional by using ? symbol where anything after the question mark becomes optional.</p>\\r\\n                        \\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>InputMask can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-inputMask formControlName=\\\"username\\\" mask=\\\"(999) 999-9999? x99999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>type</td>\\r\\n                            <td>string</td>\\r\\n                            <td>text</td>\\r\\n                            <td>HTML5 input type</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>mask</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Mask pattern.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>slotChar</td>\\r\\n                            <td>string</td>\\r\\n                            <td>_</td>\\r\\n                            <td>Placeholder character in mask, default is underscore.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autoClear</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Clears the incomplete value on blur.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>unmask</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Defines if ngModel sets the raw unmasked value to bound value or the formatted mask value.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>placeholder</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Advisory information to display on input.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>size</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Size of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>maxlength</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Maximum number of character allows in the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tabindex</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Specifies tab order of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the element value cannot be altered.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>readonly</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that an input field is read-only.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>name</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Name of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>required</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>characterPattern</td>\\r\\n                            <td>string</td>\\r\\n                            <td>[A-Za-z]</td>\\r\\n                            <td>Regex pattern for alpha characters</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autoFocus</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, the input gets a focus automatically on load.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autocomplete</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Used to define a string that autocomplete attribute the current element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ariaLabel</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Used to define a string that labels the current element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ariaRequired</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Used to indicate that user input is required on an element before a form can be submitted.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>title</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Title text of the input text.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onFocus</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when input receives focus.</td>\\r\\n                        </tr> \\r\\n                        <tr>\\r\\n                            <td>onBlur</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when input loses focus.</td>\\r\\n                        </tr>   \\r\\n                        <tr>\\r\\n                            <td>onComplete</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke on when user completes the mask pattern.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onInput</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke on when the input field value is altered.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Methods</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>focus</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Applies focus to the input.</td>\\r\\n                        </tr> \\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Styling is same as <a href=\\\"#\\\" [routerLink]=\\\"['/inputtext']\\\">inputtext component</a>, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/inputmask\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;div class=\\\"ui-g ui-fluid\\\"&gt;\\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;Basic&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"99-999999\\\" [(ngModel)]=\\\"val1\\\" placeholder=\\\"99-999999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n    \\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;SSN&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"999-99-9999\\\" [(ngModel)]=\\\"val2\\\" placeholder=\\\"999-99-9999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n    \\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;Date&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"99/99/9999\\\" [(ngModel)]=\\\"val3\\\" placeholder=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n    \\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;Phone&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"(999) 999-9999\\\" [(ngModel)]=\\\"val4\\\" placeholder=\\\"(999) 999-9999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n    \\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;Phone Ext&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"(999) 999-9999? x99999\\\" [(ngModel)]=\\\"val5\\\" placeholder=\\\"(999) 999-9999? x99999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n    \\r\\n    &lt;div class=\\\"ui-g-12 ui-md-6 ui-lg-4\\\"&gt;\\r\\n        &lt;span&gt;Serial Number&lt;/span&gt;\\r\\n        &lt;p-inputMask mask=\\\"a*-999-a999\\\" [(ngModel)]=\\\"val6\\\" placeholder=\\\"a*-999-a999\\\"&gt;&lt;/p-inputMask&gt;\\r\\n    &lt;/div&gt;\\r\\n&lt;/div&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class InputMaskDemo &#123;\\r\\n\\r\\n    val1: string;\\r\\n\\r\\n    val2: string;\\r\\n\\r\\n    val3: string;\\r\\n\\r\\n    val4: string;\\r\\n\\r\\n    val5: string;\\r\\n    \\r\\n    val6: string;\\r\\n    \\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\"","/*\r\n    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery\r\n    https://github.com/digitalBush/jquery.maskedinput/\r\n\r\n    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)\r\n\r\n    Permission is hereby granted, free of charge, to any person\r\n    obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without\r\n    restriction, including without limitation the rights to use,\r\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the\r\n    Software is furnished to do so, subject to the following\r\n    conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n    OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\nimport {NgModule,Component,ElementRef,OnInit,OnDestroy,HostBinding,HostListener,Input,forwardRef,Output,EventEmitter,ViewChild} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {InputTextModule} from '../inputtext/inputtext';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const INPUTMASK_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => InputMask),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-inputMask',\r\n    template: `<input #input pInputText [attr.id]=\"inputId\" [attr.type]=\"type\" [attr.name]=\"name\" [ngStyle]=\"style\" [ngClass]=\"styleClass\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\"\r\n        [attr.size]=\"size\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\" [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\r\n        (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeyDown($event)\" (keypress)=\"onKeyPress($event)\" [attr.autofocus]=\"autoFocus\"\r\n        (input)=\"onInputChange($event)\" (paste)=\"handleInputChange($event)\">`,\r\n    host: {\r\n        '[class.ui-inputwrapper-filled]': 'filled',\r\n        '[class.ui-inputwrapper-focus]': 'focus'\r\n    },\r\n    providers: [INPUTMASK_VALUE_ACCESSOR]\r\n})\r\nexport class InputMask implements OnInit,OnDestroy,ControlValueAccessor {\r\n\r\n    @Input() type: string = 'text';\r\n\r\n    @Input() slotChar: string = '_';\r\n\r\n    @Input() autoClear: boolean = true;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() placeholder: string;\r\n\r\n    @Input() size: number;\r\n\r\n    @Input() maxlength: number;\r\n\r\n    @Input() tabindex: string;\r\n\r\n    @Input() title: string;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @Input() ariaRequired: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() readonly: boolean;\r\n\r\n    @Input() unmask: boolean;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() required: boolean;\r\n\r\n    @Input() characterPattern: string = '[A-Za-z]';\r\n\r\n    @Input() autoFocus: boolean;\r\n\r\n    @Input() autocomplete: string;\r\n\r\n    @ViewChild('input', { static: true }) inputViewChild: ElementRef;\r\n\r\n    @Output() onComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n    value: any;\r\n\r\n    _mask: string;\r\n\r\n    onModelChange: Function = () => {};\r\n\r\n    onModelTouched: Function = () => {};\r\n\r\n    input: HTMLInputElement;\r\n\r\n    filled: boolean;\r\n\r\n    defs: any;\r\n\r\n    tests: any[];\r\n\r\n    partialPosition: any;\r\n\r\n    firstNonMaskPos: number;\r\n\r\n    lastRequiredNonMaskPos: any;\r\n\r\n    len: number;\r\n\r\n    oldVal: string;\r\n\r\n    buffer: any;\r\n\r\n    defaultBuffer: string;\r\n\r\n    focusText: string;\r\n\r\n    caretTimeoutId: any;\r\n\r\n    androidChrome: boolean;\r\n\r\n    focused: boolean;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        let ua = DomHandler.getUserAgent();\r\n        this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\r\n\r\n        this.initMask();\r\n    }\r\n\r\n    @Input() get mask(): string {\r\n        return this._mask;\r\n    }\r\n\r\n    set mask(val:string) {\r\n        this._mask = val;\r\n\r\n        this.initMask();\r\n        this.writeValue('');\r\n        this.onModelChange(this.value);\r\n    }\r\n\r\n    initMask() {\r\n        this.tests = [];\r\n        this.partialPosition = this.mask.length;\r\n        this.len = this.mask.length;\r\n        this.firstNonMaskPos = null;\r\n        this.defs = {\r\n            '9': '[0-9]',\r\n            'a': this.characterPattern,\r\n            '*': `${this.characterPattern}|[0-9]`\r\n        };\r\n\r\n        let maskTokens = this.mask.split('');\r\n        for(let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c == '?') {\r\n\t\t\t\tthis.len--;\r\n\t\t\t\tthis.partialPosition = i;\r\n\t\t\t}\r\n            else if (this.defs[c]) {\r\n\t\t\t\tthis.tests.push(new RegExp(this.defs[c]));\r\n\t\t\t\tif(this.firstNonMaskPos === null) {\r\n\t                this.firstNonMaskPos = this.tests.length - 1;\r\n\t\t\t\t}\r\n                if(i < this.partialPosition){\r\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\r\n                }\r\n\t\t\t}\r\n            else {\r\n\t\t\t\tthis.tests.push(null);\r\n\t\t\t}\r\n        }\r\n\r\n        this.buffer = [];\r\n        for(let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if(c != '?') {\r\n                if(this.defs[c])\r\n                    this.buffer.push(this.getPlaceholder(i));\r\n                else\r\n                    this.buffer.push(c);\r\n            }\r\n        }\r\n        this.defaultBuffer = this.buffer.join('');\r\n    }\r\n\r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n\r\n        if(this.inputViewChild && this.inputViewChild.nativeElement) {\r\n            if(this.value == undefined || this.value == null)\r\n                this.inputViewChild.nativeElement.value = '';\r\n            else\r\n                this.inputViewChild.nativeElement.value = this.value;\r\n\r\n            this.checkVal();\r\n            this.focusText = this.inputViewChild.nativeElement.value;\r\n            this.updateFilledState();\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n\r\n    caret(first?: number, last?: number) {\r\n        let range, begin, end;\r\n\r\n        if(!this.inputViewChild.nativeElement.offsetParent||this.inputViewChild.nativeElement !== document.activeElement) {\r\n            return;\r\n        }\r\n\r\n        if(typeof first == 'number') {\r\n            begin = first;\r\n            end = (typeof last === 'number') ? last : begin;\r\n            if(this.inputViewChild.nativeElement.setSelectionRange) {\r\n                this.inputViewChild.nativeElement.setSelectionRange(begin, end);\r\n            }\r\n            else if(this.inputViewChild.nativeElement['createTextRange']) {\r\n                range = this.inputViewChild.nativeElement['createTextRange']();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', begin);\r\n                range.select();\r\n            }\r\n        }\r\n        else {\r\n            if (this.inputViewChild.nativeElement.setSelectionRange) {\r\n    \t\t\tbegin = this.inputViewChild.nativeElement.selectionStart;\r\n    \t\t\tend = this.inputViewChild.nativeElement.selectionEnd;\r\n    \t\t}\r\n            else if (document['selection'] && document['selection'].createRange) {\r\n    \t\t\trange = document['selection'].createRange();\r\n    \t\t\tbegin = 0 - range.duplicate().moveStart('character', -100000);\r\n    \t\t\tend = begin + range.text.length;\r\n    \t\t}\r\n\r\n    \t\treturn {begin: begin, end: end};\r\n        }\r\n    }\r\n\r\n    isCompleted(): boolean {\r\n        let completed: boolean;\r\n        for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\r\n            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getPlaceholder(i: number) {\r\n        if(i < this.slotChar.length) {\r\n            return this.slotChar.charAt(i);\r\n        }\r\n        return this.slotChar.charAt(0);\r\n    }\r\n\r\n    seekNext(pos) {\r\n        while (++pos < this.len && !this.tests[pos]);\r\n        return pos;\r\n    }\r\n\r\n    seekPrev(pos) {\r\n        while (--pos >= 0 && !this.tests[pos]);\r\n        return pos;\r\n    }\r\n\r\n    shiftL(begin:number,end:number) {\r\n        let i, j;\r\n\r\n        if (begin<0) {\r\n            return;\r\n        }\r\n\r\n        for (i = begin, j = this.seekNext(end); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                if (j < this.len && this.tests[i].test(this.buffer[j])) {\r\n                    this.buffer[i] = this.buffer[j];\r\n                    this.buffer[j] = this.getPlaceholder(j);\r\n                } else {\r\n                    break;\r\n                }\r\n\r\n                j = this.seekNext(j);\r\n            }\r\n        }\r\n        this.writeBuffer();\r\n        this.caret(Math.max(this.firstNonMaskPos, begin));\r\n    }\r\n\r\n    shiftR(pos) {\r\n        let i, c, j, t;\r\n\r\n        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                j = this.seekNext(i);\r\n                t = this.buffer[i];\r\n                this.buffer[i] = c;\r\n                if (j < this.len && this.tests[j].test(t)) {\r\n                    c = t;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAndroidInput(e) {\r\n        var curVal = this.inputViewChild.nativeElement.value;\r\n        var pos = this.caret();\r\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length ) {\r\n            // a deletion or backspace happened\r\n            this.checkVal(true);\r\n            while (pos.begin > 0 && !this.tests[pos.begin-1])\r\n                  pos.begin--;\r\n            if (pos.begin === 0)\r\n            {\r\n               while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])\r\n                  pos.begin++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.caret(pos.begin, pos.begin);\r\n                this.updateModel(e);\r\n                if (this.isCompleted()) {\r\n                    this.onComplete.emit();\r\n                }\r\n            }, 0);\r\n        } else {\r\n            this.checkVal(true);\r\n            while (pos.begin < this.len && !this.tests[pos.begin])\r\n                pos.begin++;\r\n\r\n            setTimeout(() => {\r\n                this.caret(pos.begin, pos.begin);\r\n                this.updateModel(e);\r\n                if (this.isCompleted()) {\r\n                    this.onComplete.emit();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    onInputBlur(e) {\r\n        this.focused = false;\r\n        this.onModelTouched();\r\n        this.checkVal();\r\n        this.updateFilledState();\r\n        this.onBlur.emit(e);\r\n\r\n        if (this.inputViewChild.nativeElement.value != this.focusText || this.inputViewChild.nativeElement.value != this.value) {\r\n            this.updateModel(e);\r\n            let event = document.createEvent('HTMLEvents');\r\n            event.initEvent('change', true, false);\r\n            this.inputViewChild.nativeElement.dispatchEvent(event);\r\n        }\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n\r\n        let k = e.which||e.keyCode,\r\n            pos,\r\n            begin,\r\n            end;\r\n        let iPhone = /iphone/i.test(DomHandler.getUserAgent());\r\n        this.oldVal = this.inputViewChild.nativeElement.value;\r\n\r\n        //backspace, delete, and escape get special treatment\r\n        if (k === 8 || k === 46 || (iPhone && k === 127)) {\r\n            pos = this.caret();\r\n            begin = pos.begin;\r\n            end = pos.end;\r\n\r\n            if (end - begin === 0) {\r\n                begin=k!==46?this.seekPrev(begin):(end=this.seekNext(begin-1));\r\n                end=k===46?this.seekNext(end):end;\r\n            }\r\n\r\n            this.clearBuffer(begin, end);\r\n\t\t\tthis.shiftL(begin, end - 1);\r\n            this.updateModel(e);\r\n\r\n            e.preventDefault();\r\n        } else if( k === 13 ) { // enter\r\n            this.onInputBlur(e);\r\n            this.updateModel(e);\r\n        } else if (k === 27) { // escape\r\n            this.inputViewChild.nativeElement.value = this.focusText;\r\n            this.caret(0, this.checkVal());\r\n            this.updateModel(e);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    onKeyPress(e) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        var k = e.which || e.keyCode,\r\n            pos = this.caret(),\r\n            p,\r\n            c,\r\n            next,\r\n            completed;\r\n\r\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32  || (k > 34 && k < 41)) {//Ignore\r\n            return;\r\n        } else if ( k && k !== 13 ) {\r\n            if (pos.end - pos.begin !== 0){\r\n                this.clearBuffer(pos.begin, pos.end);\r\n                this.shiftL(pos.begin, pos.end-1);\r\n            }\r\n\r\n            p = this.seekNext(pos.begin - 1);\r\n            if (p < this.len) {\r\n                c = String.fromCharCode(k);\r\n                if (this.tests[p].test(c)) {\r\n                    this.shiftR(p);\r\n\r\n                    this.buffer[p] = c;\r\n                    this.writeBuffer();\r\n                    next = this.seekNext(p);\r\n\r\n                    if(/android/i.test(DomHandler.getUserAgent())){\r\n                        //Path for CSP Violation on FireFox OS 1.1\r\n                        let proxy = () => {\r\n                            this.caret(next);\r\n                        };\r\n\r\n                        setTimeout(proxy,0);\r\n                    }else{\r\n                        this.caret(next);\r\n                    }\r\n                    if(pos.begin <= this.lastRequiredNonMaskPos){\r\n                         completed = this.isCompleted();\r\n                     }\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        }\r\n\r\n        this.updateModel(e);\r\n\r\n        this.updateFilledState();\r\n\r\n        if(completed) {\r\n            this.onComplete.emit();\r\n        }\r\n    }\r\n\r\n    clearBuffer(start, end) {\r\n        let i;\r\n        for (i = start; i < end && i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    writeBuffer() {\r\n        this.inputViewChild.nativeElement.value = this.buffer.join('');\r\n    }\r\n\r\n    checkVal(allow?: boolean) {\r\n        //try to place characters where they belong\r\n        let test = this.inputViewChild.nativeElement.value,\r\n            lastMatch = -1,\r\n            i,\r\n            c,\r\n            pos;\r\n\r\n        for (i = 0, pos = 0; i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n                while (pos++ < test.length) {\r\n                    c = test.charAt(pos - 1);\r\n                    if (this.tests[i].test(c)) {\r\n                        this.buffer[i] = c;\r\n                        lastMatch = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pos > test.length) {\r\n                    this.clearBuffer(i + 1, this.len);\r\n                    break;\r\n                }\r\n            } else {\r\n                if (this.buffer[i] === test.charAt(pos)) {\r\n                    pos++;\r\n                }\r\n                if( i < this.partialPosition){\r\n                    lastMatch = i;\r\n                }\r\n            }\r\n        }\r\n        if (allow) {\r\n            this.writeBuffer();\r\n        } else if (lastMatch + 1 < this.partialPosition) {\r\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\r\n                // Invalid value. Remove it and replace it with the\r\n                // mask, which is the default behavior.\r\n                if(this.inputViewChild.nativeElement.value) this.inputViewChild.nativeElement.value = '';\r\n                this.clearBuffer(0, this.len);\r\n            } else {\r\n                // Invalid value, but we opt to show the value to the\r\n                // user and allow them to correct their mistake.\r\n                this.writeBuffer();\r\n            }\r\n        } else {\r\n            this.writeBuffer();\r\n            this.inputViewChild.nativeElement.value = this.inputViewChild.nativeElement.value.substring(0, lastMatch + 1);\r\n        }\r\n        return (this.partialPosition ? i : this.firstNonMaskPos);\r\n    }\r\n\r\n    onInputFocus(event) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        this.focused = true;\r\n\r\n        clearTimeout(this.caretTimeoutId);\r\n        let pos;\r\n\r\n        this.focusText = this.inputViewChild.nativeElement.value;\r\n\r\n        pos = this.checkVal();\r\n\r\n        this.caretTimeoutId = setTimeout(() => {\r\n            if(this.inputViewChild.nativeElement !== document.activeElement){\r\n                return;\r\n            }\r\n            this.writeBuffer();\r\n            if (pos == this.mask.replace(\"?\",\"\").length) {\r\n                this.caret(0, pos);\r\n            } else {\r\n                this.caret(pos);\r\n            }\r\n        }, 10);\r\n\r\n        this.onFocus.emit(event);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        if (this.androidChrome)\r\n            this.handleAndroidInput(event);\r\n        else\r\n            this.handleInputChange(event);\r\n\r\n        this.onInput.emit(event);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            var pos = this.checkVal(true);\r\n            this.caret(pos);\r\n            this.updateModel(event);\r\n            if(this.isCompleted()) {\r\n                this.onComplete.emit();\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    getUnmaskedValue() {\r\n        let unmaskedBuffer = [];\r\n        for(let i = 0; i < this.buffer.length; i++) {\r\n            let c = this.buffer[i];\r\n            if(this.tests[i] && c != this.getPlaceholder(i)) {\r\n                unmaskedBuffer.push(c);\r\n            }\r\n        }\r\n\r\n        return unmaskedBuffer.join('');\r\n    }\r\n\r\n    updateModel(e) {\r\n        const updatedValue = this.unmask ? this.getUnmaskedValue() : e.target.value;\r\n        if(updatedValue !== null || updatedValue !== undefined) {\r\n            this.value = updatedValue;\r\n            this.onModelChange(this.value);\r\n        }\r\n    }\r\n\r\n    updateFilledState() {\r\n        this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\r\n    }\r\n\r\n    focus() {\r\n        this.inputViewChild.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,InputTextModule],\r\n    exports: [InputMask],\r\n    declarations: [InputMask]\r\n})\r\nexport class InputMaskModule { }\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {InputMaskDemo} from './inputmaskdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: InputMaskDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class InputMaskDemoRoutingModule {}\r\n","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}    from '@angular/forms';\r\nimport {InputMaskDemo} from './inputmaskdemo';\r\nimport {InputMaskDemoRoutingModule} from './inputmaskdemo-routing.module';\r\nimport {InputMaskModule} from '../../../components/inputmask/inputmask';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tInputMaskDemoRoutingModule,\r\n        InputMaskModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tInputMaskDemo\r\n\t]\r\n})\r\nexport class InputMaskDemoModule {}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './inputmaskdemo.html',\r\n    styles: [`\r\n        .ui-g-12 > span {\r\n            display: block;\r\n            margin-bottom: 4px;\r\n        }\r\n    `]\r\n})\r\nexport class InputMaskDemo {\r\n\r\n    val1: string;\r\n\r\n    val2: string;\r\n\r\n    val3: string;\r\n\r\n    val4: string;\r\n\r\n    val5: string;\r\n    \r\n    val6: string;\r\n}"],"sourceRoot":""}